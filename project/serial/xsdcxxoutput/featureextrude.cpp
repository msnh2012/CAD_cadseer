// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featureextrude.h"

namespace prj
{
  namespace srl
  {
    // FeatureExtrude
    // 

    const FeatureExtrude::FeatureBaseType& FeatureExtrude::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureExtrude::FeatureBaseType& FeatureExtrude::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureExtrude::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureExtrude::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureExtrude::PicksType& FeatureExtrude::
    picks () const
    {
      return this->picks_.get ();
    }

    FeatureExtrude::PicksType& FeatureExtrude::
    picks ()
    {
      return this->picks_.get ();
    }

    void FeatureExtrude::
    picks (const PicksType& x)
    {
      this->picks_.set (x);
    }

    void FeatureExtrude::
    picks (::std::unique_ptr< PicksType > x)
    {
      this->picks_.set (std::move (x));
    }

    const FeatureExtrude::AxisPicksType& FeatureExtrude::
    axisPicks () const
    {
      return this->axisPicks_.get ();
    }

    FeatureExtrude::AxisPicksType& FeatureExtrude::
    axisPicks ()
    {
      return this->axisPicks_.get ();
    }

    void FeatureExtrude::
    axisPicks (const AxisPicksType& x)
    {
      this->axisPicks_.set (x);
    }

    void FeatureExtrude::
    axisPicks (::std::unique_ptr< AxisPicksType > x)
    {
      this->axisPicks_.set (std::move (x));
    }

    const FeatureExtrude::DirectionType& FeatureExtrude::
    direction () const
    {
      return this->direction_.get ();
    }

    FeatureExtrude::DirectionType& FeatureExtrude::
    direction ()
    {
      return this->direction_.get ();
    }

    void FeatureExtrude::
    direction (const DirectionType& x)
    {
      this->direction_.set (x);
    }

    void FeatureExtrude::
    direction (::std::unique_ptr< DirectionType > x)
    {
      this->direction_.set (std::move (x));
    }

    const FeatureExtrude::DirectionLabelType& FeatureExtrude::
    directionLabel () const
    {
      return this->directionLabel_.get ();
    }

    FeatureExtrude::DirectionLabelType& FeatureExtrude::
    directionLabel ()
    {
      return this->directionLabel_.get ();
    }

    void FeatureExtrude::
    directionLabel (const DirectionLabelType& x)
    {
      this->directionLabel_.set (x);
    }

    void FeatureExtrude::
    directionLabel (::std::unique_ptr< DirectionLabelType > x)
    {
      this->directionLabel_.set (std::move (x));
    }

    const FeatureExtrude::DistanceType& FeatureExtrude::
    distance () const
    {
      return this->distance_.get ();
    }

    FeatureExtrude::DistanceType& FeatureExtrude::
    distance ()
    {
      return this->distance_.get ();
    }

    void FeatureExtrude::
    distance (const DistanceType& x)
    {
      this->distance_.set (x);
    }

    void FeatureExtrude::
    distance (::std::unique_ptr< DistanceType > x)
    {
      this->distance_.set (std::move (x));
    }

    const FeatureExtrude::DistanceLabelType& FeatureExtrude::
    distanceLabel () const
    {
      return this->distanceLabel_.get ();
    }

    FeatureExtrude::DistanceLabelType& FeatureExtrude::
    distanceLabel ()
    {
      return this->distanceLabel_.get ();
    }

    void FeatureExtrude::
    distanceLabel (const DistanceLabelType& x)
    {
      this->distanceLabel_.set (x);
    }

    void FeatureExtrude::
    distanceLabel (::std::unique_ptr< DistanceLabelType > x)
    {
      this->distanceLabel_.set (std::move (x));
    }

    const FeatureExtrude::OffsetType& FeatureExtrude::
    offset () const
    {
      return this->offset_.get ();
    }

    FeatureExtrude::OffsetType& FeatureExtrude::
    offset ()
    {
      return this->offset_.get ();
    }

    void FeatureExtrude::
    offset (const OffsetType& x)
    {
      this->offset_.set (x);
    }

    void FeatureExtrude::
    offset (::std::unique_ptr< OffsetType > x)
    {
      this->offset_.set (std::move (x));
    }

    const FeatureExtrude::OffsetLabelType& FeatureExtrude::
    offsetLabel () const
    {
      return this->offsetLabel_.get ();
    }

    FeatureExtrude::OffsetLabelType& FeatureExtrude::
    offsetLabel ()
    {
      return this->offsetLabel_.get ();
    }

    void FeatureExtrude::
    offsetLabel (const OffsetLabelType& x)
    {
      this->offsetLabel_.set (x);
    }

    void FeatureExtrude::
    offsetLabel (::std::unique_ptr< OffsetLabelType > x)
    {
      this->offsetLabel_.set (std::move (x));
    }

    const FeatureExtrude::DirectionTypeType& FeatureExtrude::
    directionType () const
    {
      return this->directionType_.get ();
    }

    FeatureExtrude::DirectionTypeType& FeatureExtrude::
    directionType ()
    {
      return this->directionType_.get ();
    }

    void FeatureExtrude::
    directionType (const DirectionTypeType& x)
    {
      this->directionType_.set (x);
    }

    const FeatureExtrude::OriginalMapType& FeatureExtrude::
    originalMap () const
    {
      return this->originalMap_.get ();
    }

    FeatureExtrude::OriginalMapType& FeatureExtrude::
    originalMap ()
    {
      return this->originalMap_.get ();
    }

    void FeatureExtrude::
    originalMap (const OriginalMapType& x)
    {
      this->originalMap_.set (x);
    }

    void FeatureExtrude::
    originalMap (::std::unique_ptr< OriginalMapType > x)
    {
      this->originalMap_.set (std::move (x));
    }

    const FeatureExtrude::GeneratedMapType& FeatureExtrude::
    generatedMap () const
    {
      return this->generatedMap_.get ();
    }

    FeatureExtrude::GeneratedMapType& FeatureExtrude::
    generatedMap ()
    {
      return this->generatedMap_.get ();
    }

    void FeatureExtrude::
    generatedMap (const GeneratedMapType& x)
    {
      this->generatedMap_.set (x);
    }

    void FeatureExtrude::
    generatedMap (::std::unique_ptr< GeneratedMapType > x)
    {
      this->generatedMap_.set (std::move (x));
    }

    const FeatureExtrude::LastMapType& FeatureExtrude::
    lastMap () const
    {
      return this->lastMap_.get ();
    }

    FeatureExtrude::LastMapType& FeatureExtrude::
    lastMap ()
    {
      return this->lastMap_.get ();
    }

    void FeatureExtrude::
    lastMap (const LastMapType& x)
    {
      this->lastMap_.set (x);
    }

    void FeatureExtrude::
    lastMap (::std::unique_ptr< LastMapType > x)
    {
      this->lastMap_.set (std::move (x));
    }

    const FeatureExtrude::OWireMapType& FeatureExtrude::
    oWireMap () const
    {
      return this->oWireMap_.get ();
    }

    FeatureExtrude::OWireMapType& FeatureExtrude::
    oWireMap ()
    {
      return this->oWireMap_.get ();
    }

    void FeatureExtrude::
    oWireMap (const OWireMapType& x)
    {
      this->oWireMap_.set (x);
    }

    void FeatureExtrude::
    oWireMap (::std::unique_ptr< OWireMapType > x)
    {
      this->oWireMap_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // FeatureExtrude
    //

    FeatureExtrude::
    FeatureExtrude (const FeatureBaseType& featureBase,
                    const PicksType& picks,
                    const AxisPicksType& axisPicks,
                    const DirectionType& direction,
                    const DirectionLabelType& directionLabel,
                    const DistanceType& distance,
                    const DistanceLabelType& distanceLabel,
                    const OffsetType& offset,
                    const OffsetLabelType& offsetLabel,
                    const DirectionTypeType& directionType,
                    const OriginalMapType& originalMap,
                    const GeneratedMapType& generatedMap,
                    const LastMapType& lastMap,
                    const OWireMapType& oWireMap)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      picks_ (picks, this),
      axisPicks_ (axisPicks, this),
      direction_ (direction, this),
      directionLabel_ (directionLabel, this),
      distance_ (distance, this),
      distanceLabel_ (distanceLabel, this),
      offset_ (offset, this),
      offsetLabel_ (offsetLabel, this),
      directionType_ (directionType, this),
      originalMap_ (originalMap, this),
      generatedMap_ (generatedMap, this),
      lastMap_ (lastMap, this),
      oWireMap_ (oWireMap, this)
    {
    }

    FeatureExtrude::
    FeatureExtrude (::std::unique_ptr< FeatureBaseType > featureBase,
                    ::std::unique_ptr< PicksType > picks,
                    ::std::unique_ptr< AxisPicksType > axisPicks,
                    ::std::unique_ptr< DirectionType > direction,
                    ::std::unique_ptr< DirectionLabelType > directionLabel,
                    ::std::unique_ptr< DistanceType > distance,
                    ::std::unique_ptr< DistanceLabelType > distanceLabel,
                    ::std::unique_ptr< OffsetType > offset,
                    ::std::unique_ptr< OffsetLabelType > offsetLabel,
                    const DirectionTypeType& directionType,
                    ::std::unique_ptr< OriginalMapType > originalMap,
                    ::std::unique_ptr< GeneratedMapType > generatedMap,
                    ::std::unique_ptr< LastMapType > lastMap,
                    ::std::unique_ptr< OWireMapType > oWireMap)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      picks_ (std::move (picks), this),
      axisPicks_ (std::move (axisPicks), this),
      direction_ (std::move (direction), this),
      directionLabel_ (std::move (directionLabel), this),
      distance_ (std::move (distance), this),
      distanceLabel_ (std::move (distanceLabel), this),
      offset_ (std::move (offset), this),
      offsetLabel_ (std::move (offsetLabel), this),
      directionType_ (directionType, this),
      originalMap_ (std::move (originalMap), this),
      generatedMap_ (std::move (generatedMap), this),
      lastMap_ (std::move (lastMap), this),
      oWireMap_ (std::move (oWireMap), this)
    {
    }

    FeatureExtrude::
    FeatureExtrude (const FeatureExtrude& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      picks_ (x.picks_, f, this),
      axisPicks_ (x.axisPicks_, f, this),
      direction_ (x.direction_, f, this),
      directionLabel_ (x.directionLabel_, f, this),
      distance_ (x.distance_, f, this),
      distanceLabel_ (x.distanceLabel_, f, this),
      offset_ (x.offset_, f, this),
      offsetLabel_ (x.offsetLabel_, f, this),
      directionType_ (x.directionType_, f, this),
      originalMap_ (x.originalMap_, f, this),
      generatedMap_ (x.generatedMap_, f, this),
      lastMap_ (x.lastMap_, f, this),
      oWireMap_ (x.oWireMap_, f, this)
    {
    }

    FeatureExtrude::
    FeatureExtrude (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      picks_ (this),
      axisPicks_ (this),
      direction_ (this),
      directionLabel_ (this),
      distance_ (this),
      distanceLabel_ (this),
      offset_ (this),
      offsetLabel_ (this),
      directionType_ (this),
      originalMap_ (this),
      generatedMap_ (this),
      lastMap_ (this),
      oWireMap_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureExtrude::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // picks
        //
        if (n.name () == "picks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PicksType > r (
            PicksTraits::create (i, f, this));

          if (!picks_.present ())
          {
            this->picks_.set (::std::move (r));
            continue;
          }
        }

        // axisPicks
        //
        if (n.name () == "axisPicks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< AxisPicksType > r (
            AxisPicksTraits::create (i, f, this));

          if (!axisPicks_.present ())
          {
            this->axisPicks_.set (::std::move (r));
            continue;
          }
        }

        // direction
        //
        if (n.name () == "direction" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DirectionType > r (
            DirectionTraits::create (i, f, this));

          if (!direction_.present ())
          {
            this->direction_.set (::std::move (r));
            continue;
          }
        }

        // directionLabel
        //
        if (n.name () == "directionLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DirectionLabelType > r (
            DirectionLabelTraits::create (i, f, this));

          if (!directionLabel_.present ())
          {
            this->directionLabel_.set (::std::move (r));
            continue;
          }
        }

        // distance
        //
        if (n.name () == "distance" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DistanceType > r (
            DistanceTraits::create (i, f, this));

          if (!distance_.present ())
          {
            this->distance_.set (::std::move (r));
            continue;
          }
        }

        // distanceLabel
        //
        if (n.name () == "distanceLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DistanceLabelType > r (
            DistanceLabelTraits::create (i, f, this));

          if (!distanceLabel_.present ())
          {
            this->distanceLabel_.set (::std::move (r));
            continue;
          }
        }

        // offset
        //
        if (n.name () == "offset" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OffsetType > r (
            OffsetTraits::create (i, f, this));

          if (!offset_.present ())
          {
            this->offset_.set (::std::move (r));
            continue;
          }
        }

        // offsetLabel
        //
        if (n.name () == "offsetLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OffsetLabelType > r (
            OffsetLabelTraits::create (i, f, this));

          if (!offsetLabel_.present ())
          {
            this->offsetLabel_.set (::std::move (r));
            continue;
          }
        }

        // directionType
        //
        if (n.name () == "directionType" && n.namespace_ ().empty ())
        {
          if (!directionType_.present ())
          {
            this->directionType_.set (DirectionTypeTraits::create (i, f, this));
            continue;
          }
        }

        // originalMap
        //
        if (n.name () == "originalMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OriginalMapType > r (
            OriginalMapTraits::create (i, f, this));

          if (!originalMap_.present ())
          {
            this->originalMap_.set (::std::move (r));
            continue;
          }
        }

        // generatedMap
        //
        if (n.name () == "generatedMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< GeneratedMapType > r (
            GeneratedMapTraits::create (i, f, this));

          if (!generatedMap_.present ())
          {
            this->generatedMap_.set (::std::move (r));
            continue;
          }
        }

        // lastMap
        //
        if (n.name () == "lastMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< LastMapType > r (
            LastMapTraits::create (i, f, this));

          if (!lastMap_.present ())
          {
            this->lastMap_.set (::std::move (r));
            continue;
          }
        }

        // oWireMap
        //
        if (n.name () == "oWireMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OWireMapType > r (
            OWireMapTraits::create (i, f, this));

          if (!oWireMap_.present ())
          {
            this->oWireMap_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!picks_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "picks",
          "");
      }

      if (!axisPicks_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "axisPicks",
          "");
      }

      if (!direction_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "direction",
          "");
      }

      if (!directionLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "directionLabel",
          "");
      }

      if (!distance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "distance",
          "");
      }

      if (!distanceLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "distanceLabel",
          "");
      }

      if (!offset_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "offset",
          "");
      }

      if (!offsetLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "offsetLabel",
          "");
      }

      if (!directionType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "directionType",
          "");
      }

      if (!originalMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "originalMap",
          "");
      }

      if (!generatedMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "generatedMap",
          "");
      }

      if (!lastMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "lastMap",
          "");
      }

      if (!oWireMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "oWireMap",
          "");
      }
    }

    FeatureExtrude* FeatureExtrude::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureExtrude (*this, f, c);
    }

    FeatureExtrude& FeatureExtrude::
    operator= (const FeatureExtrude& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->picks_ = x.picks_;
        this->axisPicks_ = x.axisPicks_;
        this->direction_ = x.direction_;
        this->directionLabel_ = x.directionLabel_;
        this->distance_ = x.distance_;
        this->distanceLabel_ = x.distanceLabel_;
        this->offset_ = x.offset_;
        this->offsetLabel_ = x.offsetLabel_;
        this->directionType_ = x.directionType_;
        this->originalMap_ = x.originalMap_;
        this->generatedMap_ = x.generatedMap_;
        this->lastMap_ = x.lastMap_;
        this->oWireMap_ = x.oWireMap_;
      }

      return *this;
    }

    FeatureExtrude::
    ~FeatureExtrude ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtrude > (
        ::prj::srl::extrude (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtrude > (
        ::prj::srl::extrude (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtrude > (
        ::prj::srl::extrude (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::extrude (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::extrude (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::extrude (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::extrude (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::extrude (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::extrude (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtrude > (
        ::prj::srl::extrude (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtrude > (
        ::prj::srl::extrude (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtrude > (
        ::prj::srl::extrude (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureExtrude > (
          ::prj::srl::extrude (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "extrude" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureExtrude > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureExtrude, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "extrude",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtrude >
    extrude (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "extrude" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureExtrude > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureExtrude, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "extrude",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const FeatureExtrude& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // picks
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "picks",
            e));

        s << i.picks ();
      }

      // axisPicks
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "axisPicks",
            e));

        s << i.axisPicks ();
      }

      // direction
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "direction",
            e));

        s << i.direction ();
      }

      // directionLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "directionLabel",
            e));

        s << i.directionLabel ();
      }

      // distance
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "distance",
            e));

        s << i.distance ();
      }

      // distanceLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "distanceLabel",
            e));

        s << i.distanceLabel ();
      }

      // offset
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "offset",
            e));

        s << i.offset ();
      }

      // offsetLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "offsetLabel",
            e));

        s << i.offsetLabel ();
      }

      // directionType
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "directionType",
            e));

        s << i.directionType ();
      }

      // originalMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "originalMap",
            e));

        s << i.originalMap ();
      }

      // generatedMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "generatedMap",
            e));

        s << i.generatedMap ();
      }

      // lastMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "lastMap",
            e));

        s << i.lastMap ();
      }

      // oWireMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "oWireMap",
            e));

        s << i.oWireMap ();
      }
    }

    void
    extrude (::std::ostream& o,
             const ::prj::srl::FeatureExtrude& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extrude (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    extrude (::std::ostream& o,
             const ::prj::srl::FeatureExtrude& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extrude (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    extrude (::std::ostream& o,
             const ::prj::srl::FeatureExtrude& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extrude (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    extrude (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureExtrude& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extrude (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    extrude (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureExtrude& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extrude (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    extrude (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureExtrude& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extrude (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    extrude (::xercesc::DOMDocument& d,
             const ::prj::srl::FeatureExtrude& s,
             ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "extrude" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "extrude",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    extrude (const ::prj::srl::FeatureExtrude& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "extrude",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::extrude (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

