// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featuretransitioncurve.h"

namespace prj
{
  namespace srl
  {
    // FeatureTransitionCurve
    // 

    const FeatureTransitionCurve::FeatureBaseType& FeatureTransitionCurve::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureTransitionCurve::FeatureBaseType& FeatureTransitionCurve::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureTransitionCurve::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureTransitionCurve::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureTransitionCurve::PicksType& FeatureTransitionCurve::
    picks () const
    {
      return this->picks_.get ();
    }

    FeatureTransitionCurve::PicksType& FeatureTransitionCurve::
    picks ()
    {
      return this->picks_.get ();
    }

    void FeatureTransitionCurve::
    picks (const PicksType& x)
    {
      this->picks_.set (x);
    }

    void FeatureTransitionCurve::
    picks (::std::unique_ptr< PicksType > x)
    {
      this->picks_.set (std::move (x));
    }

    const FeatureTransitionCurve::Pick0DirectionType& FeatureTransitionCurve::
    pick0Direction () const
    {
      return this->pick0Direction_.get ();
    }

    FeatureTransitionCurve::Pick0DirectionType& FeatureTransitionCurve::
    pick0Direction ()
    {
      return this->pick0Direction_.get ();
    }

    void FeatureTransitionCurve::
    pick0Direction (const Pick0DirectionType& x)
    {
      this->pick0Direction_.set (x);
    }

    void FeatureTransitionCurve::
    pick0Direction (::std::unique_ptr< Pick0DirectionType > x)
    {
      this->pick0Direction_.set (std::move (x));
    }

    const FeatureTransitionCurve::Pick1DirectionType& FeatureTransitionCurve::
    pick1Direction () const
    {
      return this->pick1Direction_.get ();
    }

    FeatureTransitionCurve::Pick1DirectionType& FeatureTransitionCurve::
    pick1Direction ()
    {
      return this->pick1Direction_.get ();
    }

    void FeatureTransitionCurve::
    pick1Direction (const Pick1DirectionType& x)
    {
      this->pick1Direction_.set (x);
    }

    void FeatureTransitionCurve::
    pick1Direction (::std::unique_ptr< Pick1DirectionType > x)
    {
      this->pick1Direction_.set (std::move (x));
    }

    const FeatureTransitionCurve::Pick0MagnitudeType& FeatureTransitionCurve::
    pick0Magnitude () const
    {
      return this->pick0Magnitude_.get ();
    }

    FeatureTransitionCurve::Pick0MagnitudeType& FeatureTransitionCurve::
    pick0Magnitude ()
    {
      return this->pick0Magnitude_.get ();
    }

    void FeatureTransitionCurve::
    pick0Magnitude (const Pick0MagnitudeType& x)
    {
      this->pick0Magnitude_.set (x);
    }

    void FeatureTransitionCurve::
    pick0Magnitude (::std::unique_ptr< Pick0MagnitudeType > x)
    {
      this->pick0Magnitude_.set (std::move (x));
    }

    const FeatureTransitionCurve::Pick1MagnitudeType& FeatureTransitionCurve::
    pick1Magnitude () const
    {
      return this->pick1Magnitude_.get ();
    }

    FeatureTransitionCurve::Pick1MagnitudeType& FeatureTransitionCurve::
    pick1Magnitude ()
    {
      return this->pick1Magnitude_.get ();
    }

    void FeatureTransitionCurve::
    pick1Magnitude (const Pick1MagnitudeType& x)
    {
      this->pick1Magnitude_.set (x);
    }

    void FeatureTransitionCurve::
    pick1Magnitude (::std::unique_ptr< Pick1MagnitudeType > x)
    {
      this->pick1Magnitude_.set (std::move (x));
    }

    const FeatureTransitionCurve::DirectionLabel0Type& FeatureTransitionCurve::
    directionLabel0 () const
    {
      return this->directionLabel0_.get ();
    }

    FeatureTransitionCurve::DirectionLabel0Type& FeatureTransitionCurve::
    directionLabel0 ()
    {
      return this->directionLabel0_.get ();
    }

    void FeatureTransitionCurve::
    directionLabel0 (const DirectionLabel0Type& x)
    {
      this->directionLabel0_.set (x);
    }

    void FeatureTransitionCurve::
    directionLabel0 (::std::unique_ptr< DirectionLabel0Type > x)
    {
      this->directionLabel0_.set (std::move (x));
    }

    const FeatureTransitionCurve::DirectionLabel1Type& FeatureTransitionCurve::
    directionLabel1 () const
    {
      return this->directionLabel1_.get ();
    }

    FeatureTransitionCurve::DirectionLabel1Type& FeatureTransitionCurve::
    directionLabel1 ()
    {
      return this->directionLabel1_.get ();
    }

    void FeatureTransitionCurve::
    directionLabel1 (const DirectionLabel1Type& x)
    {
      this->directionLabel1_.set (x);
    }

    void FeatureTransitionCurve::
    directionLabel1 (::std::unique_ptr< DirectionLabel1Type > x)
    {
      this->directionLabel1_.set (std::move (x));
    }

    const FeatureTransitionCurve::MagnitudeLabel0Type& FeatureTransitionCurve::
    magnitudeLabel0 () const
    {
      return this->magnitudeLabel0_.get ();
    }

    FeatureTransitionCurve::MagnitudeLabel0Type& FeatureTransitionCurve::
    magnitudeLabel0 ()
    {
      return this->magnitudeLabel0_.get ();
    }

    void FeatureTransitionCurve::
    magnitudeLabel0 (const MagnitudeLabel0Type& x)
    {
      this->magnitudeLabel0_.set (x);
    }

    void FeatureTransitionCurve::
    magnitudeLabel0 (::std::unique_ptr< MagnitudeLabel0Type > x)
    {
      this->magnitudeLabel0_.set (std::move (x));
    }

    const FeatureTransitionCurve::MagnitudeLabel1Type& FeatureTransitionCurve::
    magnitudeLabel1 () const
    {
      return this->magnitudeLabel1_.get ();
    }

    FeatureTransitionCurve::MagnitudeLabel1Type& FeatureTransitionCurve::
    magnitudeLabel1 ()
    {
      return this->magnitudeLabel1_.get ();
    }

    void FeatureTransitionCurve::
    magnitudeLabel1 (const MagnitudeLabel1Type& x)
    {
      this->magnitudeLabel1_.set (x);
    }

    void FeatureTransitionCurve::
    magnitudeLabel1 (::std::unique_ptr< MagnitudeLabel1Type > x)
    {
      this->magnitudeLabel1_.set (std::move (x));
    }

    const FeatureTransitionCurve::CurveIdType& FeatureTransitionCurve::
    curveId () const
    {
      return this->curveId_.get ();
    }

    FeatureTransitionCurve::CurveIdType& FeatureTransitionCurve::
    curveId ()
    {
      return this->curveId_.get ();
    }

    void FeatureTransitionCurve::
    curveId (const CurveIdType& x)
    {
      this->curveId_.set (x);
    }

    void FeatureTransitionCurve::
    curveId (::std::unique_ptr< CurveIdType > x)
    {
      this->curveId_.set (std::move (x));
    }

    const FeatureTransitionCurve::CurveIdType& FeatureTransitionCurve::
    curveId_default_value ()
    {
      return curveId_default_value_;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // FeatureTransitionCurve
    //

    const FeatureTransitionCurve::CurveIdType FeatureTransitionCurve::curveId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    FeatureTransitionCurve::
    FeatureTransitionCurve (const FeatureBaseType& featureBase,
                            const PicksType& picks,
                            const Pick0DirectionType& pick0Direction,
                            const Pick1DirectionType& pick1Direction,
                            const Pick0MagnitudeType& pick0Magnitude,
                            const Pick1MagnitudeType& pick1Magnitude,
                            const DirectionLabel0Type& directionLabel0,
                            const DirectionLabel1Type& directionLabel1,
                            const MagnitudeLabel0Type& magnitudeLabel0,
                            const MagnitudeLabel1Type& magnitudeLabel1,
                            const CurveIdType& curveId)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      picks_ (picks, this),
      pick0Direction_ (pick0Direction, this),
      pick1Direction_ (pick1Direction, this),
      pick0Magnitude_ (pick0Magnitude, this),
      pick1Magnitude_ (pick1Magnitude, this),
      directionLabel0_ (directionLabel0, this),
      directionLabel1_ (directionLabel1, this),
      magnitudeLabel0_ (magnitudeLabel0, this),
      magnitudeLabel1_ (magnitudeLabel1, this),
      curveId_ (curveId, this)
    {
    }

    FeatureTransitionCurve::
    FeatureTransitionCurve (::std::unique_ptr< FeatureBaseType > featureBase,
                            ::std::unique_ptr< PicksType > picks,
                            ::std::unique_ptr< Pick0DirectionType > pick0Direction,
                            ::std::unique_ptr< Pick1DirectionType > pick1Direction,
                            ::std::unique_ptr< Pick0MagnitudeType > pick0Magnitude,
                            ::std::unique_ptr< Pick1MagnitudeType > pick1Magnitude,
                            ::std::unique_ptr< DirectionLabel0Type > directionLabel0,
                            ::std::unique_ptr< DirectionLabel1Type > directionLabel1,
                            ::std::unique_ptr< MagnitudeLabel0Type > magnitudeLabel0,
                            ::std::unique_ptr< MagnitudeLabel1Type > magnitudeLabel1,
                            const CurveIdType& curveId)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      picks_ (std::move (picks), this),
      pick0Direction_ (std::move (pick0Direction), this),
      pick1Direction_ (std::move (pick1Direction), this),
      pick0Magnitude_ (std::move (pick0Magnitude), this),
      pick1Magnitude_ (std::move (pick1Magnitude), this),
      directionLabel0_ (std::move (directionLabel0), this),
      directionLabel1_ (std::move (directionLabel1), this),
      magnitudeLabel0_ (std::move (magnitudeLabel0), this),
      magnitudeLabel1_ (std::move (magnitudeLabel1), this),
      curveId_ (curveId, this)
    {
    }

    FeatureTransitionCurve::
    FeatureTransitionCurve (const FeatureTransitionCurve& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      picks_ (x.picks_, f, this),
      pick0Direction_ (x.pick0Direction_, f, this),
      pick1Direction_ (x.pick1Direction_, f, this),
      pick0Magnitude_ (x.pick0Magnitude_, f, this),
      pick1Magnitude_ (x.pick1Magnitude_, f, this),
      directionLabel0_ (x.directionLabel0_, f, this),
      directionLabel1_ (x.directionLabel1_, f, this),
      magnitudeLabel0_ (x.magnitudeLabel0_, f, this),
      magnitudeLabel1_ (x.magnitudeLabel1_, f, this),
      curveId_ (x.curveId_, f, this)
    {
    }

    FeatureTransitionCurve::
    FeatureTransitionCurve (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      picks_ (this),
      pick0Direction_ (this),
      pick1Direction_ (this),
      pick0Magnitude_ (this),
      pick1Magnitude_ (this),
      directionLabel0_ (this),
      directionLabel1_ (this),
      magnitudeLabel0_ (this),
      magnitudeLabel1_ (this),
      curveId_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureTransitionCurve::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // picks
        //
        if (n.name () == "picks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PicksType > r (
            PicksTraits::create (i, f, this));

          if (!picks_.present ())
          {
            this->picks_.set (::std::move (r));
            continue;
          }
        }

        // pick0Direction
        //
        if (n.name () == "pick0Direction" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< Pick0DirectionType > r (
            Pick0DirectionTraits::create (i, f, this));

          if (!pick0Direction_.present ())
          {
            this->pick0Direction_.set (::std::move (r));
            continue;
          }
        }

        // pick1Direction
        //
        if (n.name () == "pick1Direction" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< Pick1DirectionType > r (
            Pick1DirectionTraits::create (i, f, this));

          if (!pick1Direction_.present ())
          {
            this->pick1Direction_.set (::std::move (r));
            continue;
          }
        }

        // pick0Magnitude
        //
        if (n.name () == "pick0Magnitude" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< Pick0MagnitudeType > r (
            Pick0MagnitudeTraits::create (i, f, this));

          if (!pick0Magnitude_.present ())
          {
            this->pick0Magnitude_.set (::std::move (r));
            continue;
          }
        }

        // pick1Magnitude
        //
        if (n.name () == "pick1Magnitude" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< Pick1MagnitudeType > r (
            Pick1MagnitudeTraits::create (i, f, this));

          if (!pick1Magnitude_.present ())
          {
            this->pick1Magnitude_.set (::std::move (r));
            continue;
          }
        }

        // directionLabel0
        //
        if (n.name () == "directionLabel0" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DirectionLabel0Type > r (
            DirectionLabel0Traits::create (i, f, this));

          if (!directionLabel0_.present ())
          {
            this->directionLabel0_.set (::std::move (r));
            continue;
          }
        }

        // directionLabel1
        //
        if (n.name () == "directionLabel1" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DirectionLabel1Type > r (
            DirectionLabel1Traits::create (i, f, this));

          if (!directionLabel1_.present ())
          {
            this->directionLabel1_.set (::std::move (r));
            continue;
          }
        }

        // magnitudeLabel0
        //
        if (n.name () == "magnitudeLabel0" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< MagnitudeLabel0Type > r (
            MagnitudeLabel0Traits::create (i, f, this));

          if (!magnitudeLabel0_.present ())
          {
            this->magnitudeLabel0_.set (::std::move (r));
            continue;
          }
        }

        // magnitudeLabel1
        //
        if (n.name () == "magnitudeLabel1" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< MagnitudeLabel1Type > r (
            MagnitudeLabel1Traits::create (i, f, this));

          if (!magnitudeLabel1_.present ())
          {
            this->magnitudeLabel1_.set (::std::move (r));
            continue;
          }
        }

        // curveId
        //
        if (n.name () == "curveId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CurveIdType > r (
            CurveIdTraits::create (i, f, this));

          if (!curveId_.present ())
          {
            this->curveId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!picks_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "picks",
          "");
      }

      if (!pick0Direction_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "pick0Direction",
          "");
      }

      if (!pick1Direction_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "pick1Direction",
          "");
      }

      if (!pick0Magnitude_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "pick0Magnitude",
          "");
      }

      if (!pick1Magnitude_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "pick1Magnitude",
          "");
      }

      if (!directionLabel0_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "directionLabel0",
          "");
      }

      if (!directionLabel1_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "directionLabel1",
          "");
      }

      if (!magnitudeLabel0_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "magnitudeLabel0",
          "");
      }

      if (!magnitudeLabel1_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "magnitudeLabel1",
          "");
      }

      if (!curveId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "curveId",
          "");
      }
    }

    FeatureTransitionCurve* FeatureTransitionCurve::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureTransitionCurve (*this, f, c);
    }

    FeatureTransitionCurve& FeatureTransitionCurve::
    operator= (const FeatureTransitionCurve& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->picks_ = x.picks_;
        this->pick0Direction_ = x.pick0Direction_;
        this->pick1Direction_ = x.pick1Direction_;
        this->pick0Magnitude_ = x.pick0Magnitude_;
        this->pick1Magnitude_ = x.pick1Magnitude_;
        this->directionLabel0_ = x.directionLabel0_;
        this->directionLabel1_ = x.directionLabel1_;
        this->magnitudeLabel0_ = x.magnitudeLabel0_;
        this->magnitudeLabel1_ = x.magnitudeLabel1_;
        this->curveId_ = x.curveId_;
      }

      return *this;
    }

    FeatureTransitionCurve::
    ~FeatureTransitionCurve ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > (
        ::prj::srl::transitionCurve (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > (
        ::prj::srl::transitionCurve (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > (
        ::prj::srl::transitionCurve (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::transitionCurve (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::transitionCurve (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::transitionCurve (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::transitionCurve (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::transitionCurve (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::transitionCurve (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > (
        ::prj::srl::transitionCurve (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > (
        ::prj::srl::transitionCurve (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > (
        ::prj::srl::transitionCurve (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > (
          ::prj::srl::transitionCurve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "transitionCurve" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureTransitionCurve, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "transitionCurve",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve >
    transitionCurve (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "transitionCurve" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureTransitionCurve > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureTransitionCurve, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "transitionCurve",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const FeatureTransitionCurve& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // picks
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "picks",
            e));

        s << i.picks ();
      }

      // pick0Direction
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pick0Direction",
            e));

        s << i.pick0Direction ();
      }

      // pick1Direction
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pick1Direction",
            e));

        s << i.pick1Direction ();
      }

      // pick0Magnitude
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pick0Magnitude",
            e));

        s << i.pick0Magnitude ();
      }

      // pick1Magnitude
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pick1Magnitude",
            e));

        s << i.pick1Magnitude ();
      }

      // directionLabel0
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "directionLabel0",
            e));

        s << i.directionLabel0 ();
      }

      // directionLabel1
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "directionLabel1",
            e));

        s << i.directionLabel1 ();
      }

      // magnitudeLabel0
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "magnitudeLabel0",
            e));

        s << i.magnitudeLabel0 ();
      }

      // magnitudeLabel1
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "magnitudeLabel1",
            e));

        s << i.magnitudeLabel1 ();
      }

      // curveId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "curveId",
            e));

        s << i.curveId ();
      }
    }

    void
    transitionCurve (::std::ostream& o,
                     const ::prj::srl::FeatureTransitionCurve& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::transitionCurve (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    transitionCurve (::std::ostream& o,
                     const ::prj::srl::FeatureTransitionCurve& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::transitionCurve (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    transitionCurve (::std::ostream& o,
                     const ::prj::srl::FeatureTransitionCurve& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::transitionCurve (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    transitionCurve (::xercesc::XMLFormatTarget& t,
                     const ::prj::srl::FeatureTransitionCurve& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::transitionCurve (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    transitionCurve (::xercesc::XMLFormatTarget& t,
                     const ::prj::srl::FeatureTransitionCurve& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::transitionCurve (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    transitionCurve (::xercesc::XMLFormatTarget& t,
                     const ::prj::srl::FeatureTransitionCurve& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::transitionCurve (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    transitionCurve (::xercesc::DOMDocument& d,
                     const ::prj::srl::FeatureTransitionCurve& s,
                     ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "transitionCurve" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "transitionCurve",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    transitionCurve (const ::prj::srl::FeatureTransitionCurve& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "transitionCurve",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::transitionCurve (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

