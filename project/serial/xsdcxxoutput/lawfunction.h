// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from lawfunction.xsd.
 */

#ifndef PRJ_SRL_LAWFUNCTION_H
#define PRJ_SRL_LAWFUNCTION_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace lwf
    {
      class Parameters;
      class Data;
      class Datas;
      class Cue;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "featurebase.h"

namespace prj
{
  namespace srl
  {
    /**
     * @brief C++ namespace for the %http://www.cadseer.com/prj/srl/lwf
     * schema namespace.
     */
    namespace lwf
    {
      /**
       * @brief Class corresponding to the %Parameters schema type.
       *
       * @nosubgrouping
       */
      class Parameters: public ::xml_schema::Type
      {
        public:
        /**
         * @name array
         *
         * @brief Accessor and modifier functions for the %array
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::Parameter ArrayType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

        /**
         * @brief Element iterator type.
         */
        typedef ArraySequence::iterator ArrayIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ArraySequence::const_iterator ArrayConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ArraySequence&
        array () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ArraySequence&
        array ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        array (const ArraySequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Parameters ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Parameters (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Parameters (const Parameters& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Parameters*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Parameters&
        operator= (const Parameters& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Parameters ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ArraySequence array_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Data schema type.
       *
       * @nosubgrouping
       */
      class Data: public ::xml_schema::Type
      {
        public:
        /**
         * @name subType
         *
         * @brief Accessor and modifier functions for the %subType
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Int SubTypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SubTypeType, char > SubTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SubTypeType&
        subType () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SubTypeType&
        subType ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        subType (const SubTypeType& x);

        //@}

        /**
         * @name internalParameters
         *
         * @brief Accessor and modifier functions for the %internalParameters
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::lwf::Parameters InternalParametersType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InternalParametersType, char > InternalParametersTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InternalParametersType&
        internalParameters () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InternalParametersType&
        internalParameters ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        internalParameters (const InternalParametersType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        internalParameters (::std::unique_ptr< InternalParametersType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Data (const SubTypeType&,
              const InternalParametersType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (::std::unique_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        Data (const SubTypeType&,
              ::std::unique_ptr< InternalParametersType >);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Data (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Data (const Data& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Data*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Data&
        operator= (const Data& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Data ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< SubTypeType > subType_;
        ::xsd::cxx::tree::one< InternalParametersType > internalParameters_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Datas schema type.
       *
       * @nosubgrouping
       */
      class Datas: public ::xml_schema::Type
      {
        public:
        /**
         * @name array
         *
         * @brief Accessor and modifier functions for the %array
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::lwf::Data ArrayType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

        /**
         * @brief Element iterator type.
         */
        typedef ArraySequence::iterator ArrayIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ArraySequence::const_iterator ArrayConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ArraySequence&
        array () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ArraySequence&
        array ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        array (const ArraySequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Datas ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Datas (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Datas (const Datas& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Datas*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Datas&
        operator= (const Datas& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Datas ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ArraySequence array_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Cue schema type.
       *
       * @nosubgrouping
       */
      class Cue: public ::xml_schema::Type
      {
        public:
        /**
         * @name type
         *
         * @brief Accessor and modifier functions for the %type
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Int TypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TypeType&
        type () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TypeType&
        type ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        type (const TypeType& x);

        //@}

        /**
         * @name boundaries
         *
         * @brief Accessor and modifier functions for the %boundaries
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::lwf::Parameters BoundariesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BoundariesType, char > BoundariesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BoundariesType&
        boundaries () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BoundariesType&
        boundaries ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        boundaries (const BoundariesType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        boundaries (::std::unique_ptr< BoundariesType > p);

        //@}

        /**
         * @name datas
         *
         * @brief Accessor and modifier functions for the %datas
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::lwf::Datas DatasType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DatasType, char > DatasTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DatasType&
        datas () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DatasType&
        datas ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        datas (const DatasType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        datas (::std::unique_ptr< DatasType > p);

        //@}

        /**
         * @name periodic
         *
         * @brief Accessor and modifier functions for the %periodic
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean PeriodicType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PeriodicType, char > PeriodicTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PeriodicType&
        periodic () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PeriodicType&
        periodic ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        periodic (const PeriodicType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Cue (const TypeType&,
             const BoundariesType&,
             const DatasType&,
             const PeriodicType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (::std::unique_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        Cue (const TypeType&,
             ::std::unique_ptr< BoundariesType >,
             ::std::unique_ptr< DatasType >,
             const PeriodicType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Cue (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Cue (const Cue& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Cue*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Cue&
        operator= (const Cue& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Cue ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< TypeType > type_;
        ::xsd::cxx::tree::one< BoundariesType > boundaries_;
        ::xsd::cxx::tree::one< DatasType > datas_;
        ::xsd::cxx::tree::one< PeriodicType > periodic_;

        //@endcond
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace lwf
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace lwf
    {
      void
      operator<< (::xercesc::DOMElement&, const Parameters&);

      void
      operator<< (::xercesc::DOMElement&, const Data&);

      void
      operator<< (::xercesc::DOMElement&, const Datas&);

      void
      operator<< (::xercesc::DOMElement&, const Cue&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_LAWFUNCTION_H
