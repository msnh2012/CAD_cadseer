// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featureimageplane.h"

namespace prj
{
  namespace srl
  {
    // FeatureImagePlane
    // 

    const FeatureImagePlane::FeatureBaseType& FeatureImagePlane::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureImagePlane::FeatureBaseType& FeatureImagePlane::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureImagePlane::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureImagePlane::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureImagePlane::ScaleType& FeatureImagePlane::
    scale () const
    {
      return this->scale_.get ();
    }

    FeatureImagePlane::ScaleType& FeatureImagePlane::
    scale ()
    {
      return this->scale_.get ();
    }

    void FeatureImagePlane::
    scale (const ScaleType& x)
    {
      this->scale_.set (x);
    }

    void FeatureImagePlane::
    scale (::std::unique_ptr< ScaleType > x)
    {
      this->scale_.set (std::move (x));
    }

    const FeatureImagePlane::CsysType& FeatureImagePlane::
    csys () const
    {
      return this->csys_.get ();
    }

    FeatureImagePlane::CsysType& FeatureImagePlane::
    csys ()
    {
      return this->csys_.get ();
    }

    void FeatureImagePlane::
    csys (const CsysType& x)
    {
      this->csys_.set (x);
    }

    void FeatureImagePlane::
    csys (::std::unique_ptr< CsysType > x)
    {
      this->csys_.set (std::move (x));
    }

    const FeatureImagePlane::CsysDraggerType& FeatureImagePlane::
    csysDragger () const
    {
      return this->csysDragger_.get ();
    }

    FeatureImagePlane::CsysDraggerType& FeatureImagePlane::
    csysDragger ()
    {
      return this->csysDragger_.get ();
    }

    void FeatureImagePlane::
    csysDragger (const CsysDraggerType& x)
    {
      this->csysDragger_.set (x);
    }

    void FeatureImagePlane::
    csysDragger (::std::unique_ptr< CsysDraggerType > x)
    {
      this->csysDragger_.set (std::move (x));
    }

    const FeatureImagePlane::ScaleLabelType& FeatureImagePlane::
    scaleLabel () const
    {
      return this->scaleLabel_.get ();
    }

    FeatureImagePlane::ScaleLabelType& FeatureImagePlane::
    scaleLabel ()
    {
      return this->scaleLabel_.get ();
    }

    void FeatureImagePlane::
    scaleLabel (const ScaleLabelType& x)
    {
      this->scaleLabel_.set (x);
    }

    void FeatureImagePlane::
    scaleLabel (::std::unique_ptr< ScaleLabelType > x)
    {
      this->scaleLabel_.set (std::move (x));
    }

    const FeatureImagePlane::CornerVecType& FeatureImagePlane::
    cornerVec () const
    {
      return this->cornerVec_.get ();
    }

    FeatureImagePlane::CornerVecType& FeatureImagePlane::
    cornerVec ()
    {
      return this->cornerVec_.get ();
    }

    void FeatureImagePlane::
    cornerVec (const CornerVecType& x)
    {
      this->cornerVec_.set (x);
    }

    void FeatureImagePlane::
    cornerVec (::std::unique_ptr< CornerVecType > x)
    {
      this->cornerVec_.set (std::move (x));
    }

    const FeatureImagePlane::GeometryType& FeatureImagePlane::
    geometry () const
    {
      return this->geometry_.get ();
    }

    FeatureImagePlane::GeometryType& FeatureImagePlane::
    geometry ()
    {
      return this->geometry_.get ();
    }

    void FeatureImagePlane::
    geometry (const GeometryType& x)
    {
      this->geometry_.set (x);
    }

    void FeatureImagePlane::
    geometry (::std::unique_ptr< GeometryType > x)
    {
      this->geometry_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // FeatureImagePlane
    //

    FeatureImagePlane::
    FeatureImagePlane (const FeatureBaseType& featureBase,
                       const ScaleType& scale,
                       const CsysType& csys,
                       const CsysDraggerType& csysDragger,
                       const ScaleLabelType& scaleLabel,
                       const CornerVecType& cornerVec,
                       const GeometryType& geometry)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      scale_ (scale, this),
      csys_ (csys, this),
      csysDragger_ (csysDragger, this),
      scaleLabel_ (scaleLabel, this),
      cornerVec_ (cornerVec, this),
      geometry_ (geometry, this)
    {
    }

    FeatureImagePlane::
    FeatureImagePlane (::std::unique_ptr< FeatureBaseType > featureBase,
                       ::std::unique_ptr< ScaleType > scale,
                       ::std::unique_ptr< CsysType > csys,
                       ::std::unique_ptr< CsysDraggerType > csysDragger,
                       ::std::unique_ptr< ScaleLabelType > scaleLabel,
                       ::std::unique_ptr< CornerVecType > cornerVec,
                       const GeometryType& geometry)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      scale_ (std::move (scale), this),
      csys_ (std::move (csys), this),
      csysDragger_ (std::move (csysDragger), this),
      scaleLabel_ (std::move (scaleLabel), this),
      cornerVec_ (std::move (cornerVec), this),
      geometry_ (geometry, this)
    {
    }

    FeatureImagePlane::
    FeatureImagePlane (const FeatureImagePlane& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      scale_ (x.scale_, f, this),
      csys_ (x.csys_, f, this),
      csysDragger_ (x.csysDragger_, f, this),
      scaleLabel_ (x.scaleLabel_, f, this),
      cornerVec_ (x.cornerVec_, f, this),
      geometry_ (x.geometry_, f, this)
    {
    }

    FeatureImagePlane::
    FeatureImagePlane (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      scale_ (this),
      csys_ (this),
      csysDragger_ (this),
      scaleLabel_ (this),
      cornerVec_ (this),
      geometry_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureImagePlane::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // scale
        //
        if (n.name () == "scale" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ScaleType > r (
            ScaleTraits::create (i, f, this));

          if (!scale_.present ())
          {
            this->scale_.set (::std::move (r));
            continue;
          }
        }

        // csys
        //
        if (n.name () == "csys" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CsysType > r (
            CsysTraits::create (i, f, this));

          if (!csys_.present ())
          {
            this->csys_.set (::std::move (r));
            continue;
          }
        }

        // csysDragger
        //
        if (n.name () == "csysDragger" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CsysDraggerType > r (
            CsysDraggerTraits::create (i, f, this));

          if (!csysDragger_.present ())
          {
            this->csysDragger_.set (::std::move (r));
            continue;
          }
        }

        // scaleLabel
        //
        if (n.name () == "scaleLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ScaleLabelType > r (
            ScaleLabelTraits::create (i, f, this));

          if (!scaleLabel_.present ())
          {
            this->scaleLabel_.set (::std::move (r));
            continue;
          }
        }

        // cornerVec
        //
        if (n.name () == "cornerVec" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CornerVecType > r (
            CornerVecTraits::create (i, f, this));

          if (!cornerVec_.present ())
          {
            this->cornerVec_.set (::std::move (r));
            continue;
          }
        }

        // geometry
        //
        if (n.name () == "geometry" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< GeometryType > r (
            GeometryTraits::create (i, f, this));

          if (!geometry_.present ())
          {
            this->geometry_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!scale_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "scale",
          "");
      }

      if (!csys_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "csys",
          "");
      }

      if (!csysDragger_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "csysDragger",
          "");
      }

      if (!scaleLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "scaleLabel",
          "");
      }

      if (!cornerVec_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "cornerVec",
          "");
      }

      if (!geometry_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "geometry",
          "");
      }
    }

    FeatureImagePlane* FeatureImagePlane::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureImagePlane (*this, f, c);
    }

    FeatureImagePlane& FeatureImagePlane::
    operator= (const FeatureImagePlane& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->scale_ = x.scale_;
        this->csys_ = x.csys_;
        this->csysDragger_ = x.csysDragger_;
        this->scaleLabel_ = x.scaleLabel_;
        this->cornerVec_ = x.cornerVec_;
        this->geometry_ = x.geometry_;
      }

      return *this;
    }

    FeatureImagePlane::
    ~FeatureImagePlane ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (const ::std::string& u,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureImagePlane > (
        ::prj::srl::imageplane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (const ::std::string& u,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureImagePlane > (
        ::prj::srl::imageplane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureImagePlane > (
        ::prj::srl::imageplane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::std::istream& is,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::imageplane (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::std::istream& is,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::imageplane (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::imageplane (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::imageplane (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::imageplane (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::imageplane (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::xercesc::InputSource& i,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureImagePlane > (
        ::prj::srl::imageplane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::xercesc::InputSource& i,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureImagePlane > (
        ::prj::srl::imageplane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureImagePlane > (
        ::prj::srl::imageplane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (const ::xercesc::DOMDocument& doc,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureImagePlane > (
          ::prj::srl::imageplane (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "imageplane" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureImagePlane > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureImagePlane, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "imageplane",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureImagePlane >
    imageplane (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "imageplane" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureImagePlane > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureImagePlane, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "imageplane",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const FeatureImagePlane& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // scale
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "scale",
            e));

        s << i.scale ();
      }

      // csys
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "csys",
            e));

        s << i.csys ();
      }

      // csysDragger
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "csysDragger",
            e));

        s << i.csysDragger ();
      }

      // scaleLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "scaleLabel",
            e));

        s << i.scaleLabel ();
      }

      // cornerVec
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "cornerVec",
            e));

        s << i.cornerVec ();
      }

      // geometry
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "geometry",
            e));

        s << i.geometry ();
      }
    }

    void
    imageplane (::std::ostream& o,
                const ::prj::srl::FeatureImagePlane& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::imageplane (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    imageplane (::std::ostream& o,
                const ::prj::srl::FeatureImagePlane& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::imageplane (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    imageplane (::std::ostream& o,
                const ::prj::srl::FeatureImagePlane& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::imageplane (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    imageplane (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::FeatureImagePlane& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::imageplane (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    imageplane (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::FeatureImagePlane& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::imageplane (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    imageplane (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::FeatureImagePlane& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::imageplane (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    imageplane (::xercesc::DOMDocument& d,
                const ::prj::srl::FeatureImagePlane& s,
                ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "imageplane" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "imageplane",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    imageplane (const ::prj::srl::FeatureImagePlane& s,
                const ::xml_schema::NamespaceInfomap& m,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "imageplane",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::imageplane (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

