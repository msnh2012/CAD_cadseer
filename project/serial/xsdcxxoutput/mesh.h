// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from mesh.xsd.
 */

#ifndef PRJ_SRL_MESH_H
#define PRJ_SRL_MESH_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace msh
    {
      class ParametersOCCT;
      class ParametersNetgen;
      class ParametersGMSHOption;
      class ParametersGMSHOptions;
      class ParametersGMSH;
      class Point;
      class Points;
      class Indexes;
      class Face;
      class Faces;
      class Surface;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace prj
{
  namespace srl
  {
    /**
     * @brief C++ namespace for the %http://www.cadseer.com/prj/srl/msh
     * schema namespace.
     */
    namespace msh
    {
      /**
       * @brief Class corresponding to the %ParametersOCCT schema type.
       *
       * @nosubgrouping
       */
      class ParametersOCCT: public ::xml_schema::Type
      {
        public:
        /**
         * @name linearDeflection
         *
         * @brief Accessor and modifier functions for the %linearDeflection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double LinearDeflectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LinearDeflectionType, char, ::xsd::cxx::tree::schema_type::double_ > LinearDeflectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LinearDeflectionType&
        linearDeflection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LinearDeflectionType&
        linearDeflection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        linearDeflection (const LinearDeflectionType& x);

        //@}

        /**
         * @name angularDeflection
         *
         * @brief Accessor and modifier functions for the %angularDeflection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double AngularDeflectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AngularDeflectionType, char, ::xsd::cxx::tree::schema_type::double_ > AngularDeflectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AngularDeflectionType&
        angularDeflection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AngularDeflectionType&
        angularDeflection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        angularDeflection (const AngularDeflectionType& x);

        //@}

        /**
         * @name relative
         *
         * @brief Accessor and modifier functions for the %relative
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean RelativeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RelativeType, char > RelativeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RelativeType&
        relative () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RelativeType&
        relative ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        relative (const RelativeType& x);

        //@}

        /**
         * @name minArea
         *
         * @brief Accessor and modifier functions for the %minArea
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double MinAreaType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinAreaType, char, ::xsd::cxx::tree::schema_type::double_ > MinAreaTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinAreaType&
        minArea () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinAreaType&
        minArea ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        minArea (const MinAreaType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ParametersOCCT (const LinearDeflectionType&,
                        const AngularDeflectionType&,
                        const RelativeType&,
                        const MinAreaType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ParametersOCCT (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersOCCT (const ParametersOCCT& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ParametersOCCT*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersOCCT&
        operator= (const ParametersOCCT& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ParametersOCCT ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< LinearDeflectionType > linearDeflection_;
        ::xsd::cxx::tree::one< AngularDeflectionType > angularDeflection_;
        ::xsd::cxx::tree::one< RelativeType > relative_;
        ::xsd::cxx::tree::one< MinAreaType > minArea_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ParametersNetgen schema type.
       *
       * @nosubgrouping
       */
      class ParametersNetgen: public ::xml_schema::Type
      {
        public:
        /**
         * @name useLocalH
         *
         * @brief Accessor and modifier functions for the %useLocalH
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean UseLocalHType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseLocalHType, char > UseLocalHTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseLocalHType&
        useLocalH () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseLocalHType&
        useLocalH ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        useLocalH (const UseLocalHType& x);

        //@}

        /**
         * @name maxH
         *
         * @brief Accessor and modifier functions for the %maxH
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double MaxHType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxHType, char, ::xsd::cxx::tree::schema_type::double_ > MaxHTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxHType&
        maxH () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxHType&
        maxH ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        maxH (const MaxHType& x);

        //@}

        /**
         * @name minH
         *
         * @brief Accessor and modifier functions for the %minH
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double MinHType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinHType, char, ::xsd::cxx::tree::schema_type::double_ > MinHTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinHType&
        minH () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinHType&
        minH ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        minH (const MinHType& x);

        //@}

        /**
         * @name fineness
         *
         * @brief Accessor and modifier functions for the %fineness
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double FinenessType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FinenessType, char, ::xsd::cxx::tree::schema_type::double_ > FinenessTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FinenessType&
        fineness () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FinenessType&
        fineness ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        fineness (const FinenessType& x);

        //@}

        /**
         * @name grading
         *
         * @brief Accessor and modifier functions for the %grading
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double GradingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< GradingType, char, ::xsd::cxx::tree::schema_type::double_ > GradingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const GradingType&
        grading () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        GradingType&
        grading ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        grading (const GradingType& x);

        //@}

        /**
         * @name elementsPerEdge
         *
         * @brief Accessor and modifier functions for the %elementsPerEdge
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double ElementsPerEdgeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ElementsPerEdgeType, char, ::xsd::cxx::tree::schema_type::double_ > ElementsPerEdgeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ElementsPerEdgeType&
        elementsPerEdge () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ElementsPerEdgeType&
        elementsPerEdge ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        elementsPerEdge (const ElementsPerEdgeType& x);

        //@}

        /**
         * @name elementsPerCurve
         *
         * @brief Accessor and modifier functions for the %elementsPerCurve
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double ElementsPerCurveType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ElementsPerCurveType, char, ::xsd::cxx::tree::schema_type::double_ > ElementsPerCurveTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ElementsPerCurveType&
        elementsPerCurve () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ElementsPerCurveType&
        elementsPerCurve ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        elementsPerCurve (const ElementsPerCurveType& x);

        //@}

        /**
         * @name closeEdgeEnable
         *
         * @brief Accessor and modifier functions for the %closeEdgeEnable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double CloseEdgeEnableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseEdgeEnableType, char, ::xsd::cxx::tree::schema_type::double_ > CloseEdgeEnableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseEdgeEnableType&
        closeEdgeEnable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseEdgeEnableType&
        closeEdgeEnable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        closeEdgeEnable (const CloseEdgeEnableType& x);

        //@}

        /**
         * @name closeEdgeFactor
         *
         * @brief Accessor and modifier functions for the %closeEdgeFactor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double CloseEdgeFactorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseEdgeFactorType, char, ::xsd::cxx::tree::schema_type::double_ > CloseEdgeFactorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseEdgeFactorType&
        closeEdgeFactor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseEdgeFactorType&
        closeEdgeFactor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        closeEdgeFactor (const CloseEdgeFactorType& x);

        //@}

        /**
         * @name minEdgeLenEnable
         *
         * @brief Accessor and modifier functions for the %minEdgeLenEnable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean MinEdgeLenEnableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinEdgeLenEnableType, char > MinEdgeLenEnableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinEdgeLenEnableType&
        minEdgeLenEnable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinEdgeLenEnableType&
        minEdgeLenEnable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        minEdgeLenEnable (const MinEdgeLenEnableType& x);

        //@}

        /**
         * @name minEdgeLen
         *
         * @brief Accessor and modifier functions for the %minEdgeLen
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double MinEdgeLenType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinEdgeLenType, char, ::xsd::cxx::tree::schema_type::double_ > MinEdgeLenTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinEdgeLenType&
        minEdgeLen () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinEdgeLenType&
        minEdgeLen ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        minEdgeLen (const MinEdgeLenType& x);

        //@}

        /**
         * @name secondOrder
         *
         * @brief Accessor and modifier functions for the %secondOrder
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean SecondOrderType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SecondOrderType, char > SecondOrderTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SecondOrderType&
        secondOrder () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SecondOrderType&
        secondOrder ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        secondOrder (const SecondOrderType& x);

        //@}

        /**
         * @name quadDominated
         *
         * @brief Accessor and modifier functions for the %quadDominated
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean QuadDominatedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuadDominatedType, char > QuadDominatedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuadDominatedType&
        quadDominated () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuadDominatedType&
        quadDominated ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        quadDominated (const QuadDominatedType& x);

        //@}

        /**
         * @name optSurfMeshEnable
         *
         * @brief Accessor and modifier functions for the %optSurfMeshEnable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean OptSurfMeshEnableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptSurfMeshEnableType, char > OptSurfMeshEnableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OptSurfMeshEnableType&
        optSurfMeshEnable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OptSurfMeshEnableType&
        optSurfMeshEnable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        optSurfMeshEnable (const OptSurfMeshEnableType& x);

        //@}

        /**
         * @name optVolMeshEnable
         *
         * @brief Accessor and modifier functions for the %optVolMeshEnable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean OptVolMeshEnableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptVolMeshEnableType, char > OptVolMeshEnableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OptVolMeshEnableType&
        optVolMeshEnable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OptVolMeshEnableType&
        optVolMeshEnable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        optVolMeshEnable (const OptVolMeshEnableType& x);

        //@}

        /**
         * @name optSteps2d
         *
         * @brief Accessor and modifier functions for the %optSteps2d
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Int OptSteps2dType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptSteps2dType, char > OptSteps2dTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OptSteps2dType&
        optSteps2d () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OptSteps2dType&
        optSteps2d ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        optSteps2d (const OptSteps2dType& x);

        //@}

        /**
         * @name optSteps3d
         *
         * @brief Accessor and modifier functions for the %optSteps3d
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Int OptSteps3dType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptSteps3dType, char > OptSteps3dTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OptSteps3dType&
        optSteps3d () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OptSteps3dType&
        optSteps3d ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        optSteps3d (const OptSteps3dType& x);

        //@}

        /**
         * @name invertTets
         *
         * @brief Accessor and modifier functions for the %invertTets
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean InvertTetsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InvertTetsType, char > InvertTetsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InvertTetsType&
        invertTets () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InvertTetsType&
        invertTets ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        invertTets (const InvertTetsType& x);

        //@}

        /**
         * @name invertTrigs
         *
         * @brief Accessor and modifier functions for the %invertTrigs
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean InvertTrigsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InvertTrigsType, char > InvertTrigsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InvertTrigsType&
        invertTrigs () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InvertTrigsType&
        invertTrigs ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        invertTrigs (const InvertTrigsType& x);

        //@}

        /**
         * @name checkOverlap
         *
         * @brief Accessor and modifier functions for the %checkOverlap
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean CheckOverlapType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CheckOverlapType, char > CheckOverlapTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CheckOverlapType&
        checkOverlap () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CheckOverlapType&
        checkOverlap ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        checkOverlap (const CheckOverlapType& x);

        //@}

        /**
         * @name checkOverlappingBoundary
         *
         * @brief Accessor and modifier functions for the %checkOverlappingBoundary
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean CheckOverlappingBoundaryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CheckOverlappingBoundaryType, char > CheckOverlappingBoundaryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CheckOverlappingBoundaryType&
        checkOverlappingBoundary () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CheckOverlappingBoundaryType&
        checkOverlappingBoundary ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        checkOverlappingBoundary (const CheckOverlappingBoundaryType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ParametersNetgen (const UseLocalHType&,
                          const MaxHType&,
                          const MinHType&,
                          const FinenessType&,
                          const GradingType&,
                          const ElementsPerEdgeType&,
                          const ElementsPerCurveType&,
                          const CloseEdgeEnableType&,
                          const CloseEdgeFactorType&,
                          const MinEdgeLenEnableType&,
                          const MinEdgeLenType&,
                          const SecondOrderType&,
                          const QuadDominatedType&,
                          const OptSurfMeshEnableType&,
                          const OptVolMeshEnableType&,
                          const OptSteps2dType&,
                          const OptSteps3dType&,
                          const InvertTetsType&,
                          const InvertTrigsType&,
                          const CheckOverlapType&,
                          const CheckOverlappingBoundaryType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ParametersNetgen (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersNetgen (const ParametersNetgen& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ParametersNetgen*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersNetgen&
        operator= (const ParametersNetgen& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ParametersNetgen ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< UseLocalHType > useLocalH_;
        ::xsd::cxx::tree::one< MaxHType > maxH_;
        ::xsd::cxx::tree::one< MinHType > minH_;
        ::xsd::cxx::tree::one< FinenessType > fineness_;
        ::xsd::cxx::tree::one< GradingType > grading_;
        ::xsd::cxx::tree::one< ElementsPerEdgeType > elementsPerEdge_;
        ::xsd::cxx::tree::one< ElementsPerCurveType > elementsPerCurve_;
        ::xsd::cxx::tree::one< CloseEdgeEnableType > closeEdgeEnable_;
        ::xsd::cxx::tree::one< CloseEdgeFactorType > closeEdgeFactor_;
        ::xsd::cxx::tree::one< MinEdgeLenEnableType > minEdgeLenEnable_;
        ::xsd::cxx::tree::one< MinEdgeLenType > minEdgeLen_;
        ::xsd::cxx::tree::one< SecondOrderType > secondOrder_;
        ::xsd::cxx::tree::one< QuadDominatedType > quadDominated_;
        ::xsd::cxx::tree::one< OptSurfMeshEnableType > optSurfMeshEnable_;
        ::xsd::cxx::tree::one< OptVolMeshEnableType > optVolMeshEnable_;
        ::xsd::cxx::tree::one< OptSteps2dType > optSteps2d_;
        ::xsd::cxx::tree::one< OptSteps3dType > optSteps3d_;
        ::xsd::cxx::tree::one< InvertTetsType > invertTets_;
        ::xsd::cxx::tree::one< InvertTrigsType > invertTrigs_;
        ::xsd::cxx::tree::one< CheckOverlapType > checkOverlap_;
        ::xsd::cxx::tree::one< CheckOverlappingBoundaryType > checkOverlappingBoundary_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ParametersGMSHOption schema type.
       *
       * @nosubgrouping
       */
      class ParametersGMSHOption: public ::xml_schema::Type
      {
        public:
        /**
         * @name key
         *
         * @brief Accessor and modifier functions for the %key
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::String KeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< KeyType, char > KeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const KeyType&
        key () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        KeyType&
        key ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        key (const KeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        key (::std::unique_ptr< KeyType > p);

        //@}

        /**
         * @name value
         *
         * @brief Accessor and modifier functions for the %value
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double ValueType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ValueType&
        value () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ValueType&
        value ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        value (const ValueType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ParametersGMSHOption (const KeyType&,
                              const ValueType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ParametersGMSHOption (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersGMSHOption (const ParametersGMSHOption& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ParametersGMSHOption*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersGMSHOption&
        operator= (const ParametersGMSHOption& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ParametersGMSHOption ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< KeyType > key_;
        ::xsd::cxx::tree::one< ValueType > value_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ParametersGMSHOptions schema type.
       *
       * @nosubgrouping
       */
      class ParametersGMSHOptions: public ::xml_schema::Type
      {
        public:
        /**
         * @name array
         *
         * @brief Accessor and modifier functions for the %array
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::msh::ParametersGMSHOption ArrayType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

        /**
         * @brief Element iterator type.
         */
        typedef ArraySequence::iterator ArrayIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ArraySequence::const_iterator ArrayConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ArraySequence&
        array () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ArraySequence&
        array ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        array (const ArraySequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ParametersGMSHOptions ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ParametersGMSHOptions (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersGMSHOptions (const ParametersGMSHOptions& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ParametersGMSHOptions*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersGMSHOptions&
        operator= (const ParametersGMSHOptions& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ParametersGMSHOptions ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ArraySequence array_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ParametersGMSH schema type.
       *
       * @nosubgrouping
       */
      class ParametersGMSH: public ::xml_schema::Type
      {
        public:
        /**
         * @name options
         *
         * @brief Accessor and modifier functions for the %options
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::msh::ParametersGMSHOptions OptionsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptionsType, char > OptionsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OptionsType&
        options () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OptionsType&
        options ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        options (const OptionsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        options (::std::unique_ptr< OptionsType > p);

        //@}

        /**
         * @name refine
         *
         * @brief Accessor and modifier functions for the %refine
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Boolean RefineType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RefineType, char > RefineTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RefineType&
        refine () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RefineType&
        refine ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        refine (const RefineType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ParametersGMSH (const OptionsType&,
                        const RefineType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (::std::unique_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ParametersGMSH (::std::unique_ptr< OptionsType >,
                        const RefineType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ParametersGMSH (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersGMSH (const ParametersGMSH& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ParametersGMSH*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ParametersGMSH&
        operator= (const ParametersGMSH& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ParametersGMSH ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< OptionsType > options_;
        ::xsd::cxx::tree::one< RefineType > refine_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Point schema type.
       *
       * @nosubgrouping
       */
      class Point: public ::xml_schema::Type
      {
        public:
        /**
         * @name x
         *
         * @brief Accessor and modifier functions for the %x
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double XType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< XType, char, ::xsd::cxx::tree::schema_type::double_ > XTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const XType&
        x () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        XType&
        x ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        x (const XType& x);

        //@}

        /**
         * @name y
         *
         * @brief Accessor and modifier functions for the %y
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double YType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< YType, char, ::xsd::cxx::tree::schema_type::double_ > YTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const YType&
        y () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        YType&
        y ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        y (const YType& x);

        //@}

        /**
         * @name z
         *
         * @brief Accessor and modifier functions for the %z
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::Double ZType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ZType, char, ::xsd::cxx::tree::schema_type::double_ > ZTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ZType&
        z () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ZType&
        z ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        z (const ZType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Point (const XType&,
               const YType&,
               const ZType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Point (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Point (const Point& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Point*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Point&
        operator= (const Point& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Point ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< XType > x_;
        ::xsd::cxx::tree::one< YType > y_;
        ::xsd::cxx::tree::one< ZType > z_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Points schema type.
       *
       * @nosubgrouping
       */
      class Points: public ::xml_schema::Type
      {
        public:
        /**
         * @name array
         *
         * @brief Accessor and modifier functions for the %array
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::msh::Point ArrayType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

        /**
         * @brief Element iterator type.
         */
        typedef ArraySequence::iterator ArrayIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ArraySequence::const_iterator ArrayConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ArraySequence&
        array () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ArraySequence&
        array ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        array (const ArraySequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Points ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Points (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Points (const Points& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Points*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Points&
        operator= (const Points& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Points ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ArraySequence array_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Indexes schema type.
       *
       * @nosubgrouping
       */
      class Indexes: public ::xml_schema::Type
      {
        public:
        /**
         * @name array
         *
         * @brief Accessor and modifier functions for the %array
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::xml_schema::UnsignedLong ArrayType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

        /**
         * @brief Element iterator type.
         */
        typedef ArraySequence::iterator ArrayIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ArraySequence::const_iterator ArrayConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ArraySequence&
        array () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ArraySequence&
        array ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        array (const ArraySequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Indexes ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Indexes (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Indexes (const Indexes& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Indexes*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Indexes&
        operator= (const Indexes& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Indexes ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ArraySequence array_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Face schema type.
       *
       * @nosubgrouping
       */
      class Face: public ::xml_schema::Type
      {
        public:
        /**
         * @name indexes
         *
         * @brief Accessor and modifier functions for the %indexes
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::msh::Indexes IndexesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IndexesType, char > IndexesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IndexesType&
        indexes () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IndexesType&
        indexes ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        indexes (const IndexesType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        indexes (::std::unique_ptr< IndexesType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Face (const IndexesType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (::std::unique_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        Face (::std::unique_ptr< IndexesType >);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Face (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Face (const Face& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Face*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Face&
        operator= (const Face& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Face ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< IndexesType > indexes_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Faces schema type.
       *
       * @nosubgrouping
       */
      class Faces: public ::xml_schema::Type
      {
        public:
        /**
         * @name array
         *
         * @brief Accessor and modifier functions for the %array
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::msh::Face ArrayType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

        /**
         * @brief Element iterator type.
         */
        typedef ArraySequence::iterator ArrayIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ArraySequence::const_iterator ArrayConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ArraySequence&
        array () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ArraySequence&
        array ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        array (const ArraySequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Faces ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Faces (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Faces (const Faces& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Faces*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Faces&
        operator= (const Faces& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Faces ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ArraySequence array_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %Surface schema type.
       *
       * @nosubgrouping
       */
      class Surface: public ::xml_schema::Type
      {
        public:
        /**
         * @name points
         *
         * @brief Accessor and modifier functions for the %points
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::msh::Points PointsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PointsType, char > PointsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PointsType&
        points () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PointsType&
        points ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        points (const PointsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        points (::std::unique_ptr< PointsType > p);

        //@}

        /**
         * @name faces
         *
         * @brief Accessor and modifier functions for the %faces
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::prj::srl::msh::Faces FacesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FacesType, char > FacesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FacesType&
        faces () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FacesType&
        faces ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        faces (const FacesType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        faces (::std::unique_ptr< FacesType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Surface (const PointsType&,
                 const FacesType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (::std::unique_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        Surface (::std::unique_ptr< PointsType >,
                 ::std::unique_ptr< FacesType >);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Surface (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Surface (const Surface& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Surface*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Surface&
        operator= (const Surface& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~Surface ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< PointsType > points_;
        ::xsd::cxx::tree::one< FacesType > faces_;

        //@endcond
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace msh
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace msh
    {
      void
      operator<< (::xercesc::DOMElement&, const ParametersOCCT&);

      void
      operator<< (::xercesc::DOMElement&, const ParametersNetgen&);

      void
      operator<< (::xercesc::DOMElement&, const ParametersGMSHOption&);

      void
      operator<< (::xercesc::DOMElement&, const ParametersGMSHOptions&);

      void
      operator<< (::xercesc::DOMElement&, const ParametersGMSH&);

      void
      operator<< (::xercesc::DOMElement&, const Point&);

      void
      operator<< (::xercesc::DOMElement&, const Points&);

      void
      operator<< (::xercesc::DOMElement&, const Indexes&);

      void
      operator<< (::xercesc::DOMElement&, const Face&);

      void
      operator<< (::xercesc::DOMElement&, const Faces&);

      void
      operator<< (::xercesc::DOMElement&, const Surface&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_MESH_H
