// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "lawfunction.h"

namespace prj
{
  namespace srl
  {
    namespace lwf
    {
      // Parameters
      // 

      const Parameters::ArraySequence& Parameters::
      array () const
      {
        return this->array_;
      }

      Parameters::ArraySequence& Parameters::
      array ()
      {
        return this->array_;
      }

      void Parameters::
      array (const ArraySequence& s)
      {
        this->array_ = s;
      }


      // Data
      // 

      const Data::SubTypeType& Data::
      subType () const
      {
        return this->subType_.get ();
      }

      Data::SubTypeType& Data::
      subType ()
      {
        return this->subType_.get ();
      }

      void Data::
      subType (const SubTypeType& x)
      {
        this->subType_.set (x);
      }

      const Data::InternalParametersType& Data::
      internalParameters () const
      {
        return this->internalParameters_.get ();
      }

      Data::InternalParametersType& Data::
      internalParameters ()
      {
        return this->internalParameters_.get ();
      }

      void Data::
      internalParameters (const InternalParametersType& x)
      {
        this->internalParameters_.set (x);
      }

      void Data::
      internalParameters (::std::unique_ptr< InternalParametersType > x)
      {
        this->internalParameters_.set (std::move (x));
      }


      // Datas
      // 

      const Datas::ArraySequence& Datas::
      array () const
      {
        return this->array_;
      }

      Datas::ArraySequence& Datas::
      array ()
      {
        return this->array_;
      }

      void Datas::
      array (const ArraySequence& s)
      {
        this->array_ = s;
      }


      // Cue
      // 

      const Cue::TypeType& Cue::
      type () const
      {
        return this->type_.get ();
      }

      Cue::TypeType& Cue::
      type ()
      {
        return this->type_.get ();
      }

      void Cue::
      type (const TypeType& x)
      {
        this->type_.set (x);
      }

      const Cue::BoundariesType& Cue::
      boundaries () const
      {
        return this->boundaries_.get ();
      }

      Cue::BoundariesType& Cue::
      boundaries ()
      {
        return this->boundaries_.get ();
      }

      void Cue::
      boundaries (const BoundariesType& x)
      {
        this->boundaries_.set (x);
      }

      void Cue::
      boundaries (::std::unique_ptr< BoundariesType > x)
      {
        this->boundaries_.set (std::move (x));
      }

      const Cue::DatasType& Cue::
      datas () const
      {
        return this->datas_.get ();
      }

      Cue::DatasType& Cue::
      datas ()
      {
        return this->datas_.get ();
      }

      void Cue::
      datas (const DatasType& x)
      {
        this->datas_.set (x);
      }

      void Cue::
      datas (::std::unique_ptr< DatasType > x)
      {
        this->datas_.set (std::move (x));
      }

      const Cue::PeriodicType& Cue::
      periodic () const
      {
        return this->periodic_.get ();
      }

      Cue::PeriodicType& Cue::
      periodic ()
      {
        return this->periodic_.get ();
      }

      void Cue::
      periodic (const PeriodicType& x)
      {
        this->periodic_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace lwf
    {
      // Parameters
      //

      Parameters::
      Parameters ()
      : ::xml_schema::Type (),
        array_ (this)
      {
      }

      Parameters::
      Parameters (const Parameters& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        array_ (x.array_, f, this)
      {
      }

      Parameters::
      Parameters (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        array_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Parameters::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // array
          //
          if (n.name () == "array" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ArrayType > r (
              ArrayTraits::create (i, f, this));

            this->array_.push_back (::std::move (r));
            continue;
          }

          break;
        }
      }

      Parameters* Parameters::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Parameters (*this, f, c);
      }

      Parameters& Parameters::
      operator= (const Parameters& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->array_ = x.array_;
        }

        return *this;
      }

      Parameters::
      ~Parameters ()
      {
      }

      // Data
      //

      Data::
      Data (const SubTypeType& subType,
            const InternalParametersType& internalParameters)
      : ::xml_schema::Type (),
        subType_ (subType, this),
        internalParameters_ (internalParameters, this)
      {
      }

      Data::
      Data (const SubTypeType& subType,
            ::std::unique_ptr< InternalParametersType > internalParameters)
      : ::xml_schema::Type (),
        subType_ (subType, this),
        internalParameters_ (std::move (internalParameters), this)
      {
      }

      Data::
      Data (const Data& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        subType_ (x.subType_, f, this),
        internalParameters_ (x.internalParameters_, f, this)
      {
      }

      Data::
      Data (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        subType_ (this),
        internalParameters_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Data::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // subType
          //
          if (n.name () == "subType" && n.namespace_ ().empty ())
          {
            if (!subType_.present ())
            {
              this->subType_.set (SubTypeTraits::create (i, f, this));
              continue;
            }
          }

          // internalParameters
          //
          if (n.name () == "internalParameters" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< InternalParametersType > r (
              InternalParametersTraits::create (i, f, this));

            if (!internalParameters_.present ())
            {
              this->internalParameters_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!subType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "subType",
            "");
        }

        if (!internalParameters_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "internalParameters",
            "");
        }
      }

      Data* Data::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Data (*this, f, c);
      }

      Data& Data::
      operator= (const Data& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->subType_ = x.subType_;
          this->internalParameters_ = x.internalParameters_;
        }

        return *this;
      }

      Data::
      ~Data ()
      {
      }

      // Datas
      //

      Datas::
      Datas ()
      : ::xml_schema::Type (),
        array_ (this)
      {
      }

      Datas::
      Datas (const Datas& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        array_ (x.array_, f, this)
      {
      }

      Datas::
      Datas (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        array_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Datas::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // array
          //
          if (n.name () == "array" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ArrayType > r (
              ArrayTraits::create (i, f, this));

            this->array_.push_back (::std::move (r));
            continue;
          }

          break;
        }
      }

      Datas* Datas::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Datas (*this, f, c);
      }

      Datas& Datas::
      operator= (const Datas& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->array_ = x.array_;
        }

        return *this;
      }

      Datas::
      ~Datas ()
      {
      }

      // Cue
      //

      Cue::
      Cue (const TypeType& type,
           const BoundariesType& boundaries,
           const DatasType& datas,
           const PeriodicType& periodic)
      : ::xml_schema::Type (),
        type_ (type, this),
        boundaries_ (boundaries, this),
        datas_ (datas, this),
        periodic_ (periodic, this)
      {
      }

      Cue::
      Cue (const TypeType& type,
           ::std::unique_ptr< BoundariesType > boundaries,
           ::std::unique_ptr< DatasType > datas,
           const PeriodicType& periodic)
      : ::xml_schema::Type (),
        type_ (type, this),
        boundaries_ (std::move (boundaries), this),
        datas_ (std::move (datas), this),
        periodic_ (periodic, this)
      {
      }

      Cue::
      Cue (const Cue& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        type_ (x.type_, f, this),
        boundaries_ (x.boundaries_, f, this),
        datas_ (x.datas_, f, this),
        periodic_ (x.periodic_, f, this)
      {
      }

      Cue::
      Cue (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        type_ (this),
        boundaries_ (this),
        datas_ (this),
        periodic_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Cue::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // type
          //
          if (n.name () == "type" && n.namespace_ ().empty ())
          {
            if (!type_.present ())
            {
              this->type_.set (TypeTraits::create (i, f, this));
              continue;
            }
          }

          // boundaries
          //
          if (n.name () == "boundaries" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BoundariesType > r (
              BoundariesTraits::create (i, f, this));

            if (!boundaries_.present ())
            {
              this->boundaries_.set (::std::move (r));
              continue;
            }
          }

          // datas
          //
          if (n.name () == "datas" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DatasType > r (
              DatasTraits::create (i, f, this));

            if (!datas_.present ())
            {
              this->datas_.set (::std::move (r));
              continue;
            }
          }

          // periodic
          //
          if (n.name () == "periodic" && n.namespace_ ().empty ())
          {
            if (!periodic_.present ())
            {
              this->periodic_.set (PeriodicTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!type_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "type",
            "");
        }

        if (!boundaries_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "boundaries",
            "");
        }

        if (!datas_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "datas",
            "");
        }

        if (!periodic_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "periodic",
            "");
        }
      }

      Cue* Cue::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Cue (*this, f, c);
      }

      Cue& Cue::
      operator= (const Cue& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->type_ = x.type_;
          this->boundaries_ = x.boundaries_;
          this->datas_ = x.datas_;
          this->periodic_ = x.periodic_;
        }

        return *this;
      }

      Cue::
      ~Cue ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace lwf
    {
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace lwf
    {
      void
      operator<< (::xercesc::DOMElement& e, const Parameters& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // array
        //
        for (Parameters::ArrayConstIterator
             b (i.array ().begin ()), n (i.array ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "array",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const Data& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // subType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "subType",
              e));

          s << i.subType ();
        }

        // internalParameters
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "internalParameters",
              e));

          s << i.internalParameters ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const Datas& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // array
        //
        for (Datas::ArrayConstIterator
             b (i.array ().begin ()), n (i.array ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "array",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const Cue& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // type
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "type",
              e));

          s << i.type ();
        }

        // boundaries
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "boundaries",
              e));

          s << i.boundaries ();
        }

        // datas
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "datas",
              e));

          s << i.datas ();
        }

        // periodic
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "periodic",
              e));

          s << i.periodic ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

