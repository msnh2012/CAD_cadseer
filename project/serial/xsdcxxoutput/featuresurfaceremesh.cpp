// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featuresurfaceremesh.h"

namespace prj
{
  namespace srl
  {
    // FeatureSurfaceReMesh
    // 

    const FeatureSurfaceReMesh::FeatureBaseType& FeatureSurfaceReMesh::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureSurfaceReMesh::FeatureBaseType& FeatureSurfaceReMesh::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureSurfaceReMesh::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureSurfaceReMesh::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::MeshType& FeatureSurfaceReMesh::
    mesh () const
    {
      return this->mesh_.get ();
    }

    FeatureSurfaceReMesh::MeshType& FeatureSurfaceReMesh::
    mesh ()
    {
      return this->mesh_.get ();
    }

    void FeatureSurfaceReMesh::
    mesh (const MeshType& x)
    {
      this->mesh_.set (x);
    }

    void FeatureSurfaceReMesh::
    mesh (::std::unique_ptr< MeshType > x)
    {
      this->mesh_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::ReMeshTypeType& FeatureSurfaceReMesh::
    reMeshType () const
    {
      return this->reMeshType_.get ();
    }

    FeatureSurfaceReMesh::ReMeshTypeType& FeatureSurfaceReMesh::
    reMeshType ()
    {
      return this->reMeshType_.get ();
    }

    void FeatureSurfaceReMesh::
    reMeshType (const ReMeshTypeType& x)
    {
      this->reMeshType_.set (x);
    }

    void FeatureSurfaceReMesh::
    reMeshType (::std::unique_ptr< ReMeshTypeType > x)
    {
      this->reMeshType_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::MinEdgeLengthType& FeatureSurfaceReMesh::
    minEdgeLength () const
    {
      return this->minEdgeLength_.get ();
    }

    FeatureSurfaceReMesh::MinEdgeLengthType& FeatureSurfaceReMesh::
    minEdgeLength ()
    {
      return this->minEdgeLength_.get ();
    }

    void FeatureSurfaceReMesh::
    minEdgeLength (const MinEdgeLengthType& x)
    {
      this->minEdgeLength_.set (x);
    }

    void FeatureSurfaceReMesh::
    minEdgeLength (::std::unique_ptr< MinEdgeLengthType > x)
    {
      this->minEdgeLength_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::MaxEdgeLengthType& FeatureSurfaceReMesh::
    maxEdgeLength () const
    {
      return this->maxEdgeLength_.get ();
    }

    FeatureSurfaceReMesh::MaxEdgeLengthType& FeatureSurfaceReMesh::
    maxEdgeLength ()
    {
      return this->maxEdgeLength_.get ();
    }

    void FeatureSurfaceReMesh::
    maxEdgeLength (const MaxEdgeLengthType& x)
    {
      this->maxEdgeLength_.set (x);
    }

    void FeatureSurfaceReMesh::
    maxEdgeLength (::std::unique_ptr< MaxEdgeLengthType > x)
    {
      this->maxEdgeLength_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::IterationsType& FeatureSurfaceReMesh::
    iterations () const
    {
      return this->iterations_.get ();
    }

    FeatureSurfaceReMesh::IterationsType& FeatureSurfaceReMesh::
    iterations ()
    {
      return this->iterations_.get ();
    }

    void FeatureSurfaceReMesh::
    iterations (const IterationsType& x)
    {
      this->iterations_.set (x);
    }

    void FeatureSurfaceReMesh::
    iterations (::std::unique_ptr< IterationsType > x)
    {
      this->iterations_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::ReMeshTypeLabelType& FeatureSurfaceReMesh::
    reMeshTypeLabel () const
    {
      return this->reMeshTypeLabel_.get ();
    }

    FeatureSurfaceReMesh::ReMeshTypeLabelType& FeatureSurfaceReMesh::
    reMeshTypeLabel ()
    {
      return this->reMeshTypeLabel_.get ();
    }

    void FeatureSurfaceReMesh::
    reMeshTypeLabel (const ReMeshTypeLabelType& x)
    {
      this->reMeshTypeLabel_.set (x);
    }

    void FeatureSurfaceReMesh::
    reMeshTypeLabel (::std::unique_ptr< ReMeshTypeLabelType > x)
    {
      this->reMeshTypeLabel_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::MinEdgeLengthLabelType& FeatureSurfaceReMesh::
    minEdgeLengthLabel () const
    {
      return this->minEdgeLengthLabel_.get ();
    }

    FeatureSurfaceReMesh::MinEdgeLengthLabelType& FeatureSurfaceReMesh::
    minEdgeLengthLabel ()
    {
      return this->minEdgeLengthLabel_.get ();
    }

    void FeatureSurfaceReMesh::
    minEdgeLengthLabel (const MinEdgeLengthLabelType& x)
    {
      this->minEdgeLengthLabel_.set (x);
    }

    void FeatureSurfaceReMesh::
    minEdgeLengthLabel (::std::unique_ptr< MinEdgeLengthLabelType > x)
    {
      this->minEdgeLengthLabel_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::MaxEdgeLengthLabelType& FeatureSurfaceReMesh::
    maxEdgeLengthLabel () const
    {
      return this->maxEdgeLengthLabel_.get ();
    }

    FeatureSurfaceReMesh::MaxEdgeLengthLabelType& FeatureSurfaceReMesh::
    maxEdgeLengthLabel ()
    {
      return this->maxEdgeLengthLabel_.get ();
    }

    void FeatureSurfaceReMesh::
    maxEdgeLengthLabel (const MaxEdgeLengthLabelType& x)
    {
      this->maxEdgeLengthLabel_.set (x);
    }

    void FeatureSurfaceReMesh::
    maxEdgeLengthLabel (::std::unique_ptr< MaxEdgeLengthLabelType > x)
    {
      this->maxEdgeLengthLabel_.set (std::move (x));
    }

    const FeatureSurfaceReMesh::IterationsLabelType& FeatureSurfaceReMesh::
    iterationsLabel () const
    {
      return this->iterationsLabel_.get ();
    }

    FeatureSurfaceReMesh::IterationsLabelType& FeatureSurfaceReMesh::
    iterationsLabel ()
    {
      return this->iterationsLabel_.get ();
    }

    void FeatureSurfaceReMesh::
    iterationsLabel (const IterationsLabelType& x)
    {
      this->iterationsLabel_.set (x);
    }

    void FeatureSurfaceReMesh::
    iterationsLabel (::std::unique_ptr< IterationsLabelType > x)
    {
      this->iterationsLabel_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // FeatureSurfaceReMesh
    //

    FeatureSurfaceReMesh::
    FeatureSurfaceReMesh (const FeatureBaseType& featureBase,
                          const MeshType& mesh,
                          const ReMeshTypeType& reMeshType,
                          const MinEdgeLengthType& minEdgeLength,
                          const MaxEdgeLengthType& maxEdgeLength,
                          const IterationsType& iterations,
                          const ReMeshTypeLabelType& reMeshTypeLabel,
                          const MinEdgeLengthLabelType& minEdgeLengthLabel,
                          const MaxEdgeLengthLabelType& maxEdgeLengthLabel,
                          const IterationsLabelType& iterationsLabel)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      mesh_ (mesh, this),
      reMeshType_ (reMeshType, this),
      minEdgeLength_ (minEdgeLength, this),
      maxEdgeLength_ (maxEdgeLength, this),
      iterations_ (iterations, this),
      reMeshTypeLabel_ (reMeshTypeLabel, this),
      minEdgeLengthLabel_ (minEdgeLengthLabel, this),
      maxEdgeLengthLabel_ (maxEdgeLengthLabel, this),
      iterationsLabel_ (iterationsLabel, this)
    {
    }

    FeatureSurfaceReMesh::
    FeatureSurfaceReMesh (::std::unique_ptr< FeatureBaseType > featureBase,
                          ::std::unique_ptr< MeshType > mesh,
                          ::std::unique_ptr< ReMeshTypeType > reMeshType,
                          ::std::unique_ptr< MinEdgeLengthType > minEdgeLength,
                          ::std::unique_ptr< MaxEdgeLengthType > maxEdgeLength,
                          ::std::unique_ptr< IterationsType > iterations,
                          ::std::unique_ptr< ReMeshTypeLabelType > reMeshTypeLabel,
                          ::std::unique_ptr< MinEdgeLengthLabelType > minEdgeLengthLabel,
                          ::std::unique_ptr< MaxEdgeLengthLabelType > maxEdgeLengthLabel,
                          ::std::unique_ptr< IterationsLabelType > iterationsLabel)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      mesh_ (std::move (mesh), this),
      reMeshType_ (std::move (reMeshType), this),
      minEdgeLength_ (std::move (minEdgeLength), this),
      maxEdgeLength_ (std::move (maxEdgeLength), this),
      iterations_ (std::move (iterations), this),
      reMeshTypeLabel_ (std::move (reMeshTypeLabel), this),
      minEdgeLengthLabel_ (std::move (minEdgeLengthLabel), this),
      maxEdgeLengthLabel_ (std::move (maxEdgeLengthLabel), this),
      iterationsLabel_ (std::move (iterationsLabel), this)
    {
    }

    FeatureSurfaceReMesh::
    FeatureSurfaceReMesh (const FeatureSurfaceReMesh& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      mesh_ (x.mesh_, f, this),
      reMeshType_ (x.reMeshType_, f, this),
      minEdgeLength_ (x.minEdgeLength_, f, this),
      maxEdgeLength_ (x.maxEdgeLength_, f, this),
      iterations_ (x.iterations_, f, this),
      reMeshTypeLabel_ (x.reMeshTypeLabel_, f, this),
      minEdgeLengthLabel_ (x.minEdgeLengthLabel_, f, this),
      maxEdgeLengthLabel_ (x.maxEdgeLengthLabel_, f, this),
      iterationsLabel_ (x.iterationsLabel_, f, this)
    {
    }

    FeatureSurfaceReMesh::
    FeatureSurfaceReMesh (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      mesh_ (this),
      reMeshType_ (this),
      minEdgeLength_ (this),
      maxEdgeLength_ (this),
      iterations_ (this),
      reMeshTypeLabel_ (this),
      minEdgeLengthLabel_ (this),
      maxEdgeLengthLabel_ (this),
      iterationsLabel_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureSurfaceReMesh::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // mesh
        //
        if (n.name () == "mesh" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< MeshType > r (
            MeshTraits::create (i, f, this));

          if (!mesh_.present ())
          {
            this->mesh_.set (::std::move (r));
            continue;
          }
        }

        // reMeshType
        //
        if (n.name () == "reMeshType" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ReMeshTypeType > r (
            ReMeshTypeTraits::create (i, f, this));

          if (!reMeshType_.present ())
          {
            this->reMeshType_.set (::std::move (r));
            continue;
          }
        }

        // minEdgeLength
        //
        if (n.name () == "minEdgeLength" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< MinEdgeLengthType > r (
            MinEdgeLengthTraits::create (i, f, this));

          if (!minEdgeLength_.present ())
          {
            this->minEdgeLength_.set (::std::move (r));
            continue;
          }
        }

        // maxEdgeLength
        //
        if (n.name () == "maxEdgeLength" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< MaxEdgeLengthType > r (
            MaxEdgeLengthTraits::create (i, f, this));

          if (!maxEdgeLength_.present ())
          {
            this->maxEdgeLength_.set (::std::move (r));
            continue;
          }
        }

        // iterations
        //
        if (n.name () == "iterations" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IterationsType > r (
            IterationsTraits::create (i, f, this));

          if (!iterations_.present ())
          {
            this->iterations_.set (::std::move (r));
            continue;
          }
        }

        // reMeshTypeLabel
        //
        if (n.name () == "reMeshTypeLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ReMeshTypeLabelType > r (
            ReMeshTypeLabelTraits::create (i, f, this));

          if (!reMeshTypeLabel_.present ())
          {
            this->reMeshTypeLabel_.set (::std::move (r));
            continue;
          }
        }

        // minEdgeLengthLabel
        //
        if (n.name () == "minEdgeLengthLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< MinEdgeLengthLabelType > r (
            MinEdgeLengthLabelTraits::create (i, f, this));

          if (!minEdgeLengthLabel_.present ())
          {
            this->minEdgeLengthLabel_.set (::std::move (r));
            continue;
          }
        }

        // maxEdgeLengthLabel
        //
        if (n.name () == "maxEdgeLengthLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< MaxEdgeLengthLabelType > r (
            MaxEdgeLengthLabelTraits::create (i, f, this));

          if (!maxEdgeLengthLabel_.present ())
          {
            this->maxEdgeLengthLabel_.set (::std::move (r));
            continue;
          }
        }

        // iterationsLabel
        //
        if (n.name () == "iterationsLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IterationsLabelType > r (
            IterationsLabelTraits::create (i, f, this));

          if (!iterationsLabel_.present ())
          {
            this->iterationsLabel_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!mesh_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "mesh",
          "");
      }

      if (!reMeshType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "reMeshType",
          "");
      }

      if (!minEdgeLength_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "minEdgeLength",
          "");
      }

      if (!maxEdgeLength_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "maxEdgeLength",
          "");
      }

      if (!iterations_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "iterations",
          "");
      }

      if (!reMeshTypeLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "reMeshTypeLabel",
          "");
      }

      if (!minEdgeLengthLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "minEdgeLengthLabel",
          "");
      }

      if (!maxEdgeLengthLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "maxEdgeLengthLabel",
          "");
      }

      if (!iterationsLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "iterationsLabel",
          "");
      }
    }

    FeatureSurfaceReMesh* FeatureSurfaceReMesh::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureSurfaceReMesh (*this, f, c);
    }

    FeatureSurfaceReMesh& FeatureSurfaceReMesh::
    operator= (const FeatureSurfaceReMesh& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->mesh_ = x.mesh_;
        this->reMeshType_ = x.reMeshType_;
        this->minEdgeLength_ = x.minEdgeLength_;
        this->maxEdgeLength_ = x.maxEdgeLength_;
        this->iterations_ = x.iterations_;
        this->reMeshTypeLabel_ = x.reMeshTypeLabel_;
        this->minEdgeLengthLabel_ = x.minEdgeLengthLabel_;
        this->maxEdgeLengthLabel_ = x.maxEdgeLengthLabel_;
        this->iterationsLabel_ = x.iterationsLabel_;
      }

      return *this;
    }

    FeatureSurfaceReMesh::
    ~FeatureSurfaceReMesh ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > (
        ::prj::srl::surfaceremesh (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > (
        ::prj::srl::surfaceremesh (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > (
        ::prj::srl::surfaceremesh (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::surfaceremesh (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::surfaceremesh (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::surfaceremesh (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::surfaceremesh (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::surfaceremesh (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::surfaceremesh (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > (
        ::prj::srl::surfaceremesh (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > (
        ::prj::srl::surfaceremesh (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > (
        ::prj::srl::surfaceremesh (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > (
          ::prj::srl::surfaceremesh (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "surfaceremesh" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureSurfaceReMesh, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "surfaceremesh",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh >
    surfaceremesh (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "surfaceremesh" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureSurfaceReMesh > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureSurfaceReMesh, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "surfaceremesh",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const FeatureSurfaceReMesh& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // mesh
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "mesh",
            e));

        s << i.mesh ();
      }

      // reMeshType
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "reMeshType",
            e));

        s << i.reMeshType ();
      }

      // minEdgeLength
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "minEdgeLength",
            e));

        s << i.minEdgeLength ();
      }

      // maxEdgeLength
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "maxEdgeLength",
            e));

        s << i.maxEdgeLength ();
      }

      // iterations
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "iterations",
            e));

        s << i.iterations ();
      }

      // reMeshTypeLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "reMeshTypeLabel",
            e));

        s << i.reMeshTypeLabel ();
      }

      // minEdgeLengthLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "minEdgeLengthLabel",
            e));

        s << i.minEdgeLengthLabel ();
      }

      // maxEdgeLengthLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "maxEdgeLengthLabel",
            e));

        s << i.maxEdgeLengthLabel ();
      }

      // iterationsLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "iterationsLabel",
            e));

        s << i.iterationsLabel ();
      }
    }

    void
    surfaceremesh (::std::ostream& o,
                   const ::prj::srl::FeatureSurfaceReMesh& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::surfaceremesh (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    surfaceremesh (::std::ostream& o,
                   const ::prj::srl::FeatureSurfaceReMesh& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::surfaceremesh (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    surfaceremesh (::std::ostream& o,
                   const ::prj::srl::FeatureSurfaceReMesh& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::surfaceremesh (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    surfaceremesh (::xercesc::XMLFormatTarget& t,
                   const ::prj::srl::FeatureSurfaceReMesh& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::surfaceremesh (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    surfaceremesh (::xercesc::XMLFormatTarget& t,
                   const ::prj::srl::FeatureSurfaceReMesh& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::surfaceremesh (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    surfaceremesh (::xercesc::XMLFormatTarget& t,
                   const ::prj::srl::FeatureSurfaceReMesh& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::surfaceremesh (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    surfaceremesh (::xercesc::DOMDocument& d,
                   const ::prj::srl::FeatureSurfaceReMesh& s,
                   ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "surfaceremesh" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "surfaceremesh",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    surfaceremesh (const ::prj::srl::FeatureSurfaceReMesh& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "surfaceremesh",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::surfaceremesh (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

