// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featureruled.h"

namespace prj
{
  namespace srl
  {
    // FeatureRuled
    // 

    const FeatureRuled::FeatureBaseType& FeatureRuled::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureRuled::FeatureBaseType& FeatureRuled::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureRuled::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureRuled::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureRuled::PicksType& FeatureRuled::
    picks () const
    {
      return this->picks_.get ();
    }

    FeatureRuled::PicksType& FeatureRuled::
    picks ()
    {
      return this->picks_.get ();
    }

    void FeatureRuled::
    picks (const PicksType& x)
    {
      this->picks_.set (x);
    }

    void FeatureRuled::
    picks (::std::unique_ptr< PicksType > x)
    {
      this->picks_.set (std::move (x));
    }

    const FeatureRuled::ParentIdType& FeatureRuled::
    parentId () const
    {
      return this->parentId_.get ();
    }

    FeatureRuled::ParentIdType& FeatureRuled::
    parentId ()
    {
      return this->parentId_.get ();
    }

    void FeatureRuled::
    parentId (const ParentIdType& x)
    {
      this->parentId_.set (x);
    }

    void FeatureRuled::
    parentId (::std::unique_ptr< ParentIdType > x)
    {
      this->parentId_.set (std::move (x));
    }

    const FeatureRuled::ParentIdType& FeatureRuled::
    parentId_default_value ()
    {
      return parentId_default_value_;
    }

    const FeatureRuled::EfMapType& FeatureRuled::
    efMap () const
    {
      return this->efMap_.get ();
    }

    FeatureRuled::EfMapType& FeatureRuled::
    efMap ()
    {
      return this->efMap_.get ();
    }

    void FeatureRuled::
    efMap (const EfMapType& x)
    {
      this->efMap_.set (x);
    }

    void FeatureRuled::
    efMap (::std::unique_ptr< EfMapType > x)
    {
      this->efMap_.set (std::move (x));
    }

    const FeatureRuled::VeMapType& FeatureRuled::
    veMap () const
    {
      return this->veMap_.get ();
    }

    FeatureRuled::VeMapType& FeatureRuled::
    veMap ()
    {
      return this->veMap_.get ();
    }

    void FeatureRuled::
    veMap (const VeMapType& x)
    {
      this->veMap_.set (x);
    }

    void FeatureRuled::
    veMap (::std::unique_ptr< VeMapType > x)
    {
      this->veMap_.set (std::move (x));
    }

    const FeatureRuled::OuterWireMapType& FeatureRuled::
    outerWireMap () const
    {
      return this->outerWireMap_.get ();
    }

    FeatureRuled::OuterWireMapType& FeatureRuled::
    outerWireMap ()
    {
      return this->outerWireMap_.get ();
    }

    void FeatureRuled::
    outerWireMap (const OuterWireMapType& x)
    {
      this->outerWireMap_.set (x);
    }

    void FeatureRuled::
    outerWireMap (::std::unique_ptr< OuterWireMapType > x)
    {
      this->outerWireMap_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // FeatureRuled
    //

    const FeatureRuled::ParentIdType FeatureRuled::parentId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    FeatureRuled::
    FeatureRuled (const FeatureBaseType& featureBase,
                  const PicksType& picks,
                  const ParentIdType& parentId,
                  const EfMapType& efMap,
                  const VeMapType& veMap,
                  const OuterWireMapType& outerWireMap)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      picks_ (picks, this),
      parentId_ (parentId, this),
      efMap_ (efMap, this),
      veMap_ (veMap, this),
      outerWireMap_ (outerWireMap, this)
    {
    }

    FeatureRuled::
    FeatureRuled (::std::unique_ptr< FeatureBaseType > featureBase,
                  ::std::unique_ptr< PicksType > picks,
                  const ParentIdType& parentId,
                  ::std::unique_ptr< EfMapType > efMap,
                  ::std::unique_ptr< VeMapType > veMap,
                  ::std::unique_ptr< OuterWireMapType > outerWireMap)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      picks_ (std::move (picks), this),
      parentId_ (parentId, this),
      efMap_ (std::move (efMap), this),
      veMap_ (std::move (veMap), this),
      outerWireMap_ (std::move (outerWireMap), this)
    {
    }

    FeatureRuled::
    FeatureRuled (const FeatureRuled& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      picks_ (x.picks_, f, this),
      parentId_ (x.parentId_, f, this),
      efMap_ (x.efMap_, f, this),
      veMap_ (x.veMap_, f, this),
      outerWireMap_ (x.outerWireMap_, f, this)
    {
    }

    FeatureRuled::
    FeatureRuled (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      picks_ (this),
      parentId_ (this),
      efMap_ (this),
      veMap_ (this),
      outerWireMap_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureRuled::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // picks
        //
        if (n.name () == "picks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PicksType > r (
            PicksTraits::create (i, f, this));

          if (!picks_.present ())
          {
            this->picks_.set (::std::move (r));
            continue;
          }
        }

        // parentId
        //
        if (n.name () == "parentId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ParentIdType > r (
            ParentIdTraits::create (i, f, this));

          if (!parentId_.present ())
          {
            this->parentId_.set (::std::move (r));
            continue;
          }
        }

        // efMap
        //
        if (n.name () == "efMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< EfMapType > r (
            EfMapTraits::create (i, f, this));

          if (!efMap_.present ())
          {
            this->efMap_.set (::std::move (r));
            continue;
          }
        }

        // veMap
        //
        if (n.name () == "veMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< VeMapType > r (
            VeMapTraits::create (i, f, this));

          if (!veMap_.present ())
          {
            this->veMap_.set (::std::move (r));
            continue;
          }
        }

        // outerWireMap
        //
        if (n.name () == "outerWireMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OuterWireMapType > r (
            OuterWireMapTraits::create (i, f, this));

          if (!outerWireMap_.present ())
          {
            this->outerWireMap_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!picks_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "picks",
          "");
      }

      if (!parentId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "parentId",
          "");
      }

      if (!efMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "efMap",
          "");
      }

      if (!veMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "veMap",
          "");
      }

      if (!outerWireMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "outerWireMap",
          "");
      }
    }

    FeatureRuled* FeatureRuled::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureRuled (*this, f, c);
    }

    FeatureRuled& FeatureRuled::
    operator= (const FeatureRuled& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->picks_ = x.picks_;
        this->parentId_ = x.parentId_;
        this->efMap_ = x.efMap_;
        this->veMap_ = x.veMap_;
        this->outerWireMap_ = x.outerWireMap_;
      }

      return *this;
    }

    FeatureRuled::
    ~FeatureRuled ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (const ::std::string& u,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureRuled > (
        ::prj::srl::ruled (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (const ::std::string& u,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureRuled > (
        ::prj::srl::ruled (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureRuled > (
        ::prj::srl::ruled (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::std::istream& is,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::ruled (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::std::istream& is,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::ruled (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::ruled (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::ruled (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::ruled (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::ruled (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::xercesc::InputSource& i,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureRuled > (
        ::prj::srl::ruled (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::xercesc::InputSource& i,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureRuled > (
        ::prj::srl::ruled (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureRuled > (
        ::prj::srl::ruled (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (const ::xercesc::DOMDocument& doc,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureRuled > (
          ::prj::srl::ruled (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ruled" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureRuled > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureRuled, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ruled",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureRuled >
    ruled (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ruled" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureRuled > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureRuled, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ruled",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const FeatureRuled& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // picks
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "picks",
            e));

        s << i.picks ();
      }

      // parentId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "parentId",
            e));

        s << i.parentId ();
      }

      // efMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "efMap",
            e));

        s << i.efMap ();
      }

      // veMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "veMap",
            e));

        s << i.veMap ();
      }

      // outerWireMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "outerWireMap",
            e));

        s << i.outerWireMap ();
      }
    }

    void
    ruled (::std::ostream& o,
           const ::prj::srl::FeatureRuled& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::ruled (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ruled (::std::ostream& o,
           const ::prj::srl::FeatureRuled& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::ruled (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ruled (::std::ostream& o,
           const ::prj::srl::FeatureRuled& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::ruled (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ruled (::xercesc::XMLFormatTarget& t,
           const ::prj::srl::FeatureRuled& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::ruled (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ruled (::xercesc::XMLFormatTarget& t,
           const ::prj::srl::FeatureRuled& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::ruled (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ruled (::xercesc::XMLFormatTarget& t,
           const ::prj::srl::FeatureRuled& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::ruled (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ruled (::xercesc::DOMDocument& d,
           const ::prj::srl::FeatureRuled& s,
           ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ruled" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ruled",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ruled (const ::prj::srl::FeatureRuled& s,
           const ::xml_schema::NamespaceInfomap& m,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ruled",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::ruled (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

