// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featuresketch.h"

namespace prj
{
  namespace srl
  {
    // SSParameter
    // 

    const SSParameter::HandleType& SSParameter::
    handle () const
    {
      return this->handle_.get ();
    }

    SSParameter::HandleType& SSParameter::
    handle ()
    {
      return this->handle_.get ();
    }

    void SSParameter::
    handle (const HandleType& x)
    {
      this->handle_.set (x);
    }

    const SSParameter::GroupType& SSParameter::
    group () const
    {
      return this->group_.get ();
    }

    SSParameter::GroupType& SSParameter::
    group ()
    {
      return this->group_.get ();
    }

    void SSParameter::
    group (const GroupType& x)
    {
      this->group_.set (x);
    }

    const SSParameter::ValueType& SSParameter::
    value () const
    {
      return this->value_.get ();
    }

    SSParameter::ValueType& SSParameter::
    value ()
    {
      return this->value_.get ();
    }

    void SSParameter::
    value (const ValueType& x)
    {
      this->value_.set (x);
    }


    // SSParameters
    // 

    const SSParameters::ArraySequence& SSParameters::
    array () const
    {
      return this->array_;
    }

    SSParameters::ArraySequence& SSParameters::
    array ()
    {
      return this->array_;
    }

    void SSParameters::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // SS4Handles
    // 

    const SS4Handles::ArraySequence& SS4Handles::
    array () const
    {
      return this->array_;
    }

    SS4Handles::ArraySequence& SS4Handles::
    array ()
    {
      return this->array_;
    }

    void SS4Handles::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // SSEntity
    // 

    const SSEntity::HandleType& SSEntity::
    handle () const
    {
      return this->handle_.get ();
    }

    SSEntity::HandleType& SSEntity::
    handle ()
    {
      return this->handle_.get ();
    }

    void SSEntity::
    handle (const HandleType& x)
    {
      this->handle_.set (x);
    }

    const SSEntity::GroupType& SSEntity::
    group () const
    {
      return this->group_.get ();
    }

    SSEntity::GroupType& SSEntity::
    group ()
    {
      return this->group_.get ();
    }

    void SSEntity::
    group (const GroupType& x)
    {
      this->group_.set (x);
    }

    const SSEntity::TypeType& SSEntity::
    type () const
    {
      return this->type_.get ();
    }

    SSEntity::TypeType& SSEntity::
    type ()
    {
      return this->type_.get ();
    }

    void SSEntity::
    type (const TypeType& x)
    {
      this->type_.set (x);
    }

    const SSEntity::WorkPlaneType& SSEntity::
    workPlane () const
    {
      return this->workPlane_.get ();
    }

    SSEntity::WorkPlaneType& SSEntity::
    workPlane ()
    {
      return this->workPlane_.get ();
    }

    void SSEntity::
    workPlane (const WorkPlaneType& x)
    {
      this->workPlane_.set (x);
    }

    const SSEntity::PointsType& SSEntity::
    points () const
    {
      return this->points_.get ();
    }

    SSEntity::PointsType& SSEntity::
    points ()
    {
      return this->points_.get ();
    }

    void SSEntity::
    points (const PointsType& x)
    {
      this->points_.set (x);
    }

    void SSEntity::
    points (::std::unique_ptr< PointsType > x)
    {
      this->points_.set (std::move (x));
    }

    const SSEntity::NormalType& SSEntity::
    normal () const
    {
      return this->normal_.get ();
    }

    SSEntity::NormalType& SSEntity::
    normal ()
    {
      return this->normal_.get ();
    }

    void SSEntity::
    normal (const NormalType& x)
    {
      this->normal_.set (x);
    }

    const SSEntity::DistanceType& SSEntity::
    distance () const
    {
      return this->distance_.get ();
    }

    SSEntity::DistanceType& SSEntity::
    distance ()
    {
      return this->distance_.get ();
    }

    void SSEntity::
    distance (const DistanceType& x)
    {
      this->distance_.set (x);
    }

    const SSEntity::ParametersType& SSEntity::
    parameters () const
    {
      return this->parameters_.get ();
    }

    SSEntity::ParametersType& SSEntity::
    parameters ()
    {
      return this->parameters_.get ();
    }

    void SSEntity::
    parameters (const ParametersType& x)
    {
      this->parameters_.set (x);
    }

    void SSEntity::
    parameters (::std::unique_ptr< ParametersType > x)
    {
      this->parameters_.set (std::move (x));
    }


    // SSEntities
    // 

    const SSEntities::ArraySequence& SSEntities::
    array () const
    {
      return this->array_;
    }

    SSEntities::ArraySequence& SSEntities::
    array ()
    {
      return this->array_;
    }

    void SSEntities::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // SSConstraint
    // 

    const SSConstraint::HandleType& SSConstraint::
    handle () const
    {
      return this->handle_.get ();
    }

    SSConstraint::HandleType& SSConstraint::
    handle ()
    {
      return this->handle_.get ();
    }

    void SSConstraint::
    handle (const HandleType& x)
    {
      this->handle_.set (x);
    }

    const SSConstraint::GroupType& SSConstraint::
    group () const
    {
      return this->group_.get ();
    }

    SSConstraint::GroupType& SSConstraint::
    group ()
    {
      return this->group_.get ();
    }

    void SSConstraint::
    group (const GroupType& x)
    {
      this->group_.set (x);
    }

    const SSConstraint::TypeType& SSConstraint::
    type () const
    {
      return this->type_.get ();
    }

    SSConstraint::TypeType& SSConstraint::
    type ()
    {
      return this->type_.get ();
    }

    void SSConstraint::
    type (const TypeType& x)
    {
      this->type_.set (x);
    }

    const SSConstraint::WorkPlaneType& SSConstraint::
    workPlane () const
    {
      return this->workPlane_.get ();
    }

    SSConstraint::WorkPlaneType& SSConstraint::
    workPlane ()
    {
      return this->workPlane_.get ();
    }

    void SSConstraint::
    workPlane (const WorkPlaneType& x)
    {
      this->workPlane_.set (x);
    }

    const SSConstraint::ValueType& SSConstraint::
    value () const
    {
      return this->value_.get ();
    }

    SSConstraint::ValueType& SSConstraint::
    value ()
    {
      return this->value_.get ();
    }

    void SSConstraint::
    value (const ValueType& x)
    {
      this->value_.set (x);
    }

    const SSConstraint::PointAType& SSConstraint::
    pointA () const
    {
      return this->pointA_.get ();
    }

    SSConstraint::PointAType& SSConstraint::
    pointA ()
    {
      return this->pointA_.get ();
    }

    void SSConstraint::
    pointA (const PointAType& x)
    {
      this->pointA_.set (x);
    }

    const SSConstraint::PointBType& SSConstraint::
    pointB () const
    {
      return this->pointB_.get ();
    }

    SSConstraint::PointBType& SSConstraint::
    pointB ()
    {
      return this->pointB_.get ();
    }

    void SSConstraint::
    pointB (const PointBType& x)
    {
      this->pointB_.set (x);
    }

    const SSConstraint::EntityAType& SSConstraint::
    entityA () const
    {
      return this->entityA_.get ();
    }

    SSConstraint::EntityAType& SSConstraint::
    entityA ()
    {
      return this->entityA_.get ();
    }

    void SSConstraint::
    entityA (const EntityAType& x)
    {
      this->entityA_.set (x);
    }

    const SSConstraint::EntityBType& SSConstraint::
    entityB () const
    {
      return this->entityB_.get ();
    }

    SSConstraint::EntityBType& SSConstraint::
    entityB ()
    {
      return this->entityB_.get ();
    }

    void SSConstraint::
    entityB (const EntityBType& x)
    {
      this->entityB_.set (x);
    }

    const SSConstraint::EntityCType& SSConstraint::
    entityC () const
    {
      return this->entityC_.get ();
    }

    SSConstraint::EntityCType& SSConstraint::
    entityC ()
    {
      return this->entityC_.get ();
    }

    void SSConstraint::
    entityC (const EntityCType& x)
    {
      this->entityC_.set (x);
    }

    const SSConstraint::EntityDType& SSConstraint::
    entityD () const
    {
      return this->entityD_.get ();
    }

    SSConstraint::EntityDType& SSConstraint::
    entityD ()
    {
      return this->entityD_.get ();
    }

    void SSConstraint::
    entityD (const EntityDType& x)
    {
      this->entityD_.set (x);
    }

    const SSConstraint::OtherType& SSConstraint::
    other () const
    {
      return this->other_.get ();
    }

    SSConstraint::OtherType& SSConstraint::
    other ()
    {
      return this->other_.get ();
    }

    void SSConstraint::
    other (const OtherType& x)
    {
      this->other_.set (x);
    }

    const SSConstraint::Other2Type& SSConstraint::
    other2 () const
    {
      return this->other2_.get ();
    }

    SSConstraint::Other2Type& SSConstraint::
    other2 ()
    {
      return this->other2_.get ();
    }

    void SSConstraint::
    other2 (const Other2Type& x)
    {
      this->other2_.set (x);
    }


    // SSConstraints
    // 

    const SSConstraints::ArraySequence& SSConstraints::
    array () const
    {
      return this->array_;
    }

    SSConstraints::ArraySequence& SSConstraints::
    array ()
    {
      return this->array_;
    }

    void SSConstraints::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // Solver
    // 

    const Solver::ParametersType& Solver::
    parameters () const
    {
      return this->parameters_.get ();
    }

    Solver::ParametersType& Solver::
    parameters ()
    {
      return this->parameters_.get ();
    }

    void Solver::
    parameters (const ParametersType& x)
    {
      this->parameters_.set (x);
    }

    void Solver::
    parameters (::std::unique_ptr< ParametersType > x)
    {
      this->parameters_.set (std::move (x));
    }

    const Solver::EntitiesType& Solver::
    entities () const
    {
      return this->entities_.get ();
    }

    Solver::EntitiesType& Solver::
    entities ()
    {
      return this->entities_.get ();
    }

    void Solver::
    entities (const EntitiesType& x)
    {
      this->entities_.set (x);
    }

    void Solver::
    entities (::std::unique_ptr< EntitiesType > x)
    {
      this->entities_.set (std::move (x));
    }

    const Solver::ConstraintsType& Solver::
    constraints () const
    {
      return this->constraints_.get ();
    }

    Solver::ConstraintsType& Solver::
    constraints ()
    {
      return this->constraints_.get ();
    }

    void Solver::
    constraints (const ConstraintsType& x)
    {
      this->constraints_.set (x);
    }

    void Solver::
    constraints (::std::unique_ptr< ConstraintsType > x)
    {
      this->constraints_.set (std::move (x));
    }

    const Solver::NextParameterHandleType& Solver::
    nextParameterHandle () const
    {
      return this->nextParameterHandle_.get ();
    }

    Solver::NextParameterHandleType& Solver::
    nextParameterHandle ()
    {
      return this->nextParameterHandle_.get ();
    }

    void Solver::
    nextParameterHandle (const NextParameterHandleType& x)
    {
      this->nextParameterHandle_.set (x);
    }

    const Solver::NextEntityHandleType& Solver::
    nextEntityHandle () const
    {
      return this->nextEntityHandle_.get ();
    }

    Solver::NextEntityHandleType& Solver::
    nextEntityHandle ()
    {
      return this->nextEntityHandle_.get ();
    }

    void Solver::
    nextEntityHandle (const NextEntityHandleType& x)
    {
      this->nextEntityHandle_.set (x);
    }

    const Solver::NextConstraintHandleType& Solver::
    nextConstraintHandle () const
    {
      return this->nextConstraintHandle_.get ();
    }

    Solver::NextConstraintHandleType& Solver::
    nextConstraintHandle ()
    {
      return this->nextConstraintHandle_.get ();
    }

    void Solver::
    nextConstraintHandle (const NextConstraintHandleType& x)
    {
      this->nextConstraintHandle_.set (x);
    }

    const Solver::CurrentGroupType& Solver::
    currentGroup () const
    {
      return this->currentGroup_.get ();
    }

    Solver::CurrentGroupType& Solver::
    currentGroup ()
    {
      return this->currentGroup_.get ();
    }

    void Solver::
    currentGroup (const CurrentGroupType& x)
    {
      this->currentGroup_.set (x);
    }

    const Solver::CurrentWorkPlaneType& Solver::
    currentWorkPlane () const
    {
      return this->currentWorkPlane_.get ();
    }

    Solver::CurrentWorkPlaneType& Solver::
    currentWorkPlane ()
    {
      return this->currentWorkPlane_.get ();
    }

    void Solver::
    currentWorkPlane (const CurrentWorkPlaneType& x)
    {
      this->currentWorkPlane_.set (x);
    }

    const Solver::CurrentXAxisType& Solver::
    currentXAxis () const
    {
      return this->currentXAxis_.get ();
    }

    Solver::CurrentXAxisType& Solver::
    currentXAxis ()
    {
      return this->currentXAxis_.get ();
    }

    void Solver::
    currentXAxis (const CurrentXAxisType& x)
    {
      this->currentXAxis_.set (x);
    }

    const Solver::CurrentYAxisType& Solver::
    currentYAxis () const
    {
      return this->currentYAxis_.get ();
    }

    Solver::CurrentYAxisType& Solver::
    currentYAxis ()
    {
      return this->currentYAxis_.get ();
    }

    void Solver::
    currentYAxis (const CurrentYAxisType& x)
    {
      this->currentYAxis_.set (x);
    }


    // VisualMapRecord
    // 

    const VisualMapRecord::HandleType& VisualMapRecord::
    handle () const
    {
      return this->handle_.get ();
    }

    VisualMapRecord::HandleType& VisualMapRecord::
    handle ()
    {
      return this->handle_.get ();
    }

    void VisualMapRecord::
    handle (const HandleType& x)
    {
      this->handle_.set (x);
    }

    const VisualMapRecord::IdType& VisualMapRecord::
    id () const
    {
      return this->id_.get ();
    }

    VisualMapRecord::IdType& VisualMapRecord::
    id ()
    {
      return this->id_.get ();
    }

    void VisualMapRecord::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    void VisualMapRecord::
    id (::std::unique_ptr< IdType > x)
    {
      this->id_.set (std::move (x));
    }

    const VisualMapRecord::LocationType& VisualMapRecord::
    location () const
    {
      return this->location_.get ();
    }

    VisualMapRecord::LocationType& VisualMapRecord::
    location ()
    {
      return this->location_.get ();
    }

    void VisualMapRecord::
    location (const LocationType& x)
    {
      this->location_.set (x);
    }

    void VisualMapRecord::
    location (::std::unique_ptr< LocationType > x)
    {
      this->location_.set (std::move (x));
    }

    const VisualMapRecord::ConstructionType& VisualMapRecord::
    construction () const
    {
      return this->construction_.get ();
    }

    VisualMapRecord::ConstructionType& VisualMapRecord::
    construction ()
    {
      return this->construction_.get ();
    }

    void VisualMapRecord::
    construction (const ConstructionType& x)
    {
      this->construction_.set (x);
    }


    // VisualMap
    // 

    const VisualMap::ArraySequence& VisualMap::
    array () const
    {
      return this->array_;
    }

    VisualMap::ArraySequence& VisualMap::
    array ()
    {
      return this->array_;
    }

    void VisualMap::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // Visual
    // 

    const Visual::AutoSizeType& Visual::
    autoSize () const
    {
      return this->autoSize_.get ();
    }

    Visual::AutoSizeType& Visual::
    autoSize ()
    {
      return this->autoSize_.get ();
    }

    void Visual::
    autoSize (const AutoSizeType& x)
    {
      this->autoSize_.set (x);
    }

    const Visual::SizeType& Visual::
    size () const
    {
      return this->size_.get ();
    }

    Visual::SizeType& Visual::
    size ()
    {
      return this->size_.get ();
    }

    void Visual::
    size (const SizeType& x)
    {
      this->size_.set (x);
    }

    const Visual::EntityMapType& Visual::
    entityMap () const
    {
      return this->entityMap_.get ();
    }

    Visual::EntityMapType& Visual::
    entityMap ()
    {
      return this->entityMap_.get ();
    }

    void Visual::
    entityMap (const EntityMapType& x)
    {
      this->entityMap_.set (x);
    }

    void Visual::
    entityMap (::std::unique_ptr< EntityMapType > x)
    {
      this->entityMap_.set (std::move (x));
    }

    const Visual::ConstraintMapType& Visual::
    constraintMap () const
    {
      return this->constraintMap_.get ();
    }

    Visual::ConstraintMapType& Visual::
    constraintMap ()
    {
      return this->constraintMap_.get ();
    }

    void Visual::
    constraintMap (const ConstraintMapType& x)
    {
      this->constraintMap_.set (x);
    }

    void Visual::
    constraintMap (::std::unique_ptr< ConstraintMapType > x)
    {
      this->constraintMap_.set (std::move (x));
    }


    // WireIds
    // 

    const WireIds::ArraySequence& WireIds::
    array () const
    {
      return this->array_;
    }

    WireIds::ArraySequence& WireIds::
    array ()
    {
      return this->array_;
    }

    void WireIds::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // HandleParameterPair
    // 

    const HandleParameterPair::HandleType& HandleParameterPair::
    handle () const
    {
      return this->handle_.get ();
    }

    HandleParameterPair::HandleType& HandleParameterPair::
    handle ()
    {
      return this->handle_.get ();
    }

    void HandleParameterPair::
    handle (const HandleType& x)
    {
      this->handle_.set (x);
    }

    const HandleParameterPair::ParameterType& HandleParameterPair::
    parameter () const
    {
      return this->parameter_.get ();
    }

    HandleParameterPair::ParameterType& HandleParameterPair::
    parameter ()
    {
      return this->parameter_.get ();
    }

    void HandleParameterPair::
    parameter (const ParameterType& x)
    {
      this->parameter_.set (x);
    }

    void HandleParameterPair::
    parameter (::std::unique_ptr< ParameterType > x)
    {
      this->parameter_.set (std::move (x));
    }


    // HandleParameterPairs
    // 

    const HandleParameterPairs::ArraySequence& HandleParameterPairs::
    array () const
    {
      return this->array_;
    }

    HandleParameterPairs::ArraySequence& HandleParameterPairs::
    array ()
    {
      return this->array_;
    }

    void HandleParameterPairs::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // FeatureSketch
    // 

    const FeatureSketch::FeatureBaseType& FeatureSketch::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureSketch::FeatureBaseType& FeatureSketch::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureSketch::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureSketch::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureSketch::SolverType& FeatureSketch::
    solver () const
    {
      return this->solver_.get ();
    }

    FeatureSketch::SolverType& FeatureSketch::
    solver ()
    {
      return this->solver_.get ();
    }

    void FeatureSketch::
    solver (const SolverType& x)
    {
      this->solver_.set (x);
    }

    void FeatureSketch::
    solver (::std::unique_ptr< SolverType > x)
    {
      this->solver_.set (std::move (x));
    }

    const FeatureSketch::VisualType& FeatureSketch::
    visual () const
    {
      return this->visual_.get ();
    }

    FeatureSketch::VisualType& FeatureSketch::
    visual ()
    {
      return this->visual_.get ();
    }

    void FeatureSketch::
    visual (const VisualType& x)
    {
      this->visual_.set (x);
    }

    void FeatureSketch::
    visual (::std::unique_ptr< VisualType > x)
    {
      this->visual_.set (std::move (x));
    }

    const FeatureSketch::CsysType& FeatureSketch::
    csys () const
    {
      return this->csys_.get ();
    }

    FeatureSketch::CsysType& FeatureSketch::
    csys ()
    {
      return this->csys_.get ();
    }

    void FeatureSketch::
    csys (const CsysType& x)
    {
      this->csys_.set (x);
    }

    void FeatureSketch::
    csys (::std::unique_ptr< CsysType > x)
    {
      this->csys_.set (std::move (x));
    }

    const FeatureSketch::CsysDraggerType& FeatureSketch::
    csysDragger () const
    {
      return this->csysDragger_.get ();
    }

    FeatureSketch::CsysDraggerType& FeatureSketch::
    csysDragger ()
    {
      return this->csysDragger_.get ();
    }

    void FeatureSketch::
    csysDragger (const CsysDraggerType& x)
    {
      this->csysDragger_.set (x);
    }

    void FeatureSketch::
    csysDragger (::std::unique_ptr< CsysDraggerType > x)
    {
      this->csysDragger_.set (std::move (x));
    }

    const FeatureSketch::WireIdsType& FeatureSketch::
    wireIds () const
    {
      return this->wireIds_.get ();
    }

    FeatureSketch::WireIdsType& FeatureSketch::
    wireIds ()
    {
      return this->wireIds_.get ();
    }

    void FeatureSketch::
    wireIds (const WireIdsType& x)
    {
      this->wireIds_.set (x);
    }

    void FeatureSketch::
    wireIds (::std::unique_ptr< WireIdsType > x)
    {
      this->wireIds_.set (std::move (x));
    }

    const FeatureSketch::HandleParameterPairsType& FeatureSketch::
    handleParameterPairs () const
    {
      return this->handleParameterPairs_.get ();
    }

    FeatureSketch::HandleParameterPairsType& FeatureSketch::
    handleParameterPairs ()
    {
      return this->handleParameterPairs_.get ();
    }

    void FeatureSketch::
    handleParameterPairs (const HandleParameterPairsType& x)
    {
      this->handleParameterPairs_.set (x);
    }

    void FeatureSketch::
    handleParameterPairs (::std::unique_ptr< HandleParameterPairsType > x)
    {
      this->handleParameterPairs_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // SSParameter
    //

    SSParameter::
    SSParameter (const HandleType& handle,
                 const GroupType& group,
                 const ValueType& value)
    : ::xml_schema::Type (),
      handle_ (handle, this),
      group_ (group, this),
      value_ (value, this)
    {
    }

    SSParameter::
    SSParameter (const SSParameter& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      handle_ (x.handle_, f, this),
      group_ (x.group_, f, this),
      value_ (x.value_, f, this)
    {
    }

    SSParameter::
    SSParameter (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      handle_ (this),
      group_ (this),
      value_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SSParameter::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // handle
        //
        if (n.name () == "handle" && n.namespace_ ().empty ())
        {
          if (!handle_.present ())
          {
            this->handle_.set (HandleTraits::create (i, f, this));
            continue;
          }
        }

        // group
        //
        if (n.name () == "group" && n.namespace_ ().empty ())
        {
          if (!group_.present ())
          {
            this->group_.set (GroupTraits::create (i, f, this));
            continue;
          }
        }

        // value
        //
        if (n.name () == "value" && n.namespace_ ().empty ())
        {
          if (!value_.present ())
          {
            this->value_.set (ValueTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!handle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "handle",
          "");
      }

      if (!group_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "group",
          "");
      }

      if (!value_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "value",
          "");
      }
    }

    SSParameter* SSParameter::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SSParameter (*this, f, c);
    }

    SSParameter& SSParameter::
    operator= (const SSParameter& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->handle_ = x.handle_;
        this->group_ = x.group_;
        this->value_ = x.value_;
      }

      return *this;
    }

    SSParameter::
    ~SSParameter ()
    {
    }

    // SSParameters
    //

    SSParameters::
    SSParameters ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    SSParameters::
    SSParameters (const SSParameters& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    SSParameters::
    SSParameters (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SSParameters::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    SSParameters* SSParameters::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SSParameters (*this, f, c);
    }

    SSParameters& SSParameters::
    operator= (const SSParameters& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    SSParameters::
    ~SSParameters ()
    {
    }

    // SS4Handles
    //

    SS4Handles::
    SS4Handles ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    SS4Handles::
    SS4Handles (const SS4Handles& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    SS4Handles::
    SS4Handles (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SS4Handles::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          this->array_.push_back (ArrayTraits::create (i, f, this));
          continue;
        }

        break;
      }
    }

    SS4Handles* SS4Handles::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SS4Handles (*this, f, c);
    }

    SS4Handles& SS4Handles::
    operator= (const SS4Handles& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    SS4Handles::
    ~SS4Handles ()
    {
    }

    // SSEntity
    //

    SSEntity::
    SSEntity (const HandleType& handle,
              const GroupType& group,
              const TypeType& type,
              const WorkPlaneType& workPlane,
              const PointsType& points,
              const NormalType& normal,
              const DistanceType& distance,
              const ParametersType& parameters)
    : ::xml_schema::Type (),
      handle_ (handle, this),
      group_ (group, this),
      type_ (type, this),
      workPlane_ (workPlane, this),
      points_ (points, this),
      normal_ (normal, this),
      distance_ (distance, this),
      parameters_ (parameters, this)
    {
    }

    SSEntity::
    SSEntity (const HandleType& handle,
              const GroupType& group,
              const TypeType& type,
              const WorkPlaneType& workPlane,
              ::std::unique_ptr< PointsType > points,
              const NormalType& normal,
              const DistanceType& distance,
              ::std::unique_ptr< ParametersType > parameters)
    : ::xml_schema::Type (),
      handle_ (handle, this),
      group_ (group, this),
      type_ (type, this),
      workPlane_ (workPlane, this),
      points_ (std::move (points), this),
      normal_ (normal, this),
      distance_ (distance, this),
      parameters_ (std::move (parameters), this)
    {
    }

    SSEntity::
    SSEntity (const SSEntity& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      handle_ (x.handle_, f, this),
      group_ (x.group_, f, this),
      type_ (x.type_, f, this),
      workPlane_ (x.workPlane_, f, this),
      points_ (x.points_, f, this),
      normal_ (x.normal_, f, this),
      distance_ (x.distance_, f, this),
      parameters_ (x.parameters_, f, this)
    {
    }

    SSEntity::
    SSEntity (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      handle_ (this),
      group_ (this),
      type_ (this),
      workPlane_ (this),
      points_ (this),
      normal_ (this),
      distance_ (this),
      parameters_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SSEntity::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // handle
        //
        if (n.name () == "handle" && n.namespace_ ().empty ())
        {
          if (!handle_.present ())
          {
            this->handle_.set (HandleTraits::create (i, f, this));
            continue;
          }
        }

        // group
        //
        if (n.name () == "group" && n.namespace_ ().empty ())
        {
          if (!group_.present ())
          {
            this->group_.set (GroupTraits::create (i, f, this));
            continue;
          }
        }

        // type
        //
        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          if (!type_.present ())
          {
            this->type_.set (TypeTraits::create (i, f, this));
            continue;
          }
        }

        // workPlane
        //
        if (n.name () == "workPlane" && n.namespace_ ().empty ())
        {
          if (!workPlane_.present ())
          {
            this->workPlane_.set (WorkPlaneTraits::create (i, f, this));
            continue;
          }
        }

        // points
        //
        if (n.name () == "points" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PointsType > r (
            PointsTraits::create (i, f, this));

          if (!points_.present ())
          {
            this->points_.set (::std::move (r));
            continue;
          }
        }

        // normal
        //
        if (n.name () == "normal" && n.namespace_ ().empty ())
        {
          if (!normal_.present ())
          {
            this->normal_.set (NormalTraits::create (i, f, this));
            continue;
          }
        }

        // distance
        //
        if (n.name () == "distance" && n.namespace_ ().empty ())
        {
          if (!distance_.present ())
          {
            this->distance_.set (DistanceTraits::create (i, f, this));
            continue;
          }
        }

        // parameters
        //
        if (n.name () == "parameters" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ParametersType > r (
            ParametersTraits::create (i, f, this));

          if (!parameters_.present ())
          {
            this->parameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!handle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "handle",
          "");
      }

      if (!group_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "group",
          "");
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "type",
          "");
      }

      if (!workPlane_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "workPlane",
          "");
      }

      if (!points_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "points",
          "");
      }

      if (!normal_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "normal",
          "");
      }

      if (!distance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "distance",
          "");
      }

      if (!parameters_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "parameters",
          "");
      }
    }

    SSEntity* SSEntity::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SSEntity (*this, f, c);
    }

    SSEntity& SSEntity::
    operator= (const SSEntity& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->handle_ = x.handle_;
        this->group_ = x.group_;
        this->type_ = x.type_;
        this->workPlane_ = x.workPlane_;
        this->points_ = x.points_;
        this->normal_ = x.normal_;
        this->distance_ = x.distance_;
        this->parameters_ = x.parameters_;
      }

      return *this;
    }

    SSEntity::
    ~SSEntity ()
    {
    }

    // SSEntities
    //

    SSEntities::
    SSEntities ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    SSEntities::
    SSEntities (const SSEntities& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    SSEntities::
    SSEntities (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SSEntities::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    SSEntities* SSEntities::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SSEntities (*this, f, c);
    }

    SSEntities& SSEntities::
    operator= (const SSEntities& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    SSEntities::
    ~SSEntities ()
    {
    }

    // SSConstraint
    //

    SSConstraint::
    SSConstraint (const HandleType& handle,
                  const GroupType& group,
                  const TypeType& type,
                  const WorkPlaneType& workPlane,
                  const ValueType& value,
                  const PointAType& pointA,
                  const PointBType& pointB,
                  const EntityAType& entityA,
                  const EntityBType& entityB,
                  const EntityCType& entityC,
                  const EntityDType& entityD,
                  const OtherType& other,
                  const Other2Type& other2)
    : ::xml_schema::Type (),
      handle_ (handle, this),
      group_ (group, this),
      type_ (type, this),
      workPlane_ (workPlane, this),
      value_ (value, this),
      pointA_ (pointA, this),
      pointB_ (pointB, this),
      entityA_ (entityA, this),
      entityB_ (entityB, this),
      entityC_ (entityC, this),
      entityD_ (entityD, this),
      other_ (other, this),
      other2_ (other2, this)
    {
    }

    SSConstraint::
    SSConstraint (const SSConstraint& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      handle_ (x.handle_, f, this),
      group_ (x.group_, f, this),
      type_ (x.type_, f, this),
      workPlane_ (x.workPlane_, f, this),
      value_ (x.value_, f, this),
      pointA_ (x.pointA_, f, this),
      pointB_ (x.pointB_, f, this),
      entityA_ (x.entityA_, f, this),
      entityB_ (x.entityB_, f, this),
      entityC_ (x.entityC_, f, this),
      entityD_ (x.entityD_, f, this),
      other_ (x.other_, f, this),
      other2_ (x.other2_, f, this)
    {
    }

    SSConstraint::
    SSConstraint (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      handle_ (this),
      group_ (this),
      type_ (this),
      workPlane_ (this),
      value_ (this),
      pointA_ (this),
      pointB_ (this),
      entityA_ (this),
      entityB_ (this),
      entityC_ (this),
      entityD_ (this),
      other_ (this),
      other2_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SSConstraint::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // handle
        //
        if (n.name () == "handle" && n.namespace_ ().empty ())
        {
          if (!handle_.present ())
          {
            this->handle_.set (HandleTraits::create (i, f, this));
            continue;
          }
        }

        // group
        //
        if (n.name () == "group" && n.namespace_ ().empty ())
        {
          if (!group_.present ())
          {
            this->group_.set (GroupTraits::create (i, f, this));
            continue;
          }
        }

        // type
        //
        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          if (!type_.present ())
          {
            this->type_.set (TypeTraits::create (i, f, this));
            continue;
          }
        }

        // workPlane
        //
        if (n.name () == "workPlane" && n.namespace_ ().empty ())
        {
          if (!workPlane_.present ())
          {
            this->workPlane_.set (WorkPlaneTraits::create (i, f, this));
            continue;
          }
        }

        // value
        //
        if (n.name () == "value" && n.namespace_ ().empty ())
        {
          if (!value_.present ())
          {
            this->value_.set (ValueTraits::create (i, f, this));
            continue;
          }
        }

        // pointA
        //
        if (n.name () == "pointA" && n.namespace_ ().empty ())
        {
          if (!pointA_.present ())
          {
            this->pointA_.set (PointATraits::create (i, f, this));
            continue;
          }
        }

        // pointB
        //
        if (n.name () == "pointB" && n.namespace_ ().empty ())
        {
          if (!pointB_.present ())
          {
            this->pointB_.set (PointBTraits::create (i, f, this));
            continue;
          }
        }

        // entityA
        //
        if (n.name () == "entityA" && n.namespace_ ().empty ())
        {
          if (!entityA_.present ())
          {
            this->entityA_.set (EntityATraits::create (i, f, this));
            continue;
          }
        }

        // entityB
        //
        if (n.name () == "entityB" && n.namespace_ ().empty ())
        {
          if (!entityB_.present ())
          {
            this->entityB_.set (EntityBTraits::create (i, f, this));
            continue;
          }
        }

        // entityC
        //
        if (n.name () == "entityC" && n.namespace_ ().empty ())
        {
          if (!entityC_.present ())
          {
            this->entityC_.set (EntityCTraits::create (i, f, this));
            continue;
          }
        }

        // entityD
        //
        if (n.name () == "entityD" && n.namespace_ ().empty ())
        {
          if (!entityD_.present ())
          {
            this->entityD_.set (EntityDTraits::create (i, f, this));
            continue;
          }
        }

        // other
        //
        if (n.name () == "other" && n.namespace_ ().empty ())
        {
          if (!other_.present ())
          {
            this->other_.set (OtherTraits::create (i, f, this));
            continue;
          }
        }

        // other2
        //
        if (n.name () == "other2" && n.namespace_ ().empty ())
        {
          if (!other2_.present ())
          {
            this->other2_.set (Other2Traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!handle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "handle",
          "");
      }

      if (!group_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "group",
          "");
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "type",
          "");
      }

      if (!workPlane_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "workPlane",
          "");
      }

      if (!value_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "value",
          "");
      }

      if (!pointA_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "pointA",
          "");
      }

      if (!pointB_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "pointB",
          "");
      }

      if (!entityA_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "entityA",
          "");
      }

      if (!entityB_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "entityB",
          "");
      }

      if (!entityC_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "entityC",
          "");
      }

      if (!entityD_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "entityD",
          "");
      }

      if (!other_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "other",
          "");
      }

      if (!other2_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "other2",
          "");
      }
    }

    SSConstraint* SSConstraint::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SSConstraint (*this, f, c);
    }

    SSConstraint& SSConstraint::
    operator= (const SSConstraint& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->handle_ = x.handle_;
        this->group_ = x.group_;
        this->type_ = x.type_;
        this->workPlane_ = x.workPlane_;
        this->value_ = x.value_;
        this->pointA_ = x.pointA_;
        this->pointB_ = x.pointB_;
        this->entityA_ = x.entityA_;
        this->entityB_ = x.entityB_;
        this->entityC_ = x.entityC_;
        this->entityD_ = x.entityD_;
        this->other_ = x.other_;
        this->other2_ = x.other2_;
      }

      return *this;
    }

    SSConstraint::
    ~SSConstraint ()
    {
    }

    // SSConstraints
    //

    SSConstraints::
    SSConstraints ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    SSConstraints::
    SSConstraints (const SSConstraints& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    SSConstraints::
    SSConstraints (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SSConstraints::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    SSConstraints* SSConstraints::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SSConstraints (*this, f, c);
    }

    SSConstraints& SSConstraints::
    operator= (const SSConstraints& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    SSConstraints::
    ~SSConstraints ()
    {
    }

    // Solver
    //

    Solver::
    Solver (const ParametersType& parameters,
            const EntitiesType& entities,
            const ConstraintsType& constraints,
            const NextParameterHandleType& nextParameterHandle,
            const NextEntityHandleType& nextEntityHandle,
            const NextConstraintHandleType& nextConstraintHandle,
            const CurrentGroupType& currentGroup,
            const CurrentWorkPlaneType& currentWorkPlane,
            const CurrentXAxisType& currentXAxis,
            const CurrentYAxisType& currentYAxis)
    : ::xml_schema::Type (),
      parameters_ (parameters, this),
      entities_ (entities, this),
      constraints_ (constraints, this),
      nextParameterHandle_ (nextParameterHandle, this),
      nextEntityHandle_ (nextEntityHandle, this),
      nextConstraintHandle_ (nextConstraintHandle, this),
      currentGroup_ (currentGroup, this),
      currentWorkPlane_ (currentWorkPlane, this),
      currentXAxis_ (currentXAxis, this),
      currentYAxis_ (currentYAxis, this)
    {
    }

    Solver::
    Solver (::std::unique_ptr< ParametersType > parameters,
            ::std::unique_ptr< EntitiesType > entities,
            ::std::unique_ptr< ConstraintsType > constraints,
            const NextParameterHandleType& nextParameterHandle,
            const NextEntityHandleType& nextEntityHandle,
            const NextConstraintHandleType& nextConstraintHandle,
            const CurrentGroupType& currentGroup,
            const CurrentWorkPlaneType& currentWorkPlane,
            const CurrentXAxisType& currentXAxis,
            const CurrentYAxisType& currentYAxis)
    : ::xml_schema::Type (),
      parameters_ (std::move (parameters), this),
      entities_ (std::move (entities), this),
      constraints_ (std::move (constraints), this),
      nextParameterHandle_ (nextParameterHandle, this),
      nextEntityHandle_ (nextEntityHandle, this),
      nextConstraintHandle_ (nextConstraintHandle, this),
      currentGroup_ (currentGroup, this),
      currentWorkPlane_ (currentWorkPlane, this),
      currentXAxis_ (currentXAxis, this),
      currentYAxis_ (currentYAxis, this)
    {
    }

    Solver::
    Solver (const Solver& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      parameters_ (x.parameters_, f, this),
      entities_ (x.entities_, f, this),
      constraints_ (x.constraints_, f, this),
      nextParameterHandle_ (x.nextParameterHandle_, f, this),
      nextEntityHandle_ (x.nextEntityHandle_, f, this),
      nextConstraintHandle_ (x.nextConstraintHandle_, f, this),
      currentGroup_ (x.currentGroup_, f, this),
      currentWorkPlane_ (x.currentWorkPlane_, f, this),
      currentXAxis_ (x.currentXAxis_, f, this),
      currentYAxis_ (x.currentYAxis_, f, this)
    {
    }

    Solver::
    Solver (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      parameters_ (this),
      entities_ (this),
      constraints_ (this),
      nextParameterHandle_ (this),
      nextEntityHandle_ (this),
      nextConstraintHandle_ (this),
      currentGroup_ (this),
      currentWorkPlane_ (this),
      currentXAxis_ (this),
      currentYAxis_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Solver::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // parameters
        //
        if (n.name () == "parameters" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ParametersType > r (
            ParametersTraits::create (i, f, this));

          if (!parameters_.present ())
          {
            this->parameters_.set (::std::move (r));
            continue;
          }
        }

        // entities
        //
        if (n.name () == "entities" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< EntitiesType > r (
            EntitiesTraits::create (i, f, this));

          if (!entities_.present ())
          {
            this->entities_.set (::std::move (r));
            continue;
          }
        }

        // constraints
        //
        if (n.name () == "constraints" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ConstraintsType > r (
            ConstraintsTraits::create (i, f, this));

          if (!constraints_.present ())
          {
            this->constraints_.set (::std::move (r));
            continue;
          }
        }

        // nextParameterHandle
        //
        if (n.name () == "nextParameterHandle" && n.namespace_ ().empty ())
        {
          if (!nextParameterHandle_.present ())
          {
            this->nextParameterHandle_.set (NextParameterHandleTraits::create (i, f, this));
            continue;
          }
        }

        // nextEntityHandle
        //
        if (n.name () == "nextEntityHandle" && n.namespace_ ().empty ())
        {
          if (!nextEntityHandle_.present ())
          {
            this->nextEntityHandle_.set (NextEntityHandleTraits::create (i, f, this));
            continue;
          }
        }

        // nextConstraintHandle
        //
        if (n.name () == "nextConstraintHandle" && n.namespace_ ().empty ())
        {
          if (!nextConstraintHandle_.present ())
          {
            this->nextConstraintHandle_.set (NextConstraintHandleTraits::create (i, f, this));
            continue;
          }
        }

        // currentGroup
        //
        if (n.name () == "currentGroup" && n.namespace_ ().empty ())
        {
          if (!currentGroup_.present ())
          {
            this->currentGroup_.set (CurrentGroupTraits::create (i, f, this));
            continue;
          }
        }

        // currentWorkPlane
        //
        if (n.name () == "currentWorkPlane" && n.namespace_ ().empty ())
        {
          if (!currentWorkPlane_.present ())
          {
            this->currentWorkPlane_.set (CurrentWorkPlaneTraits::create (i, f, this));
            continue;
          }
        }

        // currentXAxis
        //
        if (n.name () == "currentXAxis" && n.namespace_ ().empty ())
        {
          if (!currentXAxis_.present ())
          {
            this->currentXAxis_.set (CurrentXAxisTraits::create (i, f, this));
            continue;
          }
        }

        // currentYAxis
        //
        if (n.name () == "currentYAxis" && n.namespace_ ().empty ())
        {
          if (!currentYAxis_.present ())
          {
            this->currentYAxis_.set (CurrentYAxisTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!parameters_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "parameters",
          "");
      }

      if (!entities_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "entities",
          "");
      }

      if (!constraints_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "constraints",
          "");
      }

      if (!nextParameterHandle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "nextParameterHandle",
          "");
      }

      if (!nextEntityHandle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "nextEntityHandle",
          "");
      }

      if (!nextConstraintHandle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "nextConstraintHandle",
          "");
      }

      if (!currentGroup_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "currentGroup",
          "");
      }

      if (!currentWorkPlane_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "currentWorkPlane",
          "");
      }

      if (!currentXAxis_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "currentXAxis",
          "");
      }

      if (!currentYAxis_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "currentYAxis",
          "");
      }
    }

    Solver* Solver::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Solver (*this, f, c);
    }

    Solver& Solver::
    operator= (const Solver& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->parameters_ = x.parameters_;
        this->entities_ = x.entities_;
        this->constraints_ = x.constraints_;
        this->nextParameterHandle_ = x.nextParameterHandle_;
        this->nextEntityHandle_ = x.nextEntityHandle_;
        this->nextConstraintHandle_ = x.nextConstraintHandle_;
        this->currentGroup_ = x.currentGroup_;
        this->currentWorkPlane_ = x.currentWorkPlane_;
        this->currentXAxis_ = x.currentXAxis_;
        this->currentYAxis_ = x.currentYAxis_;
      }

      return *this;
    }

    Solver::
    ~Solver ()
    {
    }

    // VisualMapRecord
    //

    VisualMapRecord::
    VisualMapRecord (const HandleType& handle,
                     const IdType& id,
                     const LocationType& location,
                     const ConstructionType& construction)
    : ::xml_schema::Type (),
      handle_ (handle, this),
      id_ (id, this),
      location_ (location, this),
      construction_ (construction, this)
    {
    }

    VisualMapRecord::
    VisualMapRecord (const HandleType& handle,
                     const IdType& id,
                     ::std::unique_ptr< LocationType > location,
                     const ConstructionType& construction)
    : ::xml_schema::Type (),
      handle_ (handle, this),
      id_ (id, this),
      location_ (std::move (location), this),
      construction_ (construction, this)
    {
    }

    VisualMapRecord::
    VisualMapRecord (const VisualMapRecord& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      handle_ (x.handle_, f, this),
      id_ (x.id_, f, this),
      location_ (x.location_, f, this),
      construction_ (x.construction_, f, this)
    {
    }

    VisualMapRecord::
    VisualMapRecord (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      handle_ (this),
      id_ (this),
      location_ (this),
      construction_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void VisualMapRecord::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // handle
        //
        if (n.name () == "handle" && n.namespace_ ().empty ())
        {
          if (!handle_.present ())
          {
            this->handle_.set (HandleTraits::create (i, f, this));
            continue;
          }
        }

        // id
        //
        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IdType > r (
            IdTraits::create (i, f, this));

          if (!id_.present ())
          {
            this->id_.set (::std::move (r));
            continue;
          }
        }

        // location
        //
        if (n.name () == "location" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< LocationType > r (
            LocationTraits::create (i, f, this));

          if (!location_.present ())
          {
            this->location_.set (::std::move (r));
            continue;
          }
        }

        // construction
        //
        if (n.name () == "construction" && n.namespace_ ().empty ())
        {
          if (!construction_.present ())
          {
            this->construction_.set (ConstructionTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!handle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "handle",
          "");
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "id",
          "");
      }

      if (!location_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "location",
          "");
      }

      if (!construction_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "construction",
          "");
      }
    }

    VisualMapRecord* VisualMapRecord::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class VisualMapRecord (*this, f, c);
    }

    VisualMapRecord& VisualMapRecord::
    operator= (const VisualMapRecord& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->handle_ = x.handle_;
        this->id_ = x.id_;
        this->location_ = x.location_;
        this->construction_ = x.construction_;
      }

      return *this;
    }

    VisualMapRecord::
    ~VisualMapRecord ()
    {
    }

    // VisualMap
    //

    VisualMap::
    VisualMap ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    VisualMap::
    VisualMap (const VisualMap& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    VisualMap::
    VisualMap (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void VisualMap::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    VisualMap* VisualMap::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class VisualMap (*this, f, c);
    }

    VisualMap& VisualMap::
    operator= (const VisualMap& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    VisualMap::
    ~VisualMap ()
    {
    }

    // Visual
    //

    Visual::
    Visual (const AutoSizeType& autoSize,
            const SizeType& size,
            const EntityMapType& entityMap,
            const ConstraintMapType& constraintMap)
    : ::xml_schema::Type (),
      autoSize_ (autoSize, this),
      size_ (size, this),
      entityMap_ (entityMap, this),
      constraintMap_ (constraintMap, this)
    {
    }

    Visual::
    Visual (const AutoSizeType& autoSize,
            const SizeType& size,
            ::std::unique_ptr< EntityMapType > entityMap,
            ::std::unique_ptr< ConstraintMapType > constraintMap)
    : ::xml_schema::Type (),
      autoSize_ (autoSize, this),
      size_ (size, this),
      entityMap_ (std::move (entityMap), this),
      constraintMap_ (std::move (constraintMap), this)
    {
    }

    Visual::
    Visual (const Visual& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      autoSize_ (x.autoSize_, f, this),
      size_ (x.size_, f, this),
      entityMap_ (x.entityMap_, f, this),
      constraintMap_ (x.constraintMap_, f, this)
    {
    }

    Visual::
    Visual (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      autoSize_ (this),
      size_ (this),
      entityMap_ (this),
      constraintMap_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Visual::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // autoSize
        //
        if (n.name () == "autoSize" && n.namespace_ ().empty ())
        {
          if (!autoSize_.present ())
          {
            this->autoSize_.set (AutoSizeTraits::create (i, f, this));
            continue;
          }
        }

        // size
        //
        if (n.name () == "size" && n.namespace_ ().empty ())
        {
          if (!size_.present ())
          {
            this->size_.set (SizeTraits::create (i, f, this));
            continue;
          }
        }

        // entityMap
        //
        if (n.name () == "entityMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< EntityMapType > r (
            EntityMapTraits::create (i, f, this));

          if (!entityMap_.present ())
          {
            this->entityMap_.set (::std::move (r));
            continue;
          }
        }

        // constraintMap
        //
        if (n.name () == "constraintMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ConstraintMapType > r (
            ConstraintMapTraits::create (i, f, this));

          if (!constraintMap_.present ())
          {
            this->constraintMap_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!autoSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "autoSize",
          "");
      }

      if (!size_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "size",
          "");
      }

      if (!entityMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "entityMap",
          "");
      }

      if (!constraintMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "constraintMap",
          "");
      }
    }

    Visual* Visual::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Visual (*this, f, c);
    }

    Visual& Visual::
    operator= (const Visual& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->autoSize_ = x.autoSize_;
        this->size_ = x.size_;
        this->entityMap_ = x.entityMap_;
        this->constraintMap_ = x.constraintMap_;
      }

      return *this;
    }

    Visual::
    ~Visual ()
    {
    }

    // WireIds
    //

    WireIds::
    WireIds ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    WireIds::
    WireIds (const WireIds& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    WireIds::
    WireIds (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WireIds::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    WireIds* WireIds::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class WireIds (*this, f, c);
    }

    WireIds& WireIds::
    operator= (const WireIds& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    WireIds::
    ~WireIds ()
    {
    }

    // HandleParameterPair
    //

    HandleParameterPair::
    HandleParameterPair (const HandleType& handle,
                         const ParameterType& parameter)
    : ::xml_schema::Type (),
      handle_ (handle, this),
      parameter_ (parameter, this)
    {
    }

    HandleParameterPair::
    HandleParameterPair (const HandleType& handle,
                         ::std::unique_ptr< ParameterType > parameter)
    : ::xml_schema::Type (),
      handle_ (handle, this),
      parameter_ (std::move (parameter), this)
    {
    }

    HandleParameterPair::
    HandleParameterPair (const HandleParameterPair& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      handle_ (x.handle_, f, this),
      parameter_ (x.parameter_, f, this)
    {
    }

    HandleParameterPair::
    HandleParameterPair (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      handle_ (this),
      parameter_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void HandleParameterPair::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // handle
        //
        if (n.name () == "handle" && n.namespace_ ().empty ())
        {
          if (!handle_.present ())
          {
            this->handle_.set (HandleTraits::create (i, f, this));
            continue;
          }
        }

        // parameter
        //
        if (n.name () == "parameter" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ParameterType > r (
            ParameterTraits::create (i, f, this));

          if (!parameter_.present ())
          {
            this->parameter_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!handle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "handle",
          "");
      }

      if (!parameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "parameter",
          "");
      }
    }

    HandleParameterPair* HandleParameterPair::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class HandleParameterPair (*this, f, c);
    }

    HandleParameterPair& HandleParameterPair::
    operator= (const HandleParameterPair& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->handle_ = x.handle_;
        this->parameter_ = x.parameter_;
      }

      return *this;
    }

    HandleParameterPair::
    ~HandleParameterPair ()
    {
    }

    // HandleParameterPairs
    //

    HandleParameterPairs::
    HandleParameterPairs ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    HandleParameterPairs::
    HandleParameterPairs (const HandleParameterPairs& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    HandleParameterPairs::
    HandleParameterPairs (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void HandleParameterPairs::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    HandleParameterPairs* HandleParameterPairs::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class HandleParameterPairs (*this, f, c);
    }

    HandleParameterPairs& HandleParameterPairs::
    operator= (const HandleParameterPairs& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    HandleParameterPairs::
    ~HandleParameterPairs ()
    {
    }

    // FeatureSketch
    //

    FeatureSketch::
    FeatureSketch (const FeatureBaseType& featureBase,
                   const SolverType& solver,
                   const VisualType& visual,
                   const CsysType& csys,
                   const CsysDraggerType& csysDragger,
                   const WireIdsType& wireIds,
                   const HandleParameterPairsType& handleParameterPairs)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      solver_ (solver, this),
      visual_ (visual, this),
      csys_ (csys, this),
      csysDragger_ (csysDragger, this),
      wireIds_ (wireIds, this),
      handleParameterPairs_ (handleParameterPairs, this)
    {
    }

    FeatureSketch::
    FeatureSketch (::std::unique_ptr< FeatureBaseType > featureBase,
                   ::std::unique_ptr< SolverType > solver,
                   ::std::unique_ptr< VisualType > visual,
                   ::std::unique_ptr< CsysType > csys,
                   ::std::unique_ptr< CsysDraggerType > csysDragger,
                   ::std::unique_ptr< WireIdsType > wireIds,
                   ::std::unique_ptr< HandleParameterPairsType > handleParameterPairs)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      solver_ (std::move (solver), this),
      visual_ (std::move (visual), this),
      csys_ (std::move (csys), this),
      csysDragger_ (std::move (csysDragger), this),
      wireIds_ (std::move (wireIds), this),
      handleParameterPairs_ (std::move (handleParameterPairs), this)
    {
    }

    FeatureSketch::
    FeatureSketch (const FeatureSketch& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      solver_ (x.solver_, f, this),
      visual_ (x.visual_, f, this),
      csys_ (x.csys_, f, this),
      csysDragger_ (x.csysDragger_, f, this),
      wireIds_ (x.wireIds_, f, this),
      handleParameterPairs_ (x.handleParameterPairs_, f, this)
    {
    }

    FeatureSketch::
    FeatureSketch (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      solver_ (this),
      visual_ (this),
      csys_ (this),
      csysDragger_ (this),
      wireIds_ (this),
      handleParameterPairs_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureSketch::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // solver
        //
        if (n.name () == "solver" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< SolverType > r (
            SolverTraits::create (i, f, this));

          if (!solver_.present ())
          {
            this->solver_.set (::std::move (r));
            continue;
          }
        }

        // visual
        //
        if (n.name () == "visual" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< VisualType > r (
            VisualTraits::create (i, f, this));

          if (!visual_.present ())
          {
            this->visual_.set (::std::move (r));
            continue;
          }
        }

        // csys
        //
        if (n.name () == "csys" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CsysType > r (
            CsysTraits::create (i, f, this));

          if (!csys_.present ())
          {
            this->csys_.set (::std::move (r));
            continue;
          }
        }

        // csysDragger
        //
        if (n.name () == "csysDragger" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CsysDraggerType > r (
            CsysDraggerTraits::create (i, f, this));

          if (!csysDragger_.present ())
          {
            this->csysDragger_.set (::std::move (r));
            continue;
          }
        }

        // wireIds
        //
        if (n.name () == "wireIds" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< WireIdsType > r (
            WireIdsTraits::create (i, f, this));

          if (!wireIds_.present ())
          {
            this->wireIds_.set (::std::move (r));
            continue;
          }
        }

        // handleParameterPairs
        //
        if (n.name () == "handleParameterPairs" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< HandleParameterPairsType > r (
            HandleParameterPairsTraits::create (i, f, this));

          if (!handleParameterPairs_.present ())
          {
            this->handleParameterPairs_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!solver_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "solver",
          "");
      }

      if (!visual_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "visual",
          "");
      }

      if (!csys_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "csys",
          "");
      }

      if (!csysDragger_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "csysDragger",
          "");
      }

      if (!wireIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "wireIds",
          "");
      }

      if (!handleParameterPairs_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "handleParameterPairs",
          "");
      }
    }

    FeatureSketch* FeatureSketch::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureSketch (*this, f, c);
    }

    FeatureSketch& FeatureSketch::
    operator= (const FeatureSketch& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->solver_ = x.solver_;
        this->visual_ = x.visual_;
        this->csys_ = x.csys_;
        this->csysDragger_ = x.csysDragger_;
        this->wireIds_ = x.wireIds_;
        this->handleParameterPairs_ = x.handleParameterPairs_;
      }

      return *this;
    }

    FeatureSketch::
    ~FeatureSketch ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (const ::std::string& u,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSketch > (
        ::prj::srl::sketch (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (const ::std::string& u,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSketch > (
        ::prj::srl::sketch (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSketch > (
        ::prj::srl::sketch (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::std::istream& is,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::sketch (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::std::istream& is,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::sketch (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::sketch (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::sketch (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::sketch (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::sketch (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::xercesc::InputSource& i,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSketch > (
        ::prj::srl::sketch (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::xercesc::InputSource& i,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSketch > (
        ::prj::srl::sketch (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureSketch > (
        ::prj::srl::sketch (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (const ::xercesc::DOMDocument& doc,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureSketch > (
          ::prj::srl::sketch (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "sketch" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureSketch > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureSketch, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "sketch",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureSketch >
    sketch (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "sketch" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureSketch > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureSketch, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "sketch",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const SSParameter& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // handle
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "handle",
            e));

        s << i.handle ();
      }

      // group
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "group",
            e));

        s << i.group ();
      }

      // value
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "value",
            e));

        s << ::xml_schema::AsDouble(i.value ());
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SSParameters& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (SSParameters::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SS4Handles& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (SS4Handles::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SSEntity& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // handle
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "handle",
            e));

        s << i.handle ();
      }

      // group
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "group",
            e));

        s << i.group ();
      }

      // type
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "type",
            e));

        s << i.type ();
      }

      // workPlane
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "workPlane",
            e));

        s << i.workPlane ();
      }

      // points
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "points",
            e));

        s << i.points ();
      }

      // normal
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "normal",
            e));

        s << i.normal ();
      }

      // distance
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "distance",
            e));

        s << i.distance ();
      }

      // parameters
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "parameters",
            e));

        s << i.parameters ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SSEntities& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (SSEntities::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SSConstraint& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // handle
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "handle",
            e));

        s << i.handle ();
      }

      // group
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "group",
            e));

        s << i.group ();
      }

      // type
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "type",
            e));

        s << i.type ();
      }

      // workPlane
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "workPlane",
            e));

        s << i.workPlane ();
      }

      // value
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "value",
            e));

        s << ::xml_schema::AsDouble(i.value ());
      }

      // pointA
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pointA",
            e));

        s << i.pointA ();
      }

      // pointB
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pointB",
            e));

        s << i.pointB ();
      }

      // entityA
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "entityA",
            e));

        s << i.entityA ();
      }

      // entityB
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "entityB",
            e));

        s << i.entityB ();
      }

      // entityC
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "entityC",
            e));

        s << i.entityC ();
      }

      // entityD
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "entityD",
            e));

        s << i.entityD ();
      }

      // other
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "other",
            e));

        s << i.other ();
      }

      // other2
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "other2",
            e));

        s << i.other2 ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SSConstraints& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (SSConstraints::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Solver& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // parameters
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "parameters",
            e));

        s << i.parameters ();
      }

      // entities
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "entities",
            e));

        s << i.entities ();
      }

      // constraints
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "constraints",
            e));

        s << i.constraints ();
      }

      // nextParameterHandle
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "nextParameterHandle",
            e));

        s << i.nextParameterHandle ();
      }

      // nextEntityHandle
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "nextEntityHandle",
            e));

        s << i.nextEntityHandle ();
      }

      // nextConstraintHandle
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "nextConstraintHandle",
            e));

        s << i.nextConstraintHandle ();
      }

      // currentGroup
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "currentGroup",
            e));

        s << i.currentGroup ();
      }

      // currentWorkPlane
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "currentWorkPlane",
            e));

        s << i.currentWorkPlane ();
      }

      // currentXAxis
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "currentXAxis",
            e));

        s << i.currentXAxis ();
      }

      // currentYAxis
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "currentYAxis",
            e));

        s << i.currentYAxis ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const VisualMapRecord& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // handle
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "handle",
            e));

        s << i.handle ();
      }

      // id
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "id",
            e));

        s << i.id ();
      }

      // location
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "location",
            e));

        s << i.location ();
      }

      // construction
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "construction",
            e));

        s << i.construction ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const VisualMap& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (VisualMap::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Visual& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // autoSize
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "autoSize",
            e));

        s << i.autoSize ();
      }

      // size
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "size",
            e));

        s << ::xml_schema::AsDouble(i.size ());
      }

      // entityMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "entityMap",
            e));

        s << i.entityMap ();
      }

      // constraintMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "constraintMap",
            e));

        s << i.constraintMap ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const WireIds& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (WireIds::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const HandleParameterPair& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // handle
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "handle",
            e));

        s << i.handle ();
      }

      // parameter
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "parameter",
            e));

        s << i.parameter ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const HandleParameterPairs& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (HandleParameterPairs::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FeatureSketch& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // solver
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "solver",
            e));

        s << i.solver ();
      }

      // visual
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "visual",
            e));

        s << i.visual ();
      }

      // csys
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "csys",
            e));

        s << i.csys ();
      }

      // csysDragger
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "csysDragger",
            e));

        s << i.csysDragger ();
      }

      // wireIds
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "wireIds",
            e));

        s << i.wireIds ();
      }

      // handleParameterPairs
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "handleParameterPairs",
            e));

        s << i.handleParameterPairs ();
      }
    }

    void
    sketch (::std::ostream& o,
            const ::prj::srl::FeatureSketch& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::sketch (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    sketch (::std::ostream& o,
            const ::prj::srl::FeatureSketch& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::sketch (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sketch (::std::ostream& o,
            const ::prj::srl::FeatureSketch& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::sketch (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sketch (::xercesc::XMLFormatTarget& t,
            const ::prj::srl::FeatureSketch& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::sketch (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    sketch (::xercesc::XMLFormatTarget& t,
            const ::prj::srl::FeatureSketch& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::sketch (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sketch (::xercesc::XMLFormatTarget& t,
            const ::prj::srl::FeatureSketch& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::sketch (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sketch (::xercesc::DOMDocument& d,
            const ::prj::srl::FeatureSketch& s,
            ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "sketch" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "sketch",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    sketch (const ::prj::srl::FeatureSketch& s,
            const ::xml_schema::NamespaceInfomap& m,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "sketch",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::sketch (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

