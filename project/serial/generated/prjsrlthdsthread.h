// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_THDS_PRJSRLTHDSTHREAD_H
#define PRJ_SRL_THDS_PRJSRLTHDSTHREAD_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace thds
    {
      class Thread;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptseershape.h"

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace thds
    {
      class Thread: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // csysType
        //
        typedef ::prj::srl::spt::Parameter CsysTypeType;
        typedef ::xsd::cxx::tree::traits< CsysTypeType, char > CsysTypeTraits;

        const CsysTypeType&
        csysType () const;

        CsysTypeType&
        csysType ();

        void
        csysType (const CsysTypeType& x);

        void
        csysType (::std::unique_ptr< CsysTypeType > p);

        // diameter
        //
        typedef ::prj::srl::spt::Parameter DiameterType;
        typedef ::xsd::cxx::tree::traits< DiameterType, char > DiameterTraits;

        const DiameterType&
        diameter () const;

        DiameterType&
        diameter ();

        void
        diameter (const DiameterType& x);

        void
        diameter (::std::unique_ptr< DiameterType > p);

        // pitch
        //
        typedef ::prj::srl::spt::Parameter PitchType;
        typedef ::xsd::cxx::tree::traits< PitchType, char > PitchTraits;

        const PitchType&
        pitch () const;

        PitchType&
        pitch ();

        void
        pitch (const PitchType& x);

        void
        pitch (::std::unique_ptr< PitchType > p);

        // length
        //
        typedef ::prj::srl::spt::Parameter LengthType;
        typedef ::xsd::cxx::tree::traits< LengthType, char > LengthTraits;

        const LengthType&
        length () const;

        LengthType&
        length ();

        void
        length (const LengthType& x);

        void
        length (::std::unique_ptr< LengthType > p);

        // angle
        //
        typedef ::prj::srl::spt::Parameter AngleType;
        typedef ::xsd::cxx::tree::traits< AngleType, char > AngleTraits;

        const AngleType&
        angle () const;

        AngleType&
        angle ();

        void
        angle (const AngleType& x);

        void
        angle (::std::unique_ptr< AngleType > p);

        // internal
        //
        typedef ::prj::srl::spt::Parameter InternalType;
        typedef ::xsd::cxx::tree::traits< InternalType, char > InternalTraits;

        const InternalType&
        internal () const;

        InternalType&
        internal ();

        void
        internal (const InternalType& x);

        void
        internal (::std::unique_ptr< InternalType > p);

        // fake
        //
        typedef ::prj::srl::spt::Parameter FakeType;
        typedef ::xsd::cxx::tree::traits< FakeType, char > FakeTraits;

        const FakeType&
        fake () const;

        FakeType&
        fake ();

        void
        fake (const FakeType& x);

        void
        fake (::std::unique_ptr< FakeType > p);

        // leftHanded
        //
        typedef ::prj::srl::spt::Parameter LeftHandedType;
        typedef ::xsd::cxx::tree::traits< LeftHandedType, char > LeftHandedTraits;

        const LeftHandedType&
        leftHanded () const;

        LeftHandedType&
        leftHanded ();

        void
        leftHanded (const LeftHandedType& x);

        void
        leftHanded (::std::unique_ptr< LeftHandedType > p);

        // csys
        //
        typedef ::prj::srl::spt::Parameter CsysType;
        typedef ::xsd::cxx::tree::traits< CsysType, char > CsysTraits;

        const CsysType&
        csys () const;

        CsysType&
        csys ();

        void
        csys (const CsysType& x);

        void
        csys (::std::unique_ptr< CsysType > p);

        // csysLinked
        //
        typedef ::prj::srl::spt::Parameter CsysLinkedType;
        typedef ::xsd::cxx::tree::traits< CsysLinkedType, char > CsysLinkedTraits;

        const CsysLinkedType&
        csysLinked () const;

        CsysLinkedType&
        csysLinked ();

        void
        csysLinked (const CsysLinkedType& x);

        void
        csysLinked (::std::unique_ptr< CsysLinkedType > p);

        // csysDragger
        //
        typedef ::prj::srl::spt::CSysDragger CsysDraggerType;
        typedef ::xsd::cxx::tree::traits< CsysDraggerType, char > CsysDraggerTraits;

        const CsysDraggerType&
        csysDragger () const;

        CsysDraggerType&
        csysDragger ();

        void
        csysDragger (const CsysDraggerType& x);

        void
        csysDragger (::std::unique_ptr< CsysDraggerType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // diameterLabel
        //
        typedef ::prj::srl::spt::PLabel DiameterLabelType;
        typedef ::xsd::cxx::tree::traits< DiameterLabelType, char > DiameterLabelTraits;

        const DiameterLabelType&
        diameterLabel () const;

        DiameterLabelType&
        diameterLabel ();

        void
        diameterLabel (const DiameterLabelType& x);

        void
        diameterLabel (::std::unique_ptr< DiameterLabelType > p);

        // pitchLabel
        //
        typedef ::prj::srl::spt::PLabel PitchLabelType;
        typedef ::xsd::cxx::tree::traits< PitchLabelType, char > PitchLabelTraits;

        const PitchLabelType&
        pitchLabel () const;

        PitchLabelType&
        pitchLabel ();

        void
        pitchLabel (const PitchLabelType& x);

        void
        pitchLabel (::std::unique_ptr< PitchLabelType > p);

        // lengthLabel
        //
        typedef ::prj::srl::spt::PLabel LengthLabelType;
        typedef ::xsd::cxx::tree::traits< LengthLabelType, char > LengthLabelTraits;

        const LengthLabelType&
        lengthLabel () const;

        LengthLabelType&
        lengthLabel ();

        void
        lengthLabel (const LengthLabelType& x);

        void
        lengthLabel (::std::unique_ptr< LengthLabelType > p);

        // angleLabel
        //
        typedef ::prj::srl::spt::PLabel AngleLabelType;
        typedef ::xsd::cxx::tree::traits< AngleLabelType, char > AngleLabelTraits;

        const AngleLabelType&
        angleLabel () const;

        AngleLabelType&
        angleLabel ();

        void
        angleLabel (const AngleLabelType& x);

        void
        angleLabel (::std::unique_ptr< AngleLabelType > p);

        // internalLabel
        //
        typedef ::prj::srl::spt::PLabel InternalLabelType;
        typedef ::xsd::cxx::tree::traits< InternalLabelType, char > InternalLabelTraits;

        const InternalLabelType&
        internalLabel () const;

        InternalLabelType&
        internalLabel ();

        void
        internalLabel (const InternalLabelType& x);

        void
        internalLabel (::std::unique_ptr< InternalLabelType > p);

        // fakeLabel
        //
        typedef ::prj::srl::spt::PLabel FakeLabelType;
        typedef ::xsd::cxx::tree::traits< FakeLabelType, char > FakeLabelTraits;

        const FakeLabelType&
        fakeLabel () const;

        FakeLabelType&
        fakeLabel ();

        void
        fakeLabel (const FakeLabelType& x);

        void
        fakeLabel (::std::unique_ptr< FakeLabelType > p);

        // leftHandedLabel
        //
        typedef ::prj::srl::spt::PLabel LeftHandedLabelType;
        typedef ::xsd::cxx::tree::traits< LeftHandedLabelType, char > LeftHandedLabelTraits;

        const LeftHandedLabelType&
        leftHandedLabel () const;

        LeftHandedLabelType&
        leftHandedLabel ();

        void
        leftHandedLabel (const LeftHandedLabelType& x);

        void
        leftHandedLabel (::std::unique_ptr< LeftHandedLabelType > p);

        // solidId
        //
        typedef ::xml_schema::String SolidIdType;
        typedef ::xsd::cxx::tree::traits< SolidIdType, char > SolidIdTraits;

        const SolidIdType&
        solidId () const;

        SolidIdType&
        solidId ();

        void
        solidId (const SolidIdType& x);

        void
        solidId (::std::unique_ptr< SolidIdType > p);

        static const SolidIdType&
        solidId_default_value ();

        // ids
        //
        typedef ::xml_schema::String IdsType;
        typedef ::xsd::cxx::tree::sequence< IdsType > IdsSequence;
        typedef IdsSequence::iterator IdsIterator;
        typedef IdsSequence::const_iterator IdsConstIterator;
        typedef ::xsd::cxx::tree::traits< IdsType, char > IdsTraits;

        const IdsSequence&
        ids () const;

        IdsSequence&
        ids ();

        void
        ids (const IdsSequence& s);

        // Constructors.
        //
        Thread (const BaseType&,
                const CsysTypeType&,
                const DiameterType&,
                const PitchType&,
                const LengthType&,
                const AngleType&,
                const InternalType&,
                const FakeType&,
                const LeftHandedType&,
                const CsysType&,
                const CsysLinkedType&,
                const CsysDraggerType&,
                const SeerShapeType&,
                const DiameterLabelType&,
                const PitchLabelType&,
                const LengthLabelType&,
                const AngleLabelType&,
                const InternalLabelType&,
                const FakeLabelType&,
                const LeftHandedLabelType&,
                const SolidIdType&);

        Thread (::std::unique_ptr< BaseType >,
                ::std::unique_ptr< CsysTypeType >,
                ::std::unique_ptr< DiameterType >,
                ::std::unique_ptr< PitchType >,
                ::std::unique_ptr< LengthType >,
                ::std::unique_ptr< AngleType >,
                ::std::unique_ptr< InternalType >,
                ::std::unique_ptr< FakeType >,
                ::std::unique_ptr< LeftHandedType >,
                ::std::unique_ptr< CsysType >,
                ::std::unique_ptr< CsysLinkedType >,
                ::std::unique_ptr< CsysDraggerType >,
                ::std::unique_ptr< SeerShapeType >,
                ::std::unique_ptr< DiameterLabelType >,
                ::std::unique_ptr< PitchLabelType >,
                ::std::unique_ptr< LengthLabelType >,
                ::std::unique_ptr< AngleLabelType >,
                ::std::unique_ptr< InternalLabelType >,
                ::std::unique_ptr< FakeLabelType >,
                ::std::unique_ptr< LeftHandedLabelType >,
                const SolidIdType&);

        Thread (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        Thread (const Thread& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual Thread*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Thread&
        operator= (const Thread& x);

        virtual 
        ~Thread ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< CsysTypeType > csysType_;
        ::xsd::cxx::tree::one< DiameterType > diameter_;
        ::xsd::cxx::tree::one< PitchType > pitch_;
        ::xsd::cxx::tree::one< LengthType > length_;
        ::xsd::cxx::tree::one< AngleType > angle_;
        ::xsd::cxx::tree::one< InternalType > internal_;
        ::xsd::cxx::tree::one< FakeType > fake_;
        ::xsd::cxx::tree::one< LeftHandedType > leftHanded_;
        ::xsd::cxx::tree::one< CsysType > csys_;
        ::xsd::cxx::tree::one< CsysLinkedType > csysLinked_;
        ::xsd::cxx::tree::one< CsysDraggerType > csysDragger_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< DiameterLabelType > diameterLabel_;
        ::xsd::cxx::tree::one< PitchLabelType > pitchLabel_;
        ::xsd::cxx::tree::one< LengthLabelType > lengthLabel_;
        ::xsd::cxx::tree::one< AngleLabelType > angleLabel_;
        ::xsd::cxx::tree::one< InternalLabelType > internalLabel_;
        ::xsd::cxx::tree::one< FakeLabelType > fakeLabel_;
        ::xsd::cxx::tree::one< LeftHandedLabelType > leftHandedLabel_;
        ::xsd::cxx::tree::one< SolidIdType > solidId_;
        static const SolidIdType solidId_default_value_;
        IdsSequence ids_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace thds
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace thds
    {
      void
      operator<< (::xercesc::DOMElement&, const Thread&);

      // Serialize to std::ostream.
      //

      void
      thread (::std::ostream& os,
              const ::prj::srl::thds::Thread& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      thread (::std::ostream& os,
              const ::prj::srl::thds::Thread& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      thread (::std::ostream& os,
              const ::prj::srl::thds::Thread& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      thread (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::thds::Thread& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      thread (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::thds::Thread& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      thread (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::thds::Thread& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      thread (::xercesc::DOMDocument& d,
              const ::prj::srl::thds::Thread& x,
              ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      thread (const ::prj::srl::thds::Thread& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_THDS_PRJSRLTHDSTHREAD_H
