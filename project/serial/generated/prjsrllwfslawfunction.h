// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_LWFS_PRJSRLLWFSLAWFUNCTION_H
#define PRJ_SRL_LWFS_PRJSRLLWFSLAWFUNCTION_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace lwfs
    {
      class Data;
      class Cue;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

namespace prj
{
  namespace srl
  {
    namespace lwfs
    {
      class Data: public ::xml_schema::Type
      {
        public:
        // subType
        //
        typedef ::xml_schema::Int SubTypeType;
        typedef ::xsd::cxx::tree::traits< SubTypeType, char > SubTypeTraits;

        const SubTypeType&
        subType () const;

        SubTypeType&
        subType ();

        void
        subType (const SubTypeType& x);

        // internalParameters
        //
        typedef ::prj::srl::spt::Parameter InternalParametersType;
        typedef ::xsd::cxx::tree::sequence< InternalParametersType > InternalParametersSequence;
        typedef InternalParametersSequence::iterator InternalParametersIterator;
        typedef InternalParametersSequence::const_iterator InternalParametersConstIterator;
        typedef ::xsd::cxx::tree::traits< InternalParametersType, char > InternalParametersTraits;

        const InternalParametersSequence&
        internalParameters () const;

        InternalParametersSequence&
        internalParameters ();

        void
        internalParameters (const InternalParametersSequence& s);

        // Constructors.
        //
        Data (const SubTypeType&);

        Data (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        Data (const Data& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        virtual Data*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Data&
        operator= (const Data& x);

        virtual 
        ~Data ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< SubTypeType > subType_;
        InternalParametersSequence internalParameters_;
      };

      class Cue: public ::xml_schema::Type
      {
        public:
        // type
        //
        typedef ::xml_schema::Int TypeType;
        typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

        const TypeType&
        type () const;

        TypeType&
        type ();

        void
        type (const TypeType& x);

        // boundaries
        //
        typedef ::prj::srl::spt::Parameter BoundariesType;
        typedef ::xsd::cxx::tree::sequence< BoundariesType > BoundariesSequence;
        typedef BoundariesSequence::iterator BoundariesIterator;
        typedef BoundariesSequence::const_iterator BoundariesConstIterator;
        typedef ::xsd::cxx::tree::traits< BoundariesType, char > BoundariesTraits;

        const BoundariesSequence&
        boundaries () const;

        BoundariesSequence&
        boundaries ();

        void
        boundaries (const BoundariesSequence& s);

        // datas
        //
        typedef ::prj::srl::lwfs::Data DatasType;
        typedef ::xsd::cxx::tree::sequence< DatasType > DatasSequence;
        typedef DatasSequence::iterator DatasIterator;
        typedef DatasSequence::const_iterator DatasConstIterator;
        typedef ::xsd::cxx::tree::traits< DatasType, char > DatasTraits;

        const DatasSequence&
        datas () const;

        DatasSequence&
        datas ();

        void
        datas (const DatasSequence& s);

        // periodic
        //
        typedef ::xml_schema::Boolean PeriodicType;
        typedef ::xsd::cxx::tree::traits< PeriodicType, char > PeriodicTraits;

        const PeriodicType&
        periodic () const;

        PeriodicType&
        periodic ();

        void
        periodic (const PeriodicType& x);

        // Constructors.
        //
        Cue (const TypeType&,
             const PeriodicType&);

        Cue (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

        Cue (const Cue& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

        virtual Cue*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Cue&
        operator= (const Cue& x);

        virtual 
        ~Cue ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< TypeType > type_;
        BoundariesSequence boundaries_;
        DatasSequence datas_;
        ::xsd::cxx::tree::one< PeriodicType > periodic_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace lwfs
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace lwfs
    {
      void
      operator<< (::xercesc::DOMElement&, const Data&);

      void
      operator<< (::xercesc::DOMElement&, const Cue&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_LWFS_PRJSRLLWFSLAWFUNCTION_H
