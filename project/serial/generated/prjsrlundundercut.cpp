// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlundundercut.h"

namespace prj
{
  namespace srl
  {
    namespace und
    {
      // UnderCut
      // 

      const UnderCut::BaseType& UnderCut::
      base () const
      {
        return this->base_.get ();
      }

      UnderCut::BaseType& UnderCut::
      base ()
      {
        return this->base_.get ();
      }

      void UnderCut::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void UnderCut::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const UnderCut::SourcePickType& UnderCut::
      sourcePick () const
      {
        return this->sourcePick_.get ();
      }

      UnderCut::SourcePickType& UnderCut::
      sourcePick ()
      {
        return this->sourcePick_.get ();
      }

      void UnderCut::
      sourcePick (const SourcePickType& x)
      {
        this->sourcePick_.set (x);
      }

      void UnderCut::
      sourcePick (::std::unique_ptr< SourcePickType > x)
      {
        this->sourcePick_.set (std::move (x));
      }

      const UnderCut::DirectionTypeType& UnderCut::
      directionType () const
      {
        return this->directionType_.get ();
      }

      UnderCut::DirectionTypeType& UnderCut::
      directionType ()
      {
        return this->directionType_.get ();
      }

      void UnderCut::
      directionType (const DirectionTypeType& x)
      {
        this->directionType_.set (x);
      }

      void UnderCut::
      directionType (::std::unique_ptr< DirectionTypeType > x)
      {
        this->directionType_.set (std::move (x));
      }

      const UnderCut::DirectionPicksType& UnderCut::
      directionPicks () const
      {
        return this->directionPicks_.get ();
      }

      UnderCut::DirectionPicksType& UnderCut::
      directionPicks ()
      {
        return this->directionPicks_.get ();
      }

      void UnderCut::
      directionPicks (const DirectionPicksType& x)
      {
        this->directionPicks_.set (x);
      }

      void UnderCut::
      directionPicks (::std::unique_ptr< DirectionPicksType > x)
      {
        this->directionPicks_.set (std::move (x));
      }

      const UnderCut::DirectionType& UnderCut::
      direction () const
      {
        return this->direction_.get ();
      }

      UnderCut::DirectionType& UnderCut::
      direction ()
      {
        return this->direction_.get ();
      }

      void UnderCut::
      direction (const DirectionType& x)
      {
        this->direction_.set (x);
      }

      void UnderCut::
      direction (::std::unique_ptr< DirectionType > x)
      {
        this->direction_.set (std::move (x));
      }

      const UnderCut::SubdivisionType& UnderCut::
      subdivision () const
      {
        return this->subdivision_.get ();
      }

      UnderCut::SubdivisionType& UnderCut::
      subdivision ()
      {
        return this->subdivision_.get ();
      }

      void UnderCut::
      subdivision (const SubdivisionType& x)
      {
        this->subdivision_.set (x);
      }

      void UnderCut::
      subdivision (::std::unique_ptr< SubdivisionType > x)
      {
        this->subdivision_.set (std::move (x));
      }

      const UnderCut::DirectionTypeLabelType& UnderCut::
      directionTypeLabel () const
      {
        return this->directionTypeLabel_.get ();
      }

      UnderCut::DirectionTypeLabelType& UnderCut::
      directionTypeLabel ()
      {
        return this->directionTypeLabel_.get ();
      }

      void UnderCut::
      directionTypeLabel (const DirectionTypeLabelType& x)
      {
        this->directionTypeLabel_.set (x);
      }

      void UnderCut::
      directionTypeLabel (::std::unique_ptr< DirectionTypeLabelType > x)
      {
        this->directionTypeLabel_.set (std::move (x));
      }

      const UnderCut::DirectionLabelType& UnderCut::
      directionLabel () const
      {
        return this->directionLabel_.get ();
      }

      UnderCut::DirectionLabelType& UnderCut::
      directionLabel ()
      {
        return this->directionLabel_.get ();
      }

      void UnderCut::
      directionLabel (const DirectionLabelType& x)
      {
        this->directionLabel_.set (x);
      }

      void UnderCut::
      directionLabel (::std::unique_ptr< DirectionLabelType > x)
      {
        this->directionLabel_.set (std::move (x));
      }

      const UnderCut::SubdivisionLabelType& UnderCut::
      subdivisionLabel () const
      {
        return this->subdivisionLabel_.get ();
      }

      UnderCut::SubdivisionLabelType& UnderCut::
      subdivisionLabel ()
      {
        return this->subdivisionLabel_.get ();
      }

      void UnderCut::
      subdivisionLabel (const SubdivisionLabelType& x)
      {
        this->subdivisionLabel_.set (x);
      }

      void UnderCut::
      subdivisionLabel (::std::unique_ptr< SubdivisionLabelType > x)
      {
        this->subdivisionLabel_.set (std::move (x));
      }

      const UnderCut::IntersectionPointsSequence& UnderCut::
      intersectionPoints () const
      {
        return this->intersectionPoints_;
      }

      UnderCut::IntersectionPointsSequence& UnderCut::
      intersectionPoints ()
      {
        return this->intersectionPoints_;
      }

      void UnderCut::
      intersectionPoints (const IntersectionPointsSequence& s)
      {
        this->intersectionPoints_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace und
    {
      // UnderCut
      //

      UnderCut::
      UnderCut (const BaseType& base,
                const SourcePickType& sourcePick,
                const DirectionTypeType& directionType,
                const DirectionPicksType& directionPicks,
                const DirectionType& direction,
                const SubdivisionType& subdivision,
                const DirectionTypeLabelType& directionTypeLabel,
                const DirectionLabelType& directionLabel,
                const SubdivisionLabelType& subdivisionLabel)
      : ::xml_schema::Type (),
        base_ (base, this),
        sourcePick_ (sourcePick, this),
        directionType_ (directionType, this),
        directionPicks_ (directionPicks, this),
        direction_ (direction, this),
        subdivision_ (subdivision, this),
        directionTypeLabel_ (directionTypeLabel, this),
        directionLabel_ (directionLabel, this),
        subdivisionLabel_ (subdivisionLabel, this),
        intersectionPoints_ (this)
      {
      }

      UnderCut::
      UnderCut (::std::unique_ptr< BaseType > base,
                ::std::unique_ptr< SourcePickType > sourcePick,
                ::std::unique_ptr< DirectionTypeType > directionType,
                ::std::unique_ptr< DirectionPicksType > directionPicks,
                ::std::unique_ptr< DirectionType > direction,
                ::std::unique_ptr< SubdivisionType > subdivision,
                ::std::unique_ptr< DirectionTypeLabelType > directionTypeLabel,
                ::std::unique_ptr< DirectionLabelType > directionLabel,
                ::std::unique_ptr< SubdivisionLabelType > subdivisionLabel)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        sourcePick_ (std::move (sourcePick), this),
        directionType_ (std::move (directionType), this),
        directionPicks_ (std::move (directionPicks), this),
        direction_ (std::move (direction), this),
        subdivision_ (std::move (subdivision), this),
        directionTypeLabel_ (std::move (directionTypeLabel), this),
        directionLabel_ (std::move (directionLabel), this),
        subdivisionLabel_ (std::move (subdivisionLabel), this),
        intersectionPoints_ (this)
      {
      }

      UnderCut::
      UnderCut (const UnderCut& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        sourcePick_ (x.sourcePick_, f, this),
        directionType_ (x.directionType_, f, this),
        directionPicks_ (x.directionPicks_, f, this),
        direction_ (x.direction_, f, this),
        subdivision_ (x.subdivision_, f, this),
        directionTypeLabel_ (x.directionTypeLabel_, f, this),
        directionLabel_ (x.directionLabel_, f, this),
        subdivisionLabel_ (x.subdivisionLabel_, f, this),
        intersectionPoints_ (x.intersectionPoints_, f, this)
      {
      }

      UnderCut::
      UnderCut (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        sourcePick_ (this),
        directionType_ (this),
        directionPicks_ (this),
        direction_ (this),
        subdivision_ (this),
        directionTypeLabel_ (this),
        directionLabel_ (this),
        subdivisionLabel_ (this),
        intersectionPoints_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void UnderCut::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // sourcePick
          //
          if (n.name () == "sourcePick" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SourcePickType > r (
              SourcePickTraits::create (i, f, this));

            if (!sourcePick_.present ())
            {
              this->sourcePick_.set (::std::move (r));
              continue;
            }
          }

          // directionType
          //
          if (n.name () == "directionType" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DirectionTypeType > r (
              DirectionTypeTraits::create (i, f, this));

            if (!directionType_.present ())
            {
              this->directionType_.set (::std::move (r));
              continue;
            }
          }

          // directionPicks
          //
          if (n.name () == "directionPicks" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DirectionPicksType > r (
              DirectionPicksTraits::create (i, f, this));

            if (!directionPicks_.present ())
            {
              this->directionPicks_.set (::std::move (r));
              continue;
            }
          }

          // direction
          //
          if (n.name () == "direction" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DirectionType > r (
              DirectionTraits::create (i, f, this));

            if (!direction_.present ())
            {
              this->direction_.set (::std::move (r));
              continue;
            }
          }

          // subdivision
          //
          if (n.name () == "subdivision" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SubdivisionType > r (
              SubdivisionTraits::create (i, f, this));

            if (!subdivision_.present ())
            {
              this->subdivision_.set (::std::move (r));
              continue;
            }
          }

          // directionTypeLabel
          //
          if (n.name () == "directionTypeLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DirectionTypeLabelType > r (
              DirectionTypeLabelTraits::create (i, f, this));

            if (!directionTypeLabel_.present ())
            {
              this->directionTypeLabel_.set (::std::move (r));
              continue;
            }
          }

          // directionLabel
          //
          if (n.name () == "directionLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DirectionLabelType > r (
              DirectionLabelTraits::create (i, f, this));

            if (!directionLabel_.present ())
            {
              this->directionLabel_.set (::std::move (r));
              continue;
            }
          }

          // subdivisionLabel
          //
          if (n.name () == "subdivisionLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SubdivisionLabelType > r (
              SubdivisionLabelTraits::create (i, f, this));

            if (!subdivisionLabel_.present ())
            {
              this->subdivisionLabel_.set (::std::move (r));
              continue;
            }
          }

          // intersectionPoints
          //
          if (n.name () == "intersectionPoints" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IntersectionPointsType > r (
              IntersectionPointsTraits::create (i, f, this));

            this->intersectionPoints_.push_back (::std::move (r));
            continue;
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!sourcePick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sourcePick",
            "");
        }

        if (!directionType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "directionType",
            "");
        }

        if (!directionPicks_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "directionPicks",
            "");
        }

        if (!direction_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "direction",
            "");
        }

        if (!subdivision_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "subdivision",
            "");
        }

        if (!directionTypeLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "directionTypeLabel",
            "");
        }

        if (!directionLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "directionLabel",
            "");
        }

        if (!subdivisionLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "subdivisionLabel",
            "");
        }
      }

      UnderCut* UnderCut::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class UnderCut (*this, f, c);
      }

      UnderCut& UnderCut::
      operator= (const UnderCut& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->sourcePick_ = x.sourcePick_;
          this->directionType_ = x.directionType_;
          this->directionPicks_ = x.directionPicks_;
          this->direction_ = x.direction_;
          this->subdivision_ = x.subdivision_;
          this->directionTypeLabel_ = x.directionTypeLabel_;
          this->directionLabel_ = x.directionLabel_;
          this->subdivisionLabel_ = x.subdivisionLabel_;
          this->intersectionPoints_ = x.intersectionPoints_;
        }

        return *this;
      }

      UnderCut::
      ~UnderCut ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace und
    {
      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (const ::std::string& u,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::und::UnderCut > (
          ::prj::srl::und::undercut (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (const ::std::string& u,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::und::UnderCut > (
          ::prj::srl::und::undercut (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::und::UnderCut > (
          ::prj::srl::und::undercut (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::und::undercut (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::und::undercut (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::und::undercut (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::und::undercut (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::und::undercut (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::und::undercut (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::xercesc::InputSource& i,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::und::UnderCut > (
          ::prj::srl::und::undercut (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::xercesc::InputSource& i,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::und::UnderCut > (
          ::prj::srl::und::undercut (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::und::UnderCut > (
          ::prj::srl::und::undercut (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (const ::xercesc::DOMDocument& doc,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::und::UnderCut > (
            ::prj::srl::und::undercut (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "undercut" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/und")
        {
          ::std::unique_ptr< ::prj::srl::und::UnderCut > r (
            ::xsd::cxx::tree::traits< ::prj::srl::und::UnderCut, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "undercut",
          "http://www.cadseer.com/prj/srl/und");
      }

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "undercut" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/und")
        {
          ::std::unique_ptr< ::prj::srl::und::UnderCut > r (
            ::xsd::cxx::tree::traits< ::prj::srl::und::UnderCut, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "undercut",
          "http://www.cadseer.com/prj/srl/und");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace und
    {
      void
      operator<< (::xercesc::DOMElement& e, const UnderCut& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // sourcePick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sourcePick",
              e));

          s << i.sourcePick ();
        }

        // directionType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "directionType",
              e));

          s << i.directionType ();
        }

        // directionPicks
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "directionPicks",
              e));

          s << i.directionPicks ();
        }

        // direction
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "direction",
              e));

          s << i.direction ();
        }

        // subdivision
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "subdivision",
              e));

          s << i.subdivision ();
        }

        // directionTypeLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "directionTypeLabel",
              e));

          s << i.directionTypeLabel ();
        }

        // directionLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "directionLabel",
              e));

          s << i.directionLabel ();
        }

        // subdivisionLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "subdivisionLabel",
              e));

          s << i.subdivisionLabel ();
        }

        // intersectionPoints
        //
        for (UnderCut::IntersectionPointsConstIterator
             b (i.intersectionPoints ().begin ()), n (i.intersectionPoints ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "intersectionPoints",
              e));

          s << *b;
        }
      }

      void
      undercut (::std::ostream& o,
                const ::prj::srl::und::UnderCut& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::und::undercut (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      undercut (::std::ostream& o,
                const ::prj::srl::und::UnderCut& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::und::undercut (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      undercut (::std::ostream& o,
                const ::prj::srl::und::UnderCut& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::und::undercut (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      undercut (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::und::UnderCut& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::und::undercut (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      undercut (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::und::UnderCut& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::und::undercut (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      undercut (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::und::UnderCut& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::und::undercut (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      undercut (::xercesc::DOMDocument& d,
                const ::prj::srl::und::UnderCut& s,
                ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "undercut" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/und")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "undercut",
            "http://www.cadseer.com/prj/srl/und");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      undercut (const ::prj::srl::und::UnderCut& s,
                const ::xml_schema::NamespaceInfomap& m,
                ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "undercut",
            "http://www.cadseer.com/prj/srl/und",
            m, f));

        ::prj::srl::und::undercut (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

