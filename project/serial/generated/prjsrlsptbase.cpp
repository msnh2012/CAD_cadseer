// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      // Base
      // 

      const Base::NameType& Base::
      name () const
      {
        return this->name_.get ();
      }

      Base::NameType& Base::
      name ()
      {
        return this->name_.get ();
      }

      void Base::
      name (const NameType& x)
      {
        this->name_.set (x);
      }

      void Base::
      name (::std::unique_ptr< NameType > x)
      {
        this->name_.set (std::move (x));
      }

      const Base::NameType& Base::
      name_default_value ()
      {
        return name_default_value_;
      }

      const Base::IdType& Base::
      id () const
      {
        return this->id_.get ();
      }

      Base::IdType& Base::
      id ()
      {
        return this->id_.get ();
      }

      void Base::
      id (const IdType& x)
      {
        this->id_.set (x);
      }

      void Base::
      id (::std::unique_ptr< IdType > x)
      {
        this->id_.set (std::move (x));
      }

      const Base::IdType& Base::
      id_default_value ()
      {
        return id_default_value_;
      }

      const Base::ColorType& Base::
      color () const
      {
        return this->color_.get ();
      }

      Base::ColorType& Base::
      color ()
      {
        return this->color_.get ();
      }

      void Base::
      color (const ColorType& x)
      {
        this->color_.set (x);
      }

      void Base::
      color (::std::unique_ptr< ColorType > x)
      {
        this->color_.set (std::move (x));
      }

      const Base::StateType& Base::
      state () const
      {
        return this->state_.get ();
      }

      Base::StateType& Base::
      state ()
      {
        return this->state_.get ();
      }

      void Base::
      state (const StateType& x)
      {
        this->state_.set (x);
      }

      void Base::
      state (::std::unique_ptr< StateType > x)
      {
        this->state_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      // Base
      //

      const Base::NameType Base::name_default_value_ (
        "Empty");

      const Base::IdType Base::id_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      Base::
      Base (const NameType& name,
            const IdType& id,
            const ColorType& color,
            const StateType& state)
      : ::xml_schema::Type (),
        name_ (name, this),
        id_ (id, this),
        color_ (color, this),
        state_ (state, this)
      {
      }

      Base::
      Base (const NameType& name,
            const IdType& id,
            ::std::unique_ptr< ColorType > color,
            const StateType& state)
      : ::xml_schema::Type (),
        name_ (name, this),
        id_ (id, this),
        color_ (std::move (color), this),
        state_ (state, this)
      {
      }

      Base::
      Base (const Base& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        name_ (x.name_, f, this),
        id_ (x.id_, f, this),
        color_ (x.color_, f, this),
        state_ (x.state_, f, this)
      {
      }

      Base::
      Base (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        name_ (this),
        id_ (this),
        color_ (this),
        state_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Base::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // name
          //
          if (n.name () == "name" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< NameType > r (
              NameTraits::create (i, f, this));

            if (!name_.present ())
            {
              this->name_.set (::std::move (r));
              continue;
            }
          }

          // id
          //
          if (n.name () == "id" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IdType > r (
              IdTraits::create (i, f, this));

            if (!id_.present ())
            {
              this->id_.set (::std::move (r));
              continue;
            }
          }

          // color
          //
          if (n.name () == "color" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ColorType > r (
              ColorTraits::create (i, f, this));

            if (!color_.present ())
            {
              this->color_.set (::std::move (r));
              continue;
            }
          }

          // state
          //
          if (n.name () == "state" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< StateType > r (
              StateTraits::create (i, f, this));

            if (!state_.present ())
            {
              this->state_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!name_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "name",
            "");
        }

        if (!id_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "id",
            "");
        }

        if (!color_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "color",
            "");
        }

        if (!state_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "state",
            "");
        }
      }

      Base* Base::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Base (*this, f, c);
      }

      Base& Base::
      operator= (const Base& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->name_ = x.name_;
          this->id_ = x.id_;
          this->color_ = x.color_;
          this->state_ = x.state_;
        }

        return *this;
      }

      Base::
      ~Base ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement& e, const Base& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // name
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "name",
              e));

          s << i.name ();
        }

        // id
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "id",
              e));

          s << i.id ();
        }

        // color
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "color",
              e));

          s << i.color ();
        }

        // state
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "state",
              e));

          s << i.state ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

