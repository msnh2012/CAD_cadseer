// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_EXRS_PRJSRLEXRSEXTRUDE_H
#define PRJ_SRL_EXRS_PRJSRLEXRSEXTRUDE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace exrs
    {
      class Extrude;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptpick.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace exrs
    {
      class Extrude: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // extrusionType
        //
        typedef ::prj::srl::spt::Parameter ExtrusionTypeType;
        typedef ::xsd::cxx::tree::traits< ExtrusionTypeType, char > ExtrusionTypeTraits;

        const ExtrusionTypeType&
        extrusionType () const;

        ExtrusionTypeType&
        extrusionType ();

        void
        extrusionType (const ExtrusionTypeType& x);

        void
        extrusionType (::std::unique_ptr< ExtrusionTypeType > p);

        // profilePicks
        //
        typedef ::prj::srl::spt::Parameter ProfilePicksType;
        typedef ::xsd::cxx::tree::traits< ProfilePicksType, char > ProfilePicksTraits;

        const ProfilePicksType&
        profilePicks () const;

        ProfilePicksType&
        profilePicks ();

        void
        profilePicks (const ProfilePicksType& x);

        void
        profilePicks (::std::unique_ptr< ProfilePicksType > p);

        // axisPicks
        //
        typedef ::prj::srl::spt::Parameter AxisPicksType;
        typedef ::xsd::cxx::tree::optional< AxisPicksType > AxisPicksOptional;
        typedef ::xsd::cxx::tree::traits< AxisPicksType, char > AxisPicksTraits;

        const AxisPicksOptional&
        axisPicks () const;

        AxisPicksOptional&
        axisPicks ();

        void
        axisPicks (const AxisPicksType& x);

        void
        axisPicks (const AxisPicksOptional& x);

        void
        axisPicks (::std::unique_ptr< AxisPicksType > p);

        // direction
        //
        typedef ::prj::srl::spt::Parameter DirectionType;
        typedef ::xsd::cxx::tree::traits< DirectionType, char > DirectionTraits;

        const DirectionType&
        direction () const;

        DirectionType&
        direction ();

        void
        direction (const DirectionType& x);

        void
        direction (::std::unique_ptr< DirectionType > p);

        // directionLabel
        //
        typedef ::prj::srl::spt::PLabel DirectionLabelType;
        typedef ::xsd::cxx::tree::traits< DirectionLabelType, char > DirectionLabelTraits;

        const DirectionLabelType&
        directionLabel () const;

        DirectionLabelType&
        directionLabel ();

        void
        directionLabel (const DirectionLabelType& x);

        void
        directionLabel (::std::unique_ptr< DirectionLabelType > p);

        // distance
        //
        typedef ::prj::srl::spt::Parameter DistanceType;
        typedef ::xsd::cxx::tree::traits< DistanceType, char > DistanceTraits;

        const DistanceType&
        distance () const;

        DistanceType&
        distance ();

        void
        distance (const DistanceType& x);

        void
        distance (::std::unique_ptr< DistanceType > p);

        // distanceLabel
        //
        typedef ::prj::srl::spt::IPGroup DistanceLabelType;
        typedef ::xsd::cxx::tree::traits< DistanceLabelType, char > DistanceLabelTraits;

        const DistanceLabelType&
        distanceLabel () const;

        DistanceLabelType&
        distanceLabel ();

        void
        distanceLabel (const DistanceLabelType& x);

        void
        distanceLabel (::std::unique_ptr< DistanceLabelType > p);

        // offset
        //
        typedef ::prj::srl::spt::Parameter OffsetType;
        typedef ::xsd::cxx::tree::traits< OffsetType, char > OffsetTraits;

        const OffsetType&
        offset () const;

        OffsetType&
        offset ();

        void
        offset (const OffsetType& x);

        void
        offset (::std::unique_ptr< OffsetType > p);

        // offsetLabel
        //
        typedef ::prj::srl::spt::IPGroup OffsetLabelType;
        typedef ::xsd::cxx::tree::traits< OffsetLabelType, char > OffsetLabelTraits;

        const OffsetLabelType&
        offsetLabel () const;

        OffsetLabelType&
        offsetLabel ();

        void
        offsetLabel (const OffsetLabelType& x);

        void
        offsetLabel (::std::unique_ptr< OffsetLabelType > p);

        // solid
        //
        typedef ::prj::srl::spt::Parameter SolidType;
        typedef ::xsd::cxx::tree::traits< SolidType, char > SolidTraits;

        const SolidType&
        solid () const;

        SolidType&
        solid ();

        void
        solid (const SolidType& x);

        void
        solid (::std::unique_ptr< SolidType > p);

        // solidLabel
        //
        typedef ::prj::srl::spt::PLabel SolidLabelType;
        typedef ::xsd::cxx::tree::traits< SolidLabelType, char > SolidLabelTraits;

        const SolidLabelType&
        solidLabel () const;

        SolidLabelType&
        solidLabel ();

        void
        solidLabel (const SolidLabelType& x);

        void
        solidLabel (::std::unique_ptr< SolidLabelType > p);

        // reverse
        //
        typedef ::prj::srl::spt::Parameter ReverseType;
        typedef ::xsd::cxx::tree::traits< ReverseType, char > ReverseTraits;

        const ReverseType&
        reverse () const;

        ReverseType&
        reverse ();

        void
        reverse (const ReverseType& x);

        void
        reverse (::std::unique_ptr< ReverseType > p);

        // reverseLabel
        //
        typedef ::prj::srl::spt::PLabel ReverseLabelType;
        typedef ::xsd::cxx::tree::traits< ReverseLabelType, char > ReverseLabelTraits;

        const ReverseLabelType&
        reverseLabel () const;

        ReverseLabelType&
        reverseLabel ();

        void
        reverseLabel (const ReverseLabelType& x);

        void
        reverseLabel (::std::unique_ptr< ReverseLabelType > p);

        // originalMap
        //
        typedef ::prj::srl::spt::EvolveRecord OriginalMapType;
        typedef ::xsd::cxx::tree::sequence< OriginalMapType > OriginalMapSequence;
        typedef OriginalMapSequence::iterator OriginalMapIterator;
        typedef OriginalMapSequence::const_iterator OriginalMapConstIterator;
        typedef ::xsd::cxx::tree::traits< OriginalMapType, char > OriginalMapTraits;

        const OriginalMapSequence&
        originalMap () const;

        OriginalMapSequence&
        originalMap ();

        void
        originalMap (const OriginalMapSequence& s);

        // generatedMap
        //
        typedef ::prj::srl::spt::EvolveRecord GeneratedMapType;
        typedef ::xsd::cxx::tree::sequence< GeneratedMapType > GeneratedMapSequence;
        typedef GeneratedMapSequence::iterator GeneratedMapIterator;
        typedef GeneratedMapSequence::const_iterator GeneratedMapConstIterator;
        typedef ::xsd::cxx::tree::traits< GeneratedMapType, char > GeneratedMapTraits;

        const GeneratedMapSequence&
        generatedMap () const;

        GeneratedMapSequence&
        generatedMap ();

        void
        generatedMap (const GeneratedMapSequence& s);

        // lastMap
        //
        typedef ::prj::srl::spt::EvolveRecord LastMapType;
        typedef ::xsd::cxx::tree::sequence< LastMapType > LastMapSequence;
        typedef LastMapSequence::iterator LastMapIterator;
        typedef LastMapSequence::const_iterator LastMapConstIterator;
        typedef ::xsd::cxx::tree::traits< LastMapType, char > LastMapTraits;

        const LastMapSequence&
        lastMap () const;

        LastMapSequence&
        lastMap ();

        void
        lastMap (const LastMapSequence& s);

        // oWireMap
        //
        typedef ::prj::srl::spt::EvolveRecord OWireMapType;
        typedef ::xsd::cxx::tree::sequence< OWireMapType > OWireMapSequence;
        typedef OWireMapSequence::iterator OWireMapIterator;
        typedef OWireMapSequence::const_iterator OWireMapConstIterator;
        typedef ::xsd::cxx::tree::traits< OWireMapType, char > OWireMapTraits;

        const OWireMapSequence&
        oWireMap () const;

        OWireMapSequence&
        oWireMap ();

        void
        oWireMap (const OWireMapSequence& s);

        // setMap
        //
        typedef ::prj::srl::spt::DerivedRecord SetMapType;
        typedef ::xsd::cxx::tree::sequence< SetMapType > SetMapSequence;
        typedef SetMapSequence::iterator SetMapIterator;
        typedef SetMapSequence::const_iterator SetMapConstIterator;
        typedef ::xsd::cxx::tree::traits< SetMapType, char > SetMapTraits;

        const SetMapSequence&
        setMap () const;

        SetMapSequence&
        setMap ();

        void
        setMap (const SetMapSequence& s);

        // Constructors.
        //
        Extrude (const BaseType&,
                 const SeerShapeType&,
                 const ExtrusionTypeType&,
                 const ProfilePicksType&,
                 const DirectionType&,
                 const DirectionLabelType&,
                 const DistanceType&,
                 const DistanceLabelType&,
                 const OffsetType&,
                 const OffsetLabelType&,
                 const SolidType&,
                 const SolidLabelType&,
                 const ReverseType&,
                 const ReverseLabelType&);

        Extrude (::std::unique_ptr< BaseType >,
                 ::std::unique_ptr< SeerShapeType >,
                 ::std::unique_ptr< ExtrusionTypeType >,
                 ::std::unique_ptr< ProfilePicksType >,
                 ::std::unique_ptr< DirectionType >,
                 ::std::unique_ptr< DirectionLabelType >,
                 ::std::unique_ptr< DistanceType >,
                 ::std::unique_ptr< DistanceLabelType >,
                 ::std::unique_ptr< OffsetType >,
                 ::std::unique_ptr< OffsetLabelType >,
                 ::std::unique_ptr< SolidType >,
                 ::std::unique_ptr< SolidLabelType >,
                 ::std::unique_ptr< ReverseType >,
                 ::std::unique_ptr< ReverseLabelType >);

        Extrude (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        Extrude (const Extrude& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        virtual Extrude*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Extrude&
        operator= (const Extrude& x);

        virtual 
        ~Extrude ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< ExtrusionTypeType > extrusionType_;
        ::xsd::cxx::tree::one< ProfilePicksType > profilePicks_;
        AxisPicksOptional axisPicks_;
        ::xsd::cxx::tree::one< DirectionType > direction_;
        ::xsd::cxx::tree::one< DirectionLabelType > directionLabel_;
        ::xsd::cxx::tree::one< DistanceType > distance_;
        ::xsd::cxx::tree::one< DistanceLabelType > distanceLabel_;
        ::xsd::cxx::tree::one< OffsetType > offset_;
        ::xsd::cxx::tree::one< OffsetLabelType > offsetLabel_;
        ::xsd::cxx::tree::one< SolidType > solid_;
        ::xsd::cxx::tree::one< SolidLabelType > solidLabel_;
        ::xsd::cxx::tree::one< ReverseType > reverse_;
        ::xsd::cxx::tree::one< ReverseLabelType > reverseLabel_;
        OriginalMapSequence originalMap_;
        GeneratedMapSequence generatedMap_;
        LastMapSequence lastMap_;
        OWireMapSequence oWireMap_;
        SetMapSequence setMap_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace exrs
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::exrs::Extrude >
      extrude (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace exrs
    {
      void
      operator<< (::xercesc::DOMElement&, const Extrude&);

      // Serialize to std::ostream.
      //

      void
      extrude (::std::ostream& os,
               const ::prj::srl::exrs::Extrude& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      extrude (::std::ostream& os,
               const ::prj::srl::exrs::Extrude& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      extrude (::std::ostream& os,
               const ::prj::srl::exrs::Extrude& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      extrude (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::exrs::Extrude& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      extrude (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::exrs::Extrude& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      extrude (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::exrs::Extrude& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      extrude (::xercesc::DOMDocument& d,
               const ::prj::srl::exrs::Extrude& x,
               ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      extrude (const ::prj::srl::exrs::Extrude& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_EXRS_PRJSRLEXRSEXTRUDE_H
