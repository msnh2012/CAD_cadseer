// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_DSTS_PRJSRLDSTSDIESET_H
#define PRJ_SRL_DSTS_PRJSRLDSTSDIESET_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace dsts
    {
      class DieSet;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace dsts
    {
      class DieSet: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // length
        //
        typedef ::prj::srl::spt::Parameter LengthType;
        typedef ::xsd::cxx::tree::traits< LengthType, char > LengthTraits;

        const LengthType&
        length () const;

        LengthType&
        length ();

        void
        length (const LengthType& x);

        void
        length (::std::unique_ptr< LengthType > p);

        // lengthPadding
        //
        typedef ::prj::srl::spt::Parameter LengthPaddingType;
        typedef ::xsd::cxx::tree::traits< LengthPaddingType, char > LengthPaddingTraits;

        const LengthPaddingType&
        lengthPadding () const;

        LengthPaddingType&
        lengthPadding ();

        void
        lengthPadding (const LengthPaddingType& x);

        void
        lengthPadding (::std::unique_ptr< LengthPaddingType > p);

        // width
        //
        typedef ::prj::srl::spt::Parameter WidthType;
        typedef ::xsd::cxx::tree::traits< WidthType, char > WidthTraits;

        const WidthType&
        width () const;

        WidthType&
        width ();

        void
        width (const WidthType& x);

        void
        width (::std::unique_ptr< WidthType > p);

        // widthPadding
        //
        typedef ::prj::srl::spt::Parameter WidthPaddingType;
        typedef ::xsd::cxx::tree::traits< WidthPaddingType, char > WidthPaddingTraits;

        const WidthPaddingType&
        widthPadding () const;

        WidthPaddingType&
        widthPadding ();

        void
        widthPadding (const WidthPaddingType& x);

        void
        widthPadding (::std::unique_ptr< WidthPaddingType > p);

        // origin
        //
        typedef ::prj::srl::spt::Parameter OriginType;
        typedef ::xsd::cxx::tree::traits< OriginType, char > OriginTraits;

        const OriginType&
        origin () const;

        OriginType&
        origin ();

        void
        origin (const OriginType& x);

        void
        origin (::std::unique_ptr< OriginType > p);

        // autoCalc
        //
        typedef ::prj::srl::spt::Parameter AutoCalcType;
        typedef ::xsd::cxx::tree::traits< AutoCalcType, char > AutoCalcTraits;

        const AutoCalcType&
        autoCalc () const;

        AutoCalcType&
        autoCalc ();

        void
        autoCalc (const AutoCalcType& x);

        void
        autoCalc (::std::unique_ptr< AutoCalcType > p);

        // lengthPLabel
        //
        typedef ::prj::srl::spt::PLabel LengthPLabelType;
        typedef ::xsd::cxx::tree::traits< LengthPLabelType, char > LengthPLabelTraits;

        const LengthPLabelType&
        lengthPLabel () const;

        LengthPLabelType&
        lengthPLabel ();

        void
        lengthPLabel (const LengthPLabelType& x);

        void
        lengthPLabel (::std::unique_ptr< LengthPLabelType > p);

        // widthPLabel
        //
        typedef ::prj::srl::spt::PLabel WidthPLabelType;
        typedef ::xsd::cxx::tree::traits< WidthPLabelType, char > WidthPLabelTraits;

        const WidthPLabelType&
        widthPLabel () const;

        WidthPLabelType&
        widthPLabel ();

        void
        widthPLabel (const WidthPLabelType& x);

        void
        widthPLabel (::std::unique_ptr< WidthPLabelType > p);

        // lengthPaddingPLabel
        //
        typedef ::prj::srl::spt::PLabel LengthPaddingPLabelType;
        typedef ::xsd::cxx::tree::traits< LengthPaddingPLabelType, char > LengthPaddingPLabelTraits;

        const LengthPaddingPLabelType&
        lengthPaddingPLabel () const;

        LengthPaddingPLabelType&
        lengthPaddingPLabel ();

        void
        lengthPaddingPLabel (const LengthPaddingPLabelType& x);

        void
        lengthPaddingPLabel (::std::unique_ptr< LengthPaddingPLabelType > p);

        // widthPaddingPLabel
        //
        typedef ::prj::srl::spt::PLabel WidthPaddingPLabelType;
        typedef ::xsd::cxx::tree::traits< WidthPaddingPLabelType, char > WidthPaddingPLabelTraits;

        const WidthPaddingPLabelType&
        widthPaddingPLabel () const;

        WidthPaddingPLabelType&
        widthPaddingPLabel ();

        void
        widthPaddingPLabel (const WidthPaddingPLabelType& x);

        void
        widthPaddingPLabel (::std::unique_ptr< WidthPaddingPLabelType > p);

        // originPLabel
        //
        typedef ::prj::srl::spt::PLabel OriginPLabelType;
        typedef ::xsd::cxx::tree::traits< OriginPLabelType, char > OriginPLabelTraits;

        const OriginPLabelType&
        originPLabel () const;

        OriginPLabelType&
        originPLabel ();

        void
        originPLabel (const OriginPLabelType& x);

        void
        originPLabel (::std::unique_ptr< OriginPLabelType > p);

        // autoCalcPLabel
        //
        typedef ::prj::srl::spt::PLabel AutoCalcPLabelType;
        typedef ::xsd::cxx::tree::traits< AutoCalcPLabelType, char > AutoCalcPLabelTraits;

        const AutoCalcPLabelType&
        autoCalcPLabel () const;

        AutoCalcPLabelType&
        autoCalcPLabel ();

        void
        autoCalcPLabel (const AutoCalcPLabelType& x);

        void
        autoCalcPLabel (::std::unique_ptr< AutoCalcPLabelType > p);

        // Constructors.
        //
        DieSet (const BaseType&,
                const SeerShapeType&,
                const LengthType&,
                const LengthPaddingType&,
                const WidthType&,
                const WidthPaddingType&,
                const OriginType&,
                const AutoCalcType&,
                const LengthPLabelType&,
                const WidthPLabelType&,
                const LengthPaddingPLabelType&,
                const WidthPaddingPLabelType&,
                const OriginPLabelType&,
                const AutoCalcPLabelType&);

        DieSet (::std::unique_ptr< BaseType >,
                ::std::unique_ptr< SeerShapeType >,
                ::std::unique_ptr< LengthType >,
                ::std::unique_ptr< LengthPaddingType >,
                ::std::unique_ptr< WidthType >,
                ::std::unique_ptr< WidthPaddingType >,
                ::std::unique_ptr< OriginType >,
                ::std::unique_ptr< AutoCalcType >,
                ::std::unique_ptr< LengthPLabelType >,
                ::std::unique_ptr< WidthPLabelType >,
                ::std::unique_ptr< LengthPaddingPLabelType >,
                ::std::unique_ptr< WidthPaddingPLabelType >,
                ::std::unique_ptr< OriginPLabelType >,
                ::std::unique_ptr< AutoCalcPLabelType >);

        DieSet (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        DieSet (const DieSet& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual DieSet*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        DieSet&
        operator= (const DieSet& x);

        virtual 
        ~DieSet ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< LengthType > length_;
        ::xsd::cxx::tree::one< LengthPaddingType > lengthPadding_;
        ::xsd::cxx::tree::one< WidthType > width_;
        ::xsd::cxx::tree::one< WidthPaddingType > widthPadding_;
        ::xsd::cxx::tree::one< OriginType > origin_;
        ::xsd::cxx::tree::one< AutoCalcType > autoCalc_;
        ::xsd::cxx::tree::one< LengthPLabelType > lengthPLabel_;
        ::xsd::cxx::tree::one< WidthPLabelType > widthPLabel_;
        ::xsd::cxx::tree::one< LengthPaddingPLabelType > lengthPaddingPLabel_;
        ::xsd::cxx::tree::one< WidthPaddingPLabelType > widthPaddingPLabel_;
        ::xsd::cxx::tree::one< OriginPLabelType > originPLabel_;
        ::xsd::cxx::tree::one< AutoCalcPLabelType > autoCalcPLabel_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace dsts
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dsts::DieSet >
      dieset (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace dsts
    {
      void
      operator<< (::xercesc::DOMElement&, const DieSet&);

      // Serialize to std::ostream.
      //

      void
      dieset (::std::ostream& os,
              const ::prj::srl::dsts::DieSet& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      dieset (::std::ostream& os,
              const ::prj::srl::dsts::DieSet& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      dieset (::std::ostream& os,
              const ::prj::srl::dsts::DieSet& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      dieset (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::dsts::DieSet& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      dieset (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::dsts::DieSet& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      dieset (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::dsts::DieSet& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      dieset (::xercesc::DOMDocument& d,
              const ::prj::srl::dsts::DieSet& x,
              ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      dieset (const ::prj::srl::dsts::DieSet& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_DSTS_PRJSRLDSTSDIESET_H
