// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlblnsblend.h"

namespace prj
{
  namespace srl
  {
    namespace blns
    {
      // SimpleBlend
      // 

      const SimpleBlend::BlendPicksSequence& SimpleBlend::
      blendPicks () const
      {
        return this->blendPicks_;
      }

      SimpleBlend::BlendPicksSequence& SimpleBlend::
      blendPicks ()
      {
        return this->blendPicks_;
      }

      void SimpleBlend::
      blendPicks (const BlendPicksSequence& s)
      {
        this->blendPicks_ = s;
      }

      const SimpleBlend::RadiusType& SimpleBlend::
      radius () const
      {
        return this->radius_.get ();
      }

      SimpleBlend::RadiusType& SimpleBlend::
      radius ()
      {
        return this->radius_.get ();
      }

      void SimpleBlend::
      radius (const RadiusType& x)
      {
        this->radius_.set (x);
      }

      void SimpleBlend::
      radius (::std::unique_ptr< RadiusType > x)
      {
        this->radius_.set (std::move (x));
      }

      const SimpleBlend::PlabelType& SimpleBlend::
      plabel () const
      {
        return this->plabel_.get ();
      }

      SimpleBlend::PlabelType& SimpleBlend::
      plabel ()
      {
        return this->plabel_.get ();
      }

      void SimpleBlend::
      plabel (const PlabelType& x)
      {
        this->plabel_.set (x);
      }

      void SimpleBlend::
      plabel (::std::unique_ptr< PlabelType > x)
      {
        this->plabel_.set (std::move (x));
      }


      // VariableEntry
      // 

      const VariableEntry::BlendPickType& VariableEntry::
      blendPick () const
      {
        return this->blendPick_.get ();
      }

      VariableEntry::BlendPickType& VariableEntry::
      blendPick ()
      {
        return this->blendPick_.get ();
      }

      void VariableEntry::
      blendPick (const BlendPickType& x)
      {
        this->blendPick_.set (x);
      }

      void VariableEntry::
      blendPick (::std::unique_ptr< BlendPickType > x)
      {
        this->blendPick_.set (std::move (x));
      }

      const VariableEntry::PositionType& VariableEntry::
      position () const
      {
        return this->position_.get ();
      }

      VariableEntry::PositionType& VariableEntry::
      position ()
      {
        return this->position_.get ();
      }

      void VariableEntry::
      position (const PositionType& x)
      {
        this->position_.set (x);
      }

      void VariableEntry::
      position (::std::unique_ptr< PositionType > x)
      {
        this->position_.set (std::move (x));
      }

      const VariableEntry::RadiusType& VariableEntry::
      radius () const
      {
        return this->radius_.get ();
      }

      VariableEntry::RadiusType& VariableEntry::
      radius ()
      {
        return this->radius_.get ();
      }

      void VariableEntry::
      radius (const RadiusType& x)
      {
        this->radius_.set (x);
      }

      void VariableEntry::
      radius (::std::unique_ptr< RadiusType > x)
      {
        this->radius_.set (std::move (x));
      }

      const VariableEntry::PlabelType& VariableEntry::
      plabel () const
      {
        return this->plabel_.get ();
      }

      VariableEntry::PlabelType& VariableEntry::
      plabel ()
      {
        return this->plabel_.get ();
      }

      void VariableEntry::
      plabel (const PlabelType& x)
      {
        this->plabel_.set (x);
      }

      void VariableEntry::
      plabel (::std::unique_ptr< PlabelType > x)
      {
        this->plabel_.set (std::move (x));
      }

      const VariableEntry::PositionLabelType& VariableEntry::
      positionLabel () const
      {
        return this->positionLabel_.get ();
      }

      VariableEntry::PositionLabelType& VariableEntry::
      positionLabel ()
      {
        return this->positionLabel_.get ();
      }

      void VariableEntry::
      positionLabel (const PositionLabelType& x)
      {
        this->positionLabel_.set (x);
      }

      void VariableEntry::
      positionLabel (::std::unique_ptr< PositionLabelType > x)
      {
        this->positionLabel_.set (std::move (x));
      }


      // VariableBlend
      // 

      const VariableBlend::BlendPicksSequence& VariableBlend::
      blendPicks () const
      {
        return this->blendPicks_;
      }

      VariableBlend::BlendPicksSequence& VariableBlend::
      blendPicks ()
      {
        return this->blendPicks_;
      }

      void VariableBlend::
      blendPicks (const BlendPicksSequence& s)
      {
        this->blendPicks_ = s;
      }

      const VariableBlend::VariableEntriesSequence& VariableBlend::
      variableEntries () const
      {
        return this->variableEntries_;
      }

      VariableBlend::VariableEntriesSequence& VariableBlend::
      variableEntries ()
      {
        return this->variableEntries_;
      }

      void VariableBlend::
      variableEntries (const VariableEntriesSequence& s)
      {
        this->variableEntries_ = s;
      }


      // Blend
      // 

      const Blend::BaseType& Blend::
      base () const
      {
        return this->base_.get ();
      }

      Blend::BaseType& Blend::
      base ()
      {
        return this->base_.get ();
      }

      void Blend::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void Blend::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const Blend::SeerShapeType& Blend::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      Blend::SeerShapeType& Blend::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void Blend::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void Blend::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const Blend::FilletShapeType& Blend::
      filletShape () const
      {
        return this->filletShape_.get ();
      }

      Blend::FilletShapeType& Blend::
      filletShape ()
      {
        return this->filletShape_.get ();
      }

      void Blend::
      filletShape (const FilletShapeType& x)
      {
        this->filletShape_.set (x);
      }

      const Blend::BlendTypeType& Blend::
      blendType () const
      {
        return this->blendType_.get ();
      }

      Blend::BlendTypeType& Blend::
      blendType ()
      {
        return this->blendType_.get ();
      }

      void Blend::
      blendType (const BlendTypeType& x)
      {
        this->blendType_.set (x);
      }

      const Blend::ShapeMapSequence& Blend::
      shapeMap () const
      {
        return this->shapeMap_;
      }

      Blend::ShapeMapSequence& Blend::
      shapeMap ()
      {
        return this->shapeMap_;
      }

      void Blend::
      shapeMap (const ShapeMapSequence& s)
      {
        this->shapeMap_ = s;
      }

      const Blend::SimpleBlendsSequence& Blend::
      simpleBlends () const
      {
        return this->simpleBlends_;
      }

      Blend::SimpleBlendsSequence& Blend::
      simpleBlends ()
      {
        return this->simpleBlends_;
      }

      void Blend::
      simpleBlends (const SimpleBlendsSequence& s)
      {
        this->simpleBlends_ = s;
      }

      const Blend::VariableBlendOptional& Blend::
      variableBlend () const
      {
        return this->variableBlend_;
      }

      Blend::VariableBlendOptional& Blend::
      variableBlend ()
      {
        return this->variableBlend_;
      }

      void Blend::
      variableBlend (const VariableBlendType& x)
      {
        this->variableBlend_.set (x);
      }

      void Blend::
      variableBlend (const VariableBlendOptional& x)
      {
        this->variableBlend_ = x;
      }

      void Blend::
      variableBlend (::std::unique_ptr< VariableBlendType > x)
      {
        this->variableBlend_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace blns
    {
      // SimpleBlend
      //

      SimpleBlend::
      SimpleBlend (const RadiusType& radius,
                   const PlabelType& plabel)
      : ::xml_schema::Type (),
        blendPicks_ (this),
        radius_ (radius, this),
        plabel_ (plabel, this)
      {
      }

      SimpleBlend::
      SimpleBlend (::std::unique_ptr< RadiusType > radius,
                   ::std::unique_ptr< PlabelType > plabel)
      : ::xml_schema::Type (),
        blendPicks_ (this),
        radius_ (std::move (radius), this),
        plabel_ (std::move (plabel), this)
      {
      }

      SimpleBlend::
      SimpleBlend (const SimpleBlend& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        blendPicks_ (x.blendPicks_, f, this),
        radius_ (x.radius_, f, this),
        plabel_ (x.plabel_, f, this)
      {
      }

      SimpleBlend::
      SimpleBlend (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        blendPicks_ (this),
        radius_ (this),
        plabel_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void SimpleBlend::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // blendPicks
          //
          if (n.name () == "blendPicks" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BlendPicksType > r (
              BlendPicksTraits::create (i, f, this));

            this->blendPicks_.push_back (::std::move (r));
            continue;
          }

          // radius
          //
          if (n.name () == "radius" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< RadiusType > r (
              RadiusTraits::create (i, f, this));

            if (!radius_.present ())
            {
              this->radius_.set (::std::move (r));
              continue;
            }
          }

          // plabel
          //
          if (n.name () == "plabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PlabelType > r (
              PlabelTraits::create (i, f, this));

            if (!plabel_.present ())
            {
              this->plabel_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!radius_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "radius",
            "");
        }

        if (!plabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "plabel",
            "");
        }
      }

      SimpleBlend* SimpleBlend::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class SimpleBlend (*this, f, c);
      }

      SimpleBlend& SimpleBlend::
      operator= (const SimpleBlend& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->blendPicks_ = x.blendPicks_;
          this->radius_ = x.radius_;
          this->plabel_ = x.plabel_;
        }

        return *this;
      }

      SimpleBlend::
      ~SimpleBlend ()
      {
      }

      // VariableEntry
      //

      VariableEntry::
      VariableEntry (const BlendPickType& blendPick,
                     const PositionType& position,
                     const RadiusType& radius,
                     const PlabelType& plabel,
                     const PositionLabelType& positionLabel)
      : ::xml_schema::Type (),
        blendPick_ (blendPick, this),
        position_ (position, this),
        radius_ (radius, this),
        plabel_ (plabel, this),
        positionLabel_ (positionLabel, this)
      {
      }

      VariableEntry::
      VariableEntry (::std::unique_ptr< BlendPickType > blendPick,
                     ::std::unique_ptr< PositionType > position,
                     ::std::unique_ptr< RadiusType > radius,
                     ::std::unique_ptr< PlabelType > plabel,
                     ::std::unique_ptr< PositionLabelType > positionLabel)
      : ::xml_schema::Type (),
        blendPick_ (std::move (blendPick), this),
        position_ (std::move (position), this),
        radius_ (std::move (radius), this),
        plabel_ (std::move (plabel), this),
        positionLabel_ (std::move (positionLabel), this)
      {
      }

      VariableEntry::
      VariableEntry (const VariableEntry& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        blendPick_ (x.blendPick_, f, this),
        position_ (x.position_, f, this),
        radius_ (x.radius_, f, this),
        plabel_ (x.plabel_, f, this),
        positionLabel_ (x.positionLabel_, f, this)
      {
      }

      VariableEntry::
      VariableEntry (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        blendPick_ (this),
        position_ (this),
        radius_ (this),
        plabel_ (this),
        positionLabel_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void VariableEntry::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // blendPick
          //
          if (n.name () == "blendPick" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BlendPickType > r (
              BlendPickTraits::create (i, f, this));

            if (!blendPick_.present ())
            {
              this->blendPick_.set (::std::move (r));
              continue;
            }
          }

          // position
          //
          if (n.name () == "position" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PositionType > r (
              PositionTraits::create (i, f, this));

            if (!position_.present ())
            {
              this->position_.set (::std::move (r));
              continue;
            }
          }

          // radius
          //
          if (n.name () == "radius" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< RadiusType > r (
              RadiusTraits::create (i, f, this));

            if (!radius_.present ())
            {
              this->radius_.set (::std::move (r));
              continue;
            }
          }

          // plabel
          //
          if (n.name () == "plabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PlabelType > r (
              PlabelTraits::create (i, f, this));

            if (!plabel_.present ())
            {
              this->plabel_.set (::std::move (r));
              continue;
            }
          }

          // positionLabel
          //
          if (n.name () == "positionLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PositionLabelType > r (
              PositionLabelTraits::create (i, f, this));

            if (!positionLabel_.present ())
            {
              this->positionLabel_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!blendPick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "blendPick",
            "");
        }

        if (!position_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "position",
            "");
        }

        if (!radius_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "radius",
            "");
        }

        if (!plabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "plabel",
            "");
        }

        if (!positionLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "positionLabel",
            "");
        }
      }

      VariableEntry* VariableEntry::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class VariableEntry (*this, f, c);
      }

      VariableEntry& VariableEntry::
      operator= (const VariableEntry& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->blendPick_ = x.blendPick_;
          this->position_ = x.position_;
          this->radius_ = x.radius_;
          this->plabel_ = x.plabel_;
          this->positionLabel_ = x.positionLabel_;
        }

        return *this;
      }

      VariableEntry::
      ~VariableEntry ()
      {
      }

      // VariableBlend
      //

      VariableBlend::
      VariableBlend ()
      : ::xml_schema::Type (),
        blendPicks_ (this),
        variableEntries_ (this)
      {
      }

      VariableBlend::
      VariableBlend (const VariableBlend& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        blendPicks_ (x.blendPicks_, f, this),
        variableEntries_ (x.variableEntries_, f, this)
      {
      }

      VariableBlend::
      VariableBlend (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        blendPicks_ (this),
        variableEntries_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void VariableBlend::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // blendPicks
          //
          if (n.name () == "blendPicks" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BlendPicksType > r (
              BlendPicksTraits::create (i, f, this));

            this->blendPicks_.push_back (::std::move (r));
            continue;
          }

          // variableEntries
          //
          if (n.name () == "variableEntries" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< VariableEntriesType > r (
              VariableEntriesTraits::create (i, f, this));

            this->variableEntries_.push_back (::std::move (r));
            continue;
          }

          break;
        }
      }

      VariableBlend* VariableBlend::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class VariableBlend (*this, f, c);
      }

      VariableBlend& VariableBlend::
      operator= (const VariableBlend& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->blendPicks_ = x.blendPicks_;
          this->variableEntries_ = x.variableEntries_;
        }

        return *this;
      }

      VariableBlend::
      ~VariableBlend ()
      {
      }

      // Blend
      //

      Blend::
      Blend (const BaseType& base,
             const SeerShapeType& seerShape,
             const FilletShapeType& filletShape,
             const BlendTypeType& blendType)
      : ::xml_schema::Type (),
        base_ (base, this),
        seerShape_ (seerShape, this),
        filletShape_ (filletShape, this),
        blendType_ (blendType, this),
        shapeMap_ (this),
        simpleBlends_ (this),
        variableBlend_ (this)
      {
      }

      Blend::
      Blend (::std::unique_ptr< BaseType > base,
             ::std::unique_ptr< SeerShapeType > seerShape,
             const FilletShapeType& filletShape,
             const BlendTypeType& blendType)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        seerShape_ (std::move (seerShape), this),
        filletShape_ (filletShape, this),
        blendType_ (blendType, this),
        shapeMap_ (this),
        simpleBlends_ (this),
        variableBlend_ (this)
      {
      }

      Blend::
      Blend (const Blend& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        seerShape_ (x.seerShape_, f, this),
        filletShape_ (x.filletShape_, f, this),
        blendType_ (x.blendType_, f, this),
        shapeMap_ (x.shapeMap_, f, this),
        simpleBlends_ (x.simpleBlends_, f, this),
        variableBlend_ (x.variableBlend_, f, this)
      {
      }

      Blend::
      Blend (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        seerShape_ (this),
        filletShape_ (this),
        blendType_ (this),
        shapeMap_ (this),
        simpleBlends_ (this),
        variableBlend_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Blend::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // filletShape
          //
          if (n.name () == "filletShape" && n.namespace_ ().empty ())
          {
            if (!filletShape_.present ())
            {
              this->filletShape_.set (FilletShapeTraits::create (i, f, this));
              continue;
            }
          }

          // blendType
          //
          if (n.name () == "blendType" && n.namespace_ ().empty ())
          {
            if (!blendType_.present ())
            {
              this->blendType_.set (BlendTypeTraits::create (i, f, this));
              continue;
            }
          }

          // shapeMap
          //
          if (n.name () == "shapeMap" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ShapeMapType > r (
              ShapeMapTraits::create (i, f, this));

            this->shapeMap_.push_back (::std::move (r));
            continue;
          }

          // simpleBlends
          //
          if (n.name () == "simpleBlends" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SimpleBlendsType > r (
              SimpleBlendsTraits::create (i, f, this));

            this->simpleBlends_.push_back (::std::move (r));
            continue;
          }

          // variableBlend
          //
          if (n.name () == "variableBlend" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< VariableBlendType > r (
              VariableBlendTraits::create (i, f, this));

            if (!this->variableBlend_)
            {
              this->variableBlend_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!filletShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "filletShape",
            "");
        }

        if (!blendType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "blendType",
            "");
        }
      }

      Blend* Blend::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Blend (*this, f, c);
      }

      Blend& Blend::
      operator= (const Blend& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->seerShape_ = x.seerShape_;
          this->filletShape_ = x.filletShape_;
          this->blendType_ = x.blendType_;
          this->shapeMap_ = x.shapeMap_;
          this->simpleBlends_ = x.simpleBlends_;
          this->variableBlend_ = x.variableBlend_;
        }

        return *this;
      }

      Blend::
      ~Blend ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace blns
    {
      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::blns::Blend > (
          ::prj::srl::blns::blend (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::blns::Blend > (
          ::prj::srl::blns::blend (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::blns::Blend > (
          ::prj::srl::blns::blend (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::blns::blend (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::blns::blend (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::blns::blend (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::blns::blend (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::blns::blend (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::blns::blend (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::blns::Blend > (
          ::prj::srl::blns::blend (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::blns::Blend > (
          ::prj::srl::blns::blend (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::blns::Blend > (
          ::prj::srl::blns::blend (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::blns::Blend > (
            ::prj::srl::blns::blend (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "blend" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/blns")
        {
          ::std::unique_ptr< ::prj::srl::blns::Blend > r (
            ::xsd::cxx::tree::traits< ::prj::srl::blns::Blend, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "blend",
          "http://www.cadseer.com/prj/srl/blns");
      }

      ::std::unique_ptr< ::prj::srl::blns::Blend >
      blend (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "blend" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/blns")
        {
          ::std::unique_ptr< ::prj::srl::blns::Blend > r (
            ::xsd::cxx::tree::traits< ::prj::srl::blns::Blend, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "blend",
          "http://www.cadseer.com/prj/srl/blns");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace blns
    {
      void
      operator<< (::xercesc::DOMElement& e, const SimpleBlend& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // blendPicks
        //
        for (SimpleBlend::BlendPicksConstIterator
             b (i.blendPicks ().begin ()), n (i.blendPicks ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "blendPicks",
              e));

          s << *b;
        }

        // radius
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "radius",
              e));

          s << i.radius ();
        }

        // plabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "plabel",
              e));

          s << i.plabel ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VariableEntry& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // blendPick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "blendPick",
              e));

          s << i.blendPick ();
        }

        // position
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "position",
              e));

          s << i.position ();
        }

        // radius
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "radius",
              e));

          s << i.radius ();
        }

        // plabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "plabel",
              e));

          s << i.plabel ();
        }

        // positionLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "positionLabel",
              e));

          s << i.positionLabel ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VariableBlend& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // blendPicks
        //
        for (VariableBlend::BlendPicksConstIterator
             b (i.blendPicks ().begin ()), n (i.blendPicks ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "blendPicks",
              e));

          s << *b;
        }

        // variableEntries
        //
        for (VariableBlend::VariableEntriesConstIterator
             b (i.variableEntries ().begin ()), n (i.variableEntries ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "variableEntries",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const Blend& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // filletShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "filletShape",
              e));

          s << i.filletShape ();
        }

        // blendType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "blendType",
              e));

          s << i.blendType ();
        }

        // shapeMap
        //
        for (Blend::ShapeMapConstIterator
             b (i.shapeMap ().begin ()), n (i.shapeMap ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "shapeMap",
              e));

          s << *b;
        }

        // simpleBlends
        //
        for (Blend::SimpleBlendsConstIterator
             b (i.simpleBlends ().begin ()), n (i.simpleBlends ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "simpleBlends",
              e));

          s << *b;
        }

        // variableBlend
        //
        if (i.variableBlend ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "variableBlend",
              e));

          s << *i.variableBlend ();
        }
      }

      void
      blend (::std::ostream& o,
             const ::prj::srl::blns::Blend& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::blns::blend (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      blend (::std::ostream& o,
             const ::prj::srl::blns::Blend& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::blns::blend (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      blend (::std::ostream& o,
             const ::prj::srl::blns::Blend& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::blns::blend (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      blend (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::blns::Blend& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::blns::blend (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      blend (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::blns::Blend& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::blns::blend (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      blend (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::blns::Blend& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::blns::blend (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      blend (::xercesc::DOMDocument& d,
             const ::prj::srl::blns::Blend& s,
             ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "blend" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/blns")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "blend",
            "http://www.cadseer.com/prj/srl/blns");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      blend (const ::prj::srl::blns::Blend& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "blend",
            "http://www.cadseer.com/prj/srl/blns",
            m, f));

        ::prj::srl::blns::blend (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

