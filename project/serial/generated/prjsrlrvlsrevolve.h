// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_RVLS_PRJSRLRVLSREVOLVE_H
#define PRJ_SRL_RVLS_PRJSRLRVLSREVOLVE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace rvls
    {
      class Revolve;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptpick.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace rvls
    {
      class Revolve: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // picks
        //
        typedef ::prj::srl::spt::Pick PicksType;
        typedef ::xsd::cxx::tree::sequence< PicksType > PicksSequence;
        typedef PicksSequence::iterator PicksIterator;
        typedef PicksSequence::const_iterator PicksConstIterator;
        typedef ::xsd::cxx::tree::traits< PicksType, char > PicksTraits;

        const PicksSequence&
        picks () const;

        PicksSequence&
        picks ();

        void
        picks (const PicksSequence& s);

        // axisPicks
        //
        typedef ::prj::srl::spt::Pick AxisPicksType;
        typedef ::xsd::cxx::tree::sequence< AxisPicksType > AxisPicksSequence;
        typedef AxisPicksSequence::iterator AxisPicksIterator;
        typedef AxisPicksSequence::const_iterator AxisPicksConstIterator;
        typedef ::xsd::cxx::tree::traits< AxisPicksType, char > AxisPicksTraits;

        const AxisPicksSequence&
        axisPicks () const;

        AxisPicksSequence&
        axisPicks ();

        void
        axisPicks (const AxisPicksSequence& s);

        // axisOrigin
        //
        typedef ::prj::srl::spt::Parameter AxisOriginType;
        typedef ::xsd::cxx::tree::traits< AxisOriginType, char > AxisOriginTraits;

        const AxisOriginType&
        axisOrigin () const;

        AxisOriginType&
        axisOrigin ();

        void
        axisOrigin (const AxisOriginType& x);

        void
        axisOrigin (::std::unique_ptr< AxisOriginType > p);

        // axisOriginLabel
        //
        typedef ::prj::srl::spt::PLabel AxisOriginLabelType;
        typedef ::xsd::cxx::tree::traits< AxisOriginLabelType, char > AxisOriginLabelTraits;

        const AxisOriginLabelType&
        axisOriginLabel () const;

        AxisOriginLabelType&
        axisOriginLabel ();

        void
        axisOriginLabel (const AxisOriginLabelType& x);

        void
        axisOriginLabel (::std::unique_ptr< AxisOriginLabelType > p);

        // axisDirection
        //
        typedef ::prj::srl::spt::Parameter AxisDirectionType;
        typedef ::xsd::cxx::tree::traits< AxisDirectionType, char > AxisDirectionTraits;

        const AxisDirectionType&
        axisDirection () const;

        AxisDirectionType&
        axisDirection ();

        void
        axisDirection (const AxisDirectionType& x);

        void
        axisDirection (::std::unique_ptr< AxisDirectionType > p);

        // axisDirectionLabel
        //
        typedef ::prj::srl::spt::PLabel AxisDirectionLabelType;
        typedef ::xsd::cxx::tree::traits< AxisDirectionLabelType, char > AxisDirectionLabelTraits;

        const AxisDirectionLabelType&
        axisDirectionLabel () const;

        AxisDirectionLabelType&
        axisDirectionLabel ();

        void
        axisDirectionLabel (const AxisDirectionLabelType& x);

        void
        axisDirectionLabel (::std::unique_ptr< AxisDirectionLabelType > p);

        // angle
        //
        typedef ::prj::srl::spt::Parameter AngleType;
        typedef ::xsd::cxx::tree::traits< AngleType, char > AngleTraits;

        const AngleType&
        angle () const;

        AngleType&
        angle ();

        void
        angle (const AngleType& x);

        void
        angle (::std::unique_ptr< AngleType > p);

        // angleLabel
        //
        typedef ::prj::srl::spt::PLabel AngleLabelType;
        typedef ::xsd::cxx::tree::traits< AngleLabelType, char > AngleLabelTraits;

        const AngleLabelType&
        angleLabel () const;

        AngleLabelType&
        angleLabel ();

        void
        angleLabel (const AngleLabelType& x);

        void
        angleLabel (::std::unique_ptr< AngleLabelType > p);

        // axisType
        //
        typedef ::xml_schema::Int AxisTypeType;
        typedef ::xsd::cxx::tree::traits< AxisTypeType, char > AxisTypeTraits;

        const AxisTypeType&
        axisType () const;

        AxisTypeType&
        axisType ();

        void
        axisType (const AxisTypeType& x);

        // generatedMap
        //
        typedef ::prj::srl::spt::EvolveRecord GeneratedMapType;
        typedef ::xsd::cxx::tree::sequence< GeneratedMapType > GeneratedMapSequence;
        typedef GeneratedMapSequence::iterator GeneratedMapIterator;
        typedef GeneratedMapSequence::const_iterator GeneratedMapConstIterator;
        typedef ::xsd::cxx::tree::traits< GeneratedMapType, char > GeneratedMapTraits;

        const GeneratedMapSequence&
        generatedMap () const;

        GeneratedMapSequence&
        generatedMap ();

        void
        generatedMap (const GeneratedMapSequence& s);

        // lastMap
        //
        typedef ::prj::srl::spt::EvolveRecord LastMapType;
        typedef ::xsd::cxx::tree::sequence< LastMapType > LastMapSequence;
        typedef LastMapSequence::iterator LastMapIterator;
        typedef LastMapSequence::const_iterator LastMapConstIterator;
        typedef ::xsd::cxx::tree::traits< LastMapType, char > LastMapTraits;

        const LastMapSequence&
        lastMap () const;

        LastMapSequence&
        lastMap ();

        void
        lastMap (const LastMapSequence& s);

        // oWireMap
        //
        typedef ::prj::srl::spt::EvolveRecord OWireMapType;
        typedef ::xsd::cxx::tree::sequence< OWireMapType > OWireMapSequence;
        typedef OWireMapSequence::iterator OWireMapIterator;
        typedef OWireMapSequence::const_iterator OWireMapConstIterator;
        typedef ::xsd::cxx::tree::traits< OWireMapType, char > OWireMapTraits;

        const OWireMapSequence&
        oWireMap () const;

        OWireMapSequence&
        oWireMap ();

        void
        oWireMap (const OWireMapSequence& s);

        // Constructors.
        //
        Revolve (const BaseType&,
                 const SeerShapeType&,
                 const AxisOriginType&,
                 const AxisOriginLabelType&,
                 const AxisDirectionType&,
                 const AxisDirectionLabelType&,
                 const AngleType&,
                 const AngleLabelType&,
                 const AxisTypeType&);

        Revolve (::std::unique_ptr< BaseType >,
                 ::std::unique_ptr< SeerShapeType >,
                 ::std::unique_ptr< AxisOriginType >,
                 ::std::unique_ptr< AxisOriginLabelType >,
                 ::std::unique_ptr< AxisDirectionType >,
                 ::std::unique_ptr< AxisDirectionLabelType >,
                 ::std::unique_ptr< AngleType >,
                 ::std::unique_ptr< AngleLabelType >,
                 const AxisTypeType&);

        Revolve (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        Revolve (const Revolve& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        virtual Revolve*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Revolve&
        operator= (const Revolve& x);

        virtual 
        ~Revolve ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        PicksSequence picks_;
        AxisPicksSequence axisPicks_;
        ::xsd::cxx::tree::one< AxisOriginType > axisOrigin_;
        ::xsd::cxx::tree::one< AxisOriginLabelType > axisOriginLabel_;
        ::xsd::cxx::tree::one< AxisDirectionType > axisDirection_;
        ::xsd::cxx::tree::one< AxisDirectionLabelType > axisDirectionLabel_;
        ::xsd::cxx::tree::one< AngleType > angle_;
        ::xsd::cxx::tree::one< AngleLabelType > angleLabel_;
        ::xsd::cxx::tree::one< AxisTypeType > axisType_;
        GeneratedMapSequence generatedMap_;
        LastMapSequence lastMap_;
        OWireMapSequence oWireMap_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace rvls
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace rvls
    {
      void
      operator<< (::xercesc::DOMElement&, const Revolve&);

      // Serialize to std::ostream.
      //

      void
      revolve (::std::ostream& os,
               const ::prj::srl::rvls::Revolve& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      revolve (::std::ostream& os,
               const ::prj::srl::rvls::Revolve& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      revolve (::std::ostream& os,
               const ::prj::srl::rvls::Revolve& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      revolve (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::rvls::Revolve& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      revolve (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::rvls::Revolve& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      revolve (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::rvls::Revolve& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      revolve (::xercesc::DOMDocument& d,
               const ::prj::srl::rvls::Revolve& x,
               ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      revolve (const ::prj::srl::rvls::Revolve& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_RVLS_PRJSRLRVLSREVOLVE_H
