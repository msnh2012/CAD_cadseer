// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_TSCS_PRJSRLTSCSTRANSITIONCURVE_H
#define PRJ_SRL_TSCS_PRJSRLTSCSTRANSITIONCURVE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace tscs
    {
      class TransitionCurve;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptseershape.h"

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace tscs
    {
      class TransitionCurve: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // picks
        //
        typedef ::prj::srl::spt::Parameter PicksType;
        typedef ::xsd::cxx::tree::traits< PicksType, char > PicksTraits;

        const PicksType&
        picks () const;

        PicksType&
        picks ();

        void
        picks (const PicksType& x);

        void
        picks (::std::unique_ptr< PicksType > p);

        // direction0
        //
        typedef ::prj::srl::spt::Parameter Direction0Type;
        typedef ::xsd::cxx::tree::traits< Direction0Type, char > Direction0Traits;

        const Direction0Type&
        direction0 () const;

        Direction0Type&
        direction0 ();

        void
        direction0 (const Direction0Type& x);

        void
        direction0 (::std::unique_ptr< Direction0Type > p);

        // direction1
        //
        typedef ::prj::srl::spt::Parameter Direction1Type;
        typedef ::xsd::cxx::tree::traits< Direction1Type, char > Direction1Traits;

        const Direction1Type&
        direction1 () const;

        Direction1Type&
        direction1 ();

        void
        direction1 (const Direction1Type& x);

        void
        direction1 (::std::unique_ptr< Direction1Type > p);

        // magnitude0
        //
        typedef ::prj::srl::spt::Parameter Magnitude0Type;
        typedef ::xsd::cxx::tree::traits< Magnitude0Type, char > Magnitude0Traits;

        const Magnitude0Type&
        magnitude0 () const;

        Magnitude0Type&
        magnitude0 ();

        void
        magnitude0 (const Magnitude0Type& x);

        void
        magnitude0 (::std::unique_ptr< Magnitude0Type > p);

        // magnitude1
        //
        typedef ::prj::srl::spt::Parameter Magnitude1Type;
        typedef ::xsd::cxx::tree::traits< Magnitude1Type, char > Magnitude1Traits;

        const Magnitude1Type&
        magnitude1 () const;

        Magnitude1Type&
        magnitude1 ();

        void
        magnitude1 (const Magnitude1Type& x);

        void
        magnitude1 (::std::unique_ptr< Magnitude1Type > p);

        // autoScale
        //
        typedef ::prj::srl::spt::Parameter AutoScaleType;
        typedef ::xsd::cxx::tree::traits< AutoScaleType, char > AutoScaleTraits;

        const AutoScaleType&
        autoScale () const;

        AutoScaleType&
        autoScale ();

        void
        autoScale (const AutoScaleType& x);

        void
        autoScale (::std::unique_ptr< AutoScaleType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // direction0Label
        //
        typedef ::prj::srl::spt::PLabel Direction0LabelType;
        typedef ::xsd::cxx::tree::traits< Direction0LabelType, char > Direction0LabelTraits;

        const Direction0LabelType&
        direction0Label () const;

        Direction0LabelType&
        direction0Label ();

        void
        direction0Label (const Direction0LabelType& x);

        void
        direction0Label (::std::unique_ptr< Direction0LabelType > p);

        // direction1Label
        //
        typedef ::prj::srl::spt::PLabel Direction1LabelType;
        typedef ::xsd::cxx::tree::traits< Direction1LabelType, char > Direction1LabelTraits;

        const Direction1LabelType&
        direction1Label () const;

        Direction1LabelType&
        direction1Label ();

        void
        direction1Label (const Direction1LabelType& x);

        void
        direction1Label (::std::unique_ptr< Direction1LabelType > p);

        // magnitude0Label
        //
        typedef ::prj::srl::spt::PLabel Magnitude0LabelType;
        typedef ::xsd::cxx::tree::traits< Magnitude0LabelType, char > Magnitude0LabelTraits;

        const Magnitude0LabelType&
        magnitude0Label () const;

        Magnitude0LabelType&
        magnitude0Label ();

        void
        magnitude0Label (const Magnitude0LabelType& x);

        void
        magnitude0Label (::std::unique_ptr< Magnitude0LabelType > p);

        // magnitude1Label
        //
        typedef ::prj::srl::spt::PLabel Magnitude1LabelType;
        typedef ::xsd::cxx::tree::traits< Magnitude1LabelType, char > Magnitude1LabelTraits;

        const Magnitude1LabelType&
        magnitude1Label () const;

        Magnitude1LabelType&
        magnitude1Label ();

        void
        magnitude1Label (const Magnitude1LabelType& x);

        void
        magnitude1Label (::std::unique_ptr< Magnitude1LabelType > p);

        // autoScaleLabel
        //
        typedef ::prj::srl::spt::PLabel AutoScaleLabelType;
        typedef ::xsd::cxx::tree::traits< AutoScaleLabelType, char > AutoScaleLabelTraits;

        const AutoScaleLabelType&
        autoScaleLabel () const;

        AutoScaleLabelType&
        autoScaleLabel ();

        void
        autoScaleLabel (const AutoScaleLabelType& x);

        void
        autoScaleLabel (::std::unique_ptr< AutoScaleLabelType > p);

        // curveId
        //
        typedef ::xml_schema::String CurveIdType;
        typedef ::xsd::cxx::tree::traits< CurveIdType, char > CurveIdTraits;

        const CurveIdType&
        curveId () const;

        CurveIdType&
        curveId ();

        void
        curveId (const CurveIdType& x);

        void
        curveId (::std::unique_ptr< CurveIdType > p);

        static const CurveIdType&
        curveId_default_value ();

        // vertex0Id
        //
        typedef ::xml_schema::String Vertex0IdType;
        typedef ::xsd::cxx::tree::traits< Vertex0IdType, char > Vertex0IdTraits;

        const Vertex0IdType&
        vertex0Id () const;

        Vertex0IdType&
        vertex0Id ();

        void
        vertex0Id (const Vertex0IdType& x);

        void
        vertex0Id (::std::unique_ptr< Vertex0IdType > p);

        static const Vertex0IdType&
        vertex0Id_default_value ();

        // vertex1Id
        //
        typedef ::xml_schema::String Vertex1IdType;
        typedef ::xsd::cxx::tree::traits< Vertex1IdType, char > Vertex1IdTraits;

        const Vertex1IdType&
        vertex1Id () const;

        Vertex1IdType&
        vertex1Id ();

        void
        vertex1Id (const Vertex1IdType& x);

        void
        vertex1Id (::std::unique_ptr< Vertex1IdType > p);

        static const Vertex1IdType&
        vertex1Id_default_value ();

        // Constructors.
        //
        TransitionCurve (const BaseType&,
                         const PicksType&,
                         const Direction0Type&,
                         const Direction1Type&,
                         const Magnitude0Type&,
                         const Magnitude1Type&,
                         const AutoScaleType&,
                         const SeerShapeType&,
                         const Direction0LabelType&,
                         const Direction1LabelType&,
                         const Magnitude0LabelType&,
                         const Magnitude1LabelType&,
                         const AutoScaleLabelType&,
                         const CurveIdType&,
                         const Vertex0IdType&,
                         const Vertex1IdType&);

        TransitionCurve (::std::unique_ptr< BaseType >,
                         ::std::unique_ptr< PicksType >,
                         ::std::unique_ptr< Direction0Type >,
                         ::std::unique_ptr< Direction1Type >,
                         ::std::unique_ptr< Magnitude0Type >,
                         ::std::unique_ptr< Magnitude1Type >,
                         ::std::unique_ptr< AutoScaleType >,
                         ::std::unique_ptr< SeerShapeType >,
                         ::std::unique_ptr< Direction0LabelType >,
                         ::std::unique_ptr< Direction1LabelType >,
                         ::std::unique_ptr< Magnitude0LabelType >,
                         ::std::unique_ptr< Magnitude1LabelType >,
                         ::std::unique_ptr< AutoScaleLabelType >,
                         const CurveIdType&,
                         const Vertex0IdType&,
                         const Vertex1IdType&);

        TransitionCurve (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

        TransitionCurve (const TransitionCurve& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

        virtual TransitionCurve*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        TransitionCurve&
        operator= (const TransitionCurve& x);

        virtual 
        ~TransitionCurve ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< PicksType > picks_;
        ::xsd::cxx::tree::one< Direction0Type > direction0_;
        ::xsd::cxx::tree::one< Direction1Type > direction1_;
        ::xsd::cxx::tree::one< Magnitude0Type > magnitude0_;
        ::xsd::cxx::tree::one< Magnitude1Type > magnitude1_;
        ::xsd::cxx::tree::one< AutoScaleType > autoScale_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< Direction0LabelType > direction0Label_;
        ::xsd::cxx::tree::one< Direction1LabelType > direction1Label_;
        ::xsd::cxx::tree::one< Magnitude0LabelType > magnitude0Label_;
        ::xsd::cxx::tree::one< Magnitude1LabelType > magnitude1Label_;
        ::xsd::cxx::tree::one< AutoScaleLabelType > autoScaleLabel_;
        ::xsd::cxx::tree::one< CurveIdType > curveId_;
        static const CurveIdType curveId_default_value_;
        ::xsd::cxx::tree::one< Vertex0IdType > vertex0Id_;
        static const Vertex0IdType vertex0Id_default_value_;
        ::xsd::cxx::tree::one< Vertex1IdType > vertex1Id_;
        static const Vertex1IdType vertex1Id_default_value_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace tscs
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace tscs
    {
      void
      operator<< (::xercesc::DOMElement&, const TransitionCurve&);

      // Serialize to std::ostream.
      //

      void
      transitionCurve (::std::ostream& os,
                       const ::prj::srl::tscs::TransitionCurve& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      void
      transitionCurve (::std::ostream& os,
                       const ::prj::srl::tscs::TransitionCurve& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      void
      transitionCurve (::std::ostream& os,
                       const ::prj::srl::tscs::TransitionCurve& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      transitionCurve (::xercesc::XMLFormatTarget& ft,
                       const ::prj::srl::tscs::TransitionCurve& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      void
      transitionCurve (::xercesc::XMLFormatTarget& ft,
                       const ::prj::srl::tscs::TransitionCurve& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      void
      transitionCurve (::xercesc::XMLFormatTarget& ft,
                       const ::prj::srl::tscs::TransitionCurve& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      transitionCurve (::xercesc::DOMDocument& d,
                       const ::prj::srl::tscs::TransitionCurve& x,
                       ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      transitionCurve (const ::prj::srl::tscs::TransitionCurve& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_TSCS_PRJSRLTSCSTRANSITIONCURVE_H
