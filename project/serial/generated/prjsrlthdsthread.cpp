// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlthdsthread.h"

namespace prj
{
  namespace srl
  {
    namespace thds
    {
      // Thread
      // 

      const Thread::BaseType& Thread::
      base () const
      {
        return this->base_.get ();
      }

      Thread::BaseType& Thread::
      base ()
      {
        return this->base_.get ();
      }

      void Thread::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void Thread::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const Thread::SeerShapeType& Thread::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      Thread::SeerShapeType& Thread::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void Thread::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void Thread::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const Thread::DiameterType& Thread::
      diameter () const
      {
        return this->diameter_.get ();
      }

      Thread::DiameterType& Thread::
      diameter ()
      {
        return this->diameter_.get ();
      }

      void Thread::
      diameter (const DiameterType& x)
      {
        this->diameter_.set (x);
      }

      void Thread::
      diameter (::std::unique_ptr< DiameterType > x)
      {
        this->diameter_.set (std::move (x));
      }

      const Thread::PitchType& Thread::
      pitch () const
      {
        return this->pitch_.get ();
      }

      Thread::PitchType& Thread::
      pitch ()
      {
        return this->pitch_.get ();
      }

      void Thread::
      pitch (const PitchType& x)
      {
        this->pitch_.set (x);
      }

      void Thread::
      pitch (::std::unique_ptr< PitchType > x)
      {
        this->pitch_.set (std::move (x));
      }

      const Thread::LengthType& Thread::
      length () const
      {
        return this->length_.get ();
      }

      Thread::LengthType& Thread::
      length ()
      {
        return this->length_.get ();
      }

      void Thread::
      length (const LengthType& x)
      {
        this->length_.set (x);
      }

      void Thread::
      length (::std::unique_ptr< LengthType > x)
      {
        this->length_.set (std::move (x));
      }

      const Thread::AngleType& Thread::
      angle () const
      {
        return this->angle_.get ();
      }

      Thread::AngleType& Thread::
      angle ()
      {
        return this->angle_.get ();
      }

      void Thread::
      angle (const AngleType& x)
      {
        this->angle_.set (x);
      }

      void Thread::
      angle (::std::unique_ptr< AngleType > x)
      {
        this->angle_.set (std::move (x));
      }

      const Thread::InternalType& Thread::
      internal () const
      {
        return this->internal_.get ();
      }

      Thread::InternalType& Thread::
      internal ()
      {
        return this->internal_.get ();
      }

      void Thread::
      internal (const InternalType& x)
      {
        this->internal_.set (x);
      }

      void Thread::
      internal (::std::unique_ptr< InternalType > x)
      {
        this->internal_.set (std::move (x));
      }

      const Thread::FakeType& Thread::
      fake () const
      {
        return this->fake_.get ();
      }

      Thread::FakeType& Thread::
      fake ()
      {
        return this->fake_.get ();
      }

      void Thread::
      fake (const FakeType& x)
      {
        this->fake_.set (x);
      }

      void Thread::
      fake (::std::unique_ptr< FakeType > x)
      {
        this->fake_.set (std::move (x));
      }

      const Thread::LeftHandedType& Thread::
      leftHanded () const
      {
        return this->leftHanded_.get ();
      }

      Thread::LeftHandedType& Thread::
      leftHanded ()
      {
        return this->leftHanded_.get ();
      }

      void Thread::
      leftHanded (const LeftHandedType& x)
      {
        this->leftHanded_.set (x);
      }

      void Thread::
      leftHanded (::std::unique_ptr< LeftHandedType > x)
      {
        this->leftHanded_.set (std::move (x));
      }

      const Thread::CsysType& Thread::
      csys () const
      {
        return this->csys_.get ();
      }

      Thread::CsysType& Thread::
      csys ()
      {
        return this->csys_.get ();
      }

      void Thread::
      csys (const CsysType& x)
      {
        this->csys_.set (x);
      }

      void Thread::
      csys (::std::unique_ptr< CsysType > x)
      {
        this->csys_.set (std::move (x));
      }

      const Thread::DiameterLabelType& Thread::
      diameterLabel () const
      {
        return this->diameterLabel_.get ();
      }

      Thread::DiameterLabelType& Thread::
      diameterLabel ()
      {
        return this->diameterLabel_.get ();
      }

      void Thread::
      diameterLabel (const DiameterLabelType& x)
      {
        this->diameterLabel_.set (x);
      }

      void Thread::
      diameterLabel (::std::unique_ptr< DiameterLabelType > x)
      {
        this->diameterLabel_.set (std::move (x));
      }

      const Thread::PitchLabelType& Thread::
      pitchLabel () const
      {
        return this->pitchLabel_.get ();
      }

      Thread::PitchLabelType& Thread::
      pitchLabel ()
      {
        return this->pitchLabel_.get ();
      }

      void Thread::
      pitchLabel (const PitchLabelType& x)
      {
        this->pitchLabel_.set (x);
      }

      void Thread::
      pitchLabel (::std::unique_ptr< PitchLabelType > x)
      {
        this->pitchLabel_.set (std::move (x));
      }

      const Thread::LengthLabelType& Thread::
      lengthLabel () const
      {
        return this->lengthLabel_.get ();
      }

      Thread::LengthLabelType& Thread::
      lengthLabel ()
      {
        return this->lengthLabel_.get ();
      }

      void Thread::
      lengthLabel (const LengthLabelType& x)
      {
        this->lengthLabel_.set (x);
      }

      void Thread::
      lengthLabel (::std::unique_ptr< LengthLabelType > x)
      {
        this->lengthLabel_.set (std::move (x));
      }

      const Thread::AngleLabelType& Thread::
      angleLabel () const
      {
        return this->angleLabel_.get ();
      }

      Thread::AngleLabelType& Thread::
      angleLabel ()
      {
        return this->angleLabel_.get ();
      }

      void Thread::
      angleLabel (const AngleLabelType& x)
      {
        this->angleLabel_.set (x);
      }

      void Thread::
      angleLabel (::std::unique_ptr< AngleLabelType > x)
      {
        this->angleLabel_.set (std::move (x));
      }

      const Thread::InternalLabelType& Thread::
      internalLabel () const
      {
        return this->internalLabel_.get ();
      }

      Thread::InternalLabelType& Thread::
      internalLabel ()
      {
        return this->internalLabel_.get ();
      }

      void Thread::
      internalLabel (const InternalLabelType& x)
      {
        this->internalLabel_.set (x);
      }

      void Thread::
      internalLabel (::std::unique_ptr< InternalLabelType > x)
      {
        this->internalLabel_.set (std::move (x));
      }

      const Thread::FakeLabelType& Thread::
      fakeLabel () const
      {
        return this->fakeLabel_.get ();
      }

      Thread::FakeLabelType& Thread::
      fakeLabel ()
      {
        return this->fakeLabel_.get ();
      }

      void Thread::
      fakeLabel (const FakeLabelType& x)
      {
        this->fakeLabel_.set (x);
      }

      void Thread::
      fakeLabel (::std::unique_ptr< FakeLabelType > x)
      {
        this->fakeLabel_.set (std::move (x));
      }

      const Thread::LeftHandedLabelType& Thread::
      leftHandedLabel () const
      {
        return this->leftHandedLabel_.get ();
      }

      Thread::LeftHandedLabelType& Thread::
      leftHandedLabel ()
      {
        return this->leftHandedLabel_.get ();
      }

      void Thread::
      leftHandedLabel (const LeftHandedLabelType& x)
      {
        this->leftHandedLabel_.set (x);
      }

      void Thread::
      leftHandedLabel (::std::unique_ptr< LeftHandedLabelType > x)
      {
        this->leftHandedLabel_.set (std::move (x));
      }

      const Thread::CsysDraggerType& Thread::
      csysDragger () const
      {
        return this->csysDragger_.get ();
      }

      Thread::CsysDraggerType& Thread::
      csysDragger ()
      {
        return this->csysDragger_.get ();
      }

      void Thread::
      csysDragger (const CsysDraggerType& x)
      {
        this->csysDragger_.set (x);
      }

      void Thread::
      csysDragger (::std::unique_ptr< CsysDraggerType > x)
      {
        this->csysDragger_.set (std::move (x));
      }

      const Thread::SolidIdType& Thread::
      solidId () const
      {
        return this->solidId_.get ();
      }

      Thread::SolidIdType& Thread::
      solidId ()
      {
        return this->solidId_.get ();
      }

      void Thread::
      solidId (const SolidIdType& x)
      {
        this->solidId_.set (x);
      }

      void Thread::
      solidId (::std::unique_ptr< SolidIdType > x)
      {
        this->solidId_.set (std::move (x));
      }

      const Thread::SolidIdType& Thread::
      solidId_default_value ()
      {
        return solidId_default_value_;
      }

      const Thread::IdsSequence& Thread::
      ids () const
      {
        return this->ids_;
      }

      Thread::IdsSequence& Thread::
      ids ()
      {
        return this->ids_;
      }

      void Thread::
      ids (const IdsSequence& s)
      {
        this->ids_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace thds
    {
      // Thread
      //

      const Thread::SolidIdType Thread::solidId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      Thread::
      Thread (const BaseType& base,
              const SeerShapeType& seerShape,
              const DiameterType& diameter,
              const PitchType& pitch,
              const LengthType& length,
              const AngleType& angle,
              const InternalType& internal,
              const FakeType& fake,
              const LeftHandedType& leftHanded,
              const CsysType& csys,
              const DiameterLabelType& diameterLabel,
              const PitchLabelType& pitchLabel,
              const LengthLabelType& lengthLabel,
              const AngleLabelType& angleLabel,
              const InternalLabelType& internalLabel,
              const FakeLabelType& fakeLabel,
              const LeftHandedLabelType& leftHandedLabel,
              const CsysDraggerType& csysDragger,
              const SolidIdType& solidId)
      : ::xml_schema::Type (),
        base_ (base, this),
        seerShape_ (seerShape, this),
        diameter_ (diameter, this),
        pitch_ (pitch, this),
        length_ (length, this),
        angle_ (angle, this),
        internal_ (internal, this),
        fake_ (fake, this),
        leftHanded_ (leftHanded, this),
        csys_ (csys, this),
        diameterLabel_ (diameterLabel, this),
        pitchLabel_ (pitchLabel, this),
        lengthLabel_ (lengthLabel, this),
        angleLabel_ (angleLabel, this),
        internalLabel_ (internalLabel, this),
        fakeLabel_ (fakeLabel, this),
        leftHandedLabel_ (leftHandedLabel, this),
        csysDragger_ (csysDragger, this),
        solidId_ (solidId, this),
        ids_ (this)
      {
      }

      Thread::
      Thread (::std::unique_ptr< BaseType > base,
              ::std::unique_ptr< SeerShapeType > seerShape,
              ::std::unique_ptr< DiameterType > diameter,
              ::std::unique_ptr< PitchType > pitch,
              ::std::unique_ptr< LengthType > length,
              ::std::unique_ptr< AngleType > angle,
              ::std::unique_ptr< InternalType > internal,
              ::std::unique_ptr< FakeType > fake,
              ::std::unique_ptr< LeftHandedType > leftHanded,
              ::std::unique_ptr< CsysType > csys,
              ::std::unique_ptr< DiameterLabelType > diameterLabel,
              ::std::unique_ptr< PitchLabelType > pitchLabel,
              ::std::unique_ptr< LengthLabelType > lengthLabel,
              ::std::unique_ptr< AngleLabelType > angleLabel,
              ::std::unique_ptr< InternalLabelType > internalLabel,
              ::std::unique_ptr< FakeLabelType > fakeLabel,
              ::std::unique_ptr< LeftHandedLabelType > leftHandedLabel,
              ::std::unique_ptr< CsysDraggerType > csysDragger,
              const SolidIdType& solidId)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        seerShape_ (std::move (seerShape), this),
        diameter_ (std::move (diameter), this),
        pitch_ (std::move (pitch), this),
        length_ (std::move (length), this),
        angle_ (std::move (angle), this),
        internal_ (std::move (internal), this),
        fake_ (std::move (fake), this),
        leftHanded_ (std::move (leftHanded), this),
        csys_ (std::move (csys), this),
        diameterLabel_ (std::move (diameterLabel), this),
        pitchLabel_ (std::move (pitchLabel), this),
        lengthLabel_ (std::move (lengthLabel), this),
        angleLabel_ (std::move (angleLabel), this),
        internalLabel_ (std::move (internalLabel), this),
        fakeLabel_ (std::move (fakeLabel), this),
        leftHandedLabel_ (std::move (leftHandedLabel), this),
        csysDragger_ (std::move (csysDragger), this),
        solidId_ (solidId, this),
        ids_ (this)
      {
      }

      Thread::
      Thread (const Thread& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        seerShape_ (x.seerShape_, f, this),
        diameter_ (x.diameter_, f, this),
        pitch_ (x.pitch_, f, this),
        length_ (x.length_, f, this),
        angle_ (x.angle_, f, this),
        internal_ (x.internal_, f, this),
        fake_ (x.fake_, f, this),
        leftHanded_ (x.leftHanded_, f, this),
        csys_ (x.csys_, f, this),
        diameterLabel_ (x.diameterLabel_, f, this),
        pitchLabel_ (x.pitchLabel_, f, this),
        lengthLabel_ (x.lengthLabel_, f, this),
        angleLabel_ (x.angleLabel_, f, this),
        internalLabel_ (x.internalLabel_, f, this),
        fakeLabel_ (x.fakeLabel_, f, this),
        leftHandedLabel_ (x.leftHandedLabel_, f, this),
        csysDragger_ (x.csysDragger_, f, this),
        solidId_ (x.solidId_, f, this),
        ids_ (x.ids_, f, this)
      {
      }

      Thread::
      Thread (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        seerShape_ (this),
        diameter_ (this),
        pitch_ (this),
        length_ (this),
        angle_ (this),
        internal_ (this),
        fake_ (this),
        leftHanded_ (this),
        csys_ (this),
        diameterLabel_ (this),
        pitchLabel_ (this),
        lengthLabel_ (this),
        angleLabel_ (this),
        internalLabel_ (this),
        fakeLabel_ (this),
        leftHandedLabel_ (this),
        csysDragger_ (this),
        solidId_ (this),
        ids_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Thread::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // diameter
          //
          if (n.name () == "diameter" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DiameterType > r (
              DiameterTraits::create (i, f, this));

            if (!diameter_.present ())
            {
              this->diameter_.set (::std::move (r));
              continue;
            }
          }

          // pitch
          //
          if (n.name () == "pitch" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PitchType > r (
              PitchTraits::create (i, f, this));

            if (!pitch_.present ())
            {
              this->pitch_.set (::std::move (r));
              continue;
            }
          }

          // length
          //
          if (n.name () == "length" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< LengthType > r (
              LengthTraits::create (i, f, this));

            if (!length_.present ())
            {
              this->length_.set (::std::move (r));
              continue;
            }
          }

          // angle
          //
          if (n.name () == "angle" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AngleType > r (
              AngleTraits::create (i, f, this));

            if (!angle_.present ())
            {
              this->angle_.set (::std::move (r));
              continue;
            }
          }

          // internal
          //
          if (n.name () == "internal" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< InternalType > r (
              InternalTraits::create (i, f, this));

            if (!internal_.present ())
            {
              this->internal_.set (::std::move (r));
              continue;
            }
          }

          // fake
          //
          if (n.name () == "fake" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FakeType > r (
              FakeTraits::create (i, f, this));

            if (!fake_.present ())
            {
              this->fake_.set (::std::move (r));
              continue;
            }
          }

          // leftHanded
          //
          if (n.name () == "leftHanded" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< LeftHandedType > r (
              LeftHandedTraits::create (i, f, this));

            if (!leftHanded_.present ())
            {
              this->leftHanded_.set (::std::move (r));
              continue;
            }
          }

          // csys
          //
          if (n.name () == "csys" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysType > r (
              CsysTraits::create (i, f, this));

            if (!csys_.present ())
            {
              this->csys_.set (::std::move (r));
              continue;
            }
          }

          // diameterLabel
          //
          if (n.name () == "diameterLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DiameterLabelType > r (
              DiameterLabelTraits::create (i, f, this));

            if (!diameterLabel_.present ())
            {
              this->diameterLabel_.set (::std::move (r));
              continue;
            }
          }

          // pitchLabel
          //
          if (n.name () == "pitchLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PitchLabelType > r (
              PitchLabelTraits::create (i, f, this));

            if (!pitchLabel_.present ())
            {
              this->pitchLabel_.set (::std::move (r));
              continue;
            }
          }

          // lengthLabel
          //
          if (n.name () == "lengthLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< LengthLabelType > r (
              LengthLabelTraits::create (i, f, this));

            if (!lengthLabel_.present ())
            {
              this->lengthLabel_.set (::std::move (r));
              continue;
            }
          }

          // angleLabel
          //
          if (n.name () == "angleLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AngleLabelType > r (
              AngleLabelTraits::create (i, f, this));

            if (!angleLabel_.present ())
            {
              this->angleLabel_.set (::std::move (r));
              continue;
            }
          }

          // internalLabel
          //
          if (n.name () == "internalLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< InternalLabelType > r (
              InternalLabelTraits::create (i, f, this));

            if (!internalLabel_.present ())
            {
              this->internalLabel_.set (::std::move (r));
              continue;
            }
          }

          // fakeLabel
          //
          if (n.name () == "fakeLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FakeLabelType > r (
              FakeLabelTraits::create (i, f, this));

            if (!fakeLabel_.present ())
            {
              this->fakeLabel_.set (::std::move (r));
              continue;
            }
          }

          // leftHandedLabel
          //
          if (n.name () == "leftHandedLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< LeftHandedLabelType > r (
              LeftHandedLabelTraits::create (i, f, this));

            if (!leftHandedLabel_.present ())
            {
              this->leftHandedLabel_.set (::std::move (r));
              continue;
            }
          }

          // csysDragger
          //
          if (n.name () == "csysDragger" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysDraggerType > r (
              CsysDraggerTraits::create (i, f, this));

            if (!csysDragger_.present ())
            {
              this->csysDragger_.set (::std::move (r));
              continue;
            }
          }

          // solidId
          //
          if (n.name () == "solidId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SolidIdType > r (
              SolidIdTraits::create (i, f, this));

            if (!solidId_.present ())
            {
              this->solidId_.set (::std::move (r));
              continue;
            }
          }

          // ids
          //
          if (n.name () == "ids" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IdsType > r (
              IdsTraits::create (i, f, this));

            this->ids_.push_back (::std::move (r));
            continue;
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!diameter_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "diameter",
            "");
        }

        if (!pitch_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pitch",
            "");
        }

        if (!length_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "length",
            "");
        }

        if (!angle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "angle",
            "");
        }

        if (!internal_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "internal",
            "");
        }

        if (!fake_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "fake",
            "");
        }

        if (!leftHanded_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "leftHanded",
            "");
        }

        if (!csys_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csys",
            "");
        }

        if (!diameterLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "diameterLabel",
            "");
        }

        if (!pitchLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pitchLabel",
            "");
        }

        if (!lengthLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "lengthLabel",
            "");
        }

        if (!angleLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "angleLabel",
            "");
        }

        if (!internalLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "internalLabel",
            "");
        }

        if (!fakeLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "fakeLabel",
            "");
        }

        if (!leftHandedLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "leftHandedLabel",
            "");
        }

        if (!csysDragger_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysDragger",
            "");
        }

        if (!solidId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "solidId",
            "");
        }
      }

      Thread* Thread::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Thread (*this, f, c);
      }

      Thread& Thread::
      operator= (const Thread& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->seerShape_ = x.seerShape_;
          this->diameter_ = x.diameter_;
          this->pitch_ = x.pitch_;
          this->length_ = x.length_;
          this->angle_ = x.angle_;
          this->internal_ = x.internal_;
          this->fake_ = x.fake_;
          this->leftHanded_ = x.leftHanded_;
          this->csys_ = x.csys_;
          this->diameterLabel_ = x.diameterLabel_;
          this->pitchLabel_ = x.pitchLabel_;
          this->lengthLabel_ = x.lengthLabel_;
          this->angleLabel_ = x.angleLabel_;
          this->internalLabel_ = x.internalLabel_;
          this->fakeLabel_ = x.fakeLabel_;
          this->leftHandedLabel_ = x.leftHandedLabel_;
          this->csysDragger_ = x.csysDragger_;
          this->solidId_ = x.solidId_;
          this->ids_ = x.ids_;
        }

        return *this;
      }

      Thread::
      ~Thread ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace thds
    {
      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (const ::std::string& u,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::thds::Thread > (
          ::prj::srl::thds::thread (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (const ::std::string& u,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::thds::Thread > (
          ::prj::srl::thds::thread (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::thds::Thread > (
          ::prj::srl::thds::thread (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::thds::thread (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::thds::thread (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::thds::thread (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::thds::thread (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::thds::thread (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::thds::thread (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::xercesc::InputSource& i,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::thds::Thread > (
          ::prj::srl::thds::thread (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::xercesc::InputSource& i,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::thds::Thread > (
          ::prj::srl::thds::thread (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::thds::Thread > (
          ::prj::srl::thds::thread (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (const ::xercesc::DOMDocument& doc,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::thds::Thread > (
            ::prj::srl::thds::thread (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "thread" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/thds")
        {
          ::std::unique_ptr< ::prj::srl::thds::Thread > r (
            ::xsd::cxx::tree::traits< ::prj::srl::thds::Thread, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "thread",
          "http://www.cadseer.com/prj/srl/thds");
      }

      ::std::unique_ptr< ::prj::srl::thds::Thread >
      thread (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "thread" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/thds")
        {
          ::std::unique_ptr< ::prj::srl::thds::Thread > r (
            ::xsd::cxx::tree::traits< ::prj::srl::thds::Thread, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "thread",
          "http://www.cadseer.com/prj/srl/thds");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace thds
    {
      void
      operator<< (::xercesc::DOMElement& e, const Thread& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // diameter
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "diameter",
              e));

          s << i.diameter ();
        }

        // pitch
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pitch",
              e));

          s << i.pitch ();
        }

        // length
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "length",
              e));

          s << i.length ();
        }

        // angle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "angle",
              e));

          s << i.angle ();
        }

        // internal
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "internal",
              e));

          s << i.internal ();
        }

        // fake
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "fake",
              e));

          s << i.fake ();
        }

        // leftHanded
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "leftHanded",
              e));

          s << i.leftHanded ();
        }

        // csys
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csys",
              e));

          s << i.csys ();
        }

        // diameterLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "diameterLabel",
              e));

          s << i.diameterLabel ();
        }

        // pitchLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pitchLabel",
              e));

          s << i.pitchLabel ();
        }

        // lengthLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "lengthLabel",
              e));

          s << i.lengthLabel ();
        }

        // angleLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "angleLabel",
              e));

          s << i.angleLabel ();
        }

        // internalLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "internalLabel",
              e));

          s << i.internalLabel ();
        }

        // fakeLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "fakeLabel",
              e));

          s << i.fakeLabel ();
        }

        // leftHandedLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "leftHandedLabel",
              e));

          s << i.leftHandedLabel ();
        }

        // csysDragger
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysDragger",
              e));

          s << i.csysDragger ();
        }

        // solidId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "solidId",
              e));

          s << i.solidId ();
        }

        // ids
        //
        for (Thread::IdsConstIterator
             b (i.ids ().begin ()), n (i.ids ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ids",
              e));

          s << *b;
        }
      }

      void
      thread (::std::ostream& o,
              const ::prj::srl::thds::Thread& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::thds::thread (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      thread (::std::ostream& o,
              const ::prj::srl::thds::Thread& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::thds::thread (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      thread (::std::ostream& o,
              const ::prj::srl::thds::Thread& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::thds::thread (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      thread (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::thds::Thread& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::thds::thread (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      thread (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::thds::Thread& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::thds::thread (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      thread (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::thds::Thread& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::thds::thread (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      thread (::xercesc::DOMDocument& d,
              const ::prj::srl::thds::Thread& s,
              ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "thread" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/thds")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "thread",
            "http://www.cadseer.com/prj/srl/thds");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      thread (const ::prj::srl::thds::Thread& s,
              const ::xml_schema::NamespaceInfomap& m,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "thread",
            "http://www.cadseer.com/prj/srl/thds",
            m, f));

        ::prj::srl::thds::thread (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

