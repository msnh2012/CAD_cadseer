// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlinpsinstancepolar.h"

namespace prj
{
  namespace srl
  {
    namespace inps
    {
      // InstancePolar
      // 

      const InstancePolar::BaseType& InstancePolar::
      base () const
      {
        return this->base_.get ();
      }

      InstancePolar::BaseType& InstancePolar::
      base ()
      {
        return this->base_.get ();
      }

      void InstancePolar::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void InstancePolar::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const InstancePolar::AxisTypeType& InstancePolar::
      axisType () const
      {
        return this->axisType_.get ();
      }

      InstancePolar::AxisTypeType& InstancePolar::
      axisType ()
      {
        return this->axisType_.get ();
      }

      void InstancePolar::
      axisType (const AxisTypeType& x)
      {
        this->axisType_.set (x);
      }

      void InstancePolar::
      axisType (::std::unique_ptr< AxisTypeType > x)
      {
        this->axisType_.set (std::move (x));
      }

      const InstancePolar::CsysType& InstancePolar::
      csys () const
      {
        return this->csys_.get ();
      }

      InstancePolar::CsysType& InstancePolar::
      csys ()
      {
        return this->csys_.get ();
      }

      void InstancePolar::
      csys (const CsysType& x)
      {
        this->csys_.set (x);
      }

      void InstancePolar::
      csys (::std::unique_ptr< CsysType > x)
      {
        this->csys_.set (std::move (x));
      }

      const InstancePolar::CountType& InstancePolar::
      count () const
      {
        return this->count_.get ();
      }

      InstancePolar::CountType& InstancePolar::
      count ()
      {
        return this->count_.get ();
      }

      void InstancePolar::
      count (const CountType& x)
      {
        this->count_.set (x);
      }

      void InstancePolar::
      count (::std::unique_ptr< CountType > x)
      {
        this->count_.set (std::move (x));
      }

      const InstancePolar::AngleType& InstancePolar::
      angle () const
      {
        return this->angle_.get ();
      }

      InstancePolar::AngleType& InstancePolar::
      angle ()
      {
        return this->angle_.get ();
      }

      void InstancePolar::
      angle (const AngleType& x)
      {
        this->angle_.set (x);
      }

      void InstancePolar::
      angle (::std::unique_ptr< AngleType > x)
      {
        this->angle_.set (std::move (x));
      }

      const InstancePolar::InclusiveAngleType& InstancePolar::
      inclusiveAngle () const
      {
        return this->inclusiveAngle_.get ();
      }

      InstancePolar::InclusiveAngleType& InstancePolar::
      inclusiveAngle ()
      {
        return this->inclusiveAngle_.get ();
      }

      void InstancePolar::
      inclusiveAngle (const InclusiveAngleType& x)
      {
        this->inclusiveAngle_.set (x);
      }

      void InstancePolar::
      inclusiveAngle (::std::unique_ptr< InclusiveAngleType > x)
      {
        this->inclusiveAngle_.set (std::move (x));
      }

      const InstancePolar::IncludeSourceType& InstancePolar::
      includeSource () const
      {
        return this->includeSource_.get ();
      }

      InstancePolar::IncludeSourceType& InstancePolar::
      includeSource ()
      {
        return this->includeSource_.get ();
      }

      void InstancePolar::
      includeSource (const IncludeSourceType& x)
      {
        this->includeSource_.set (x);
      }

      void InstancePolar::
      includeSource (::std::unique_ptr< IncludeSourceType > x)
      {
        this->includeSource_.set (std::move (x));
      }

      const InstancePolar::SourceType& InstancePolar::
      source () const
      {
        return this->source_.get ();
      }

      InstancePolar::SourceType& InstancePolar::
      source ()
      {
        return this->source_.get ();
      }

      void InstancePolar::
      source (const SourceType& x)
      {
        this->source_.set (x);
      }

      void InstancePolar::
      source (::std::unique_ptr< SourceType > x)
      {
        this->source_.set (std::move (x));
      }

      const InstancePolar::AxisOptional& InstancePolar::
      axis () const
      {
        return this->axis_;
      }

      InstancePolar::AxisOptional& InstancePolar::
      axis ()
      {
        return this->axis_;
      }

      void InstancePolar::
      axis (const AxisType& x)
      {
        this->axis_.set (x);
      }

      void InstancePolar::
      axis (const AxisOptional& x)
      {
        this->axis_ = x;
      }

      void InstancePolar::
      axis (::std::unique_ptr< AxisType > x)
      {
        this->axis_.set (std::move (x));
      }

      const InstancePolar::SeerShapeType& InstancePolar::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      InstancePolar::SeerShapeType& InstancePolar::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void InstancePolar::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void InstancePolar::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const InstancePolar::InstanceMapsType& InstancePolar::
      instanceMaps () const
      {
        return this->instanceMaps_.get ();
      }

      InstancePolar::InstanceMapsType& InstancePolar::
      instanceMaps ()
      {
        return this->instanceMaps_.get ();
      }

      void InstancePolar::
      instanceMaps (const InstanceMapsType& x)
      {
        this->instanceMaps_.set (x);
      }

      void InstancePolar::
      instanceMaps (::std::unique_ptr< InstanceMapsType > x)
      {
        this->instanceMaps_.set (std::move (x));
      }

      const InstancePolar::CsysDraggerType& InstancePolar::
      csysDragger () const
      {
        return this->csysDragger_.get ();
      }

      InstancePolar::CsysDraggerType& InstancePolar::
      csysDragger ()
      {
        return this->csysDragger_.get ();
      }

      void InstancePolar::
      csysDragger (const CsysDraggerType& x)
      {
        this->csysDragger_.set (x);
      }

      void InstancePolar::
      csysDragger (::std::unique_ptr< CsysDraggerType > x)
      {
        this->csysDragger_.set (std::move (x));
      }

      const InstancePolar::CountLabelType& InstancePolar::
      countLabel () const
      {
        return this->countLabel_.get ();
      }

      InstancePolar::CountLabelType& InstancePolar::
      countLabel ()
      {
        return this->countLabel_.get ();
      }

      void InstancePolar::
      countLabel (const CountLabelType& x)
      {
        this->countLabel_.set (x);
      }

      void InstancePolar::
      countLabel (::std::unique_ptr< CountLabelType > x)
      {
        this->countLabel_.set (std::move (x));
      }

      const InstancePolar::AngleLabelType& InstancePolar::
      angleLabel () const
      {
        return this->angleLabel_.get ();
      }

      InstancePolar::AngleLabelType& InstancePolar::
      angleLabel ()
      {
        return this->angleLabel_.get ();
      }

      void InstancePolar::
      angleLabel (const AngleLabelType& x)
      {
        this->angleLabel_.set (x);
      }

      void InstancePolar::
      angleLabel (::std::unique_ptr< AngleLabelType > x)
      {
        this->angleLabel_.set (std::move (x));
      }

      const InstancePolar::InclusiveAngleLabelType& InstancePolar::
      inclusiveAngleLabel () const
      {
        return this->inclusiveAngleLabel_.get ();
      }

      InstancePolar::InclusiveAngleLabelType& InstancePolar::
      inclusiveAngleLabel ()
      {
        return this->inclusiveAngleLabel_.get ();
      }

      void InstancePolar::
      inclusiveAngleLabel (const InclusiveAngleLabelType& x)
      {
        this->inclusiveAngleLabel_.set (x);
      }

      void InstancePolar::
      inclusiveAngleLabel (::std::unique_ptr< InclusiveAngleLabelType > x)
      {
        this->inclusiveAngleLabel_.set (std::move (x));
      }

      const InstancePolar::IncludeSourceLabelType& InstancePolar::
      includeSourceLabel () const
      {
        return this->includeSourceLabel_.get ();
      }

      InstancePolar::IncludeSourceLabelType& InstancePolar::
      includeSourceLabel ()
      {
        return this->includeSourceLabel_.get ();
      }

      void InstancePolar::
      includeSourceLabel (const IncludeSourceLabelType& x)
      {
        this->includeSourceLabel_.set (x);
      }

      void InstancePolar::
      includeSourceLabel (::std::unique_ptr< IncludeSourceLabelType > x)
      {
        this->includeSourceLabel_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace inps
    {
      // InstancePolar
      //

      InstancePolar::
      InstancePolar (const BaseType& base,
                     const AxisTypeType& axisType,
                     const CsysType& csys,
                     const CountType& count,
                     const AngleType& angle,
                     const InclusiveAngleType& inclusiveAngle,
                     const IncludeSourceType& includeSource,
                     const SourceType& source,
                     const SeerShapeType& seerShape,
                     const InstanceMapsType& instanceMaps,
                     const CsysDraggerType& csysDragger,
                     const CountLabelType& countLabel,
                     const AngleLabelType& angleLabel,
                     const InclusiveAngleLabelType& inclusiveAngleLabel,
                     const IncludeSourceLabelType& includeSourceLabel)
      : ::xml_schema::Type (),
        base_ (base, this),
        axisType_ (axisType, this),
        csys_ (csys, this),
        count_ (count, this),
        angle_ (angle, this),
        inclusiveAngle_ (inclusiveAngle, this),
        includeSource_ (includeSource, this),
        source_ (source, this),
        axis_ (this),
        seerShape_ (seerShape, this),
        instanceMaps_ (instanceMaps, this),
        csysDragger_ (csysDragger, this),
        countLabel_ (countLabel, this),
        angleLabel_ (angleLabel, this),
        inclusiveAngleLabel_ (inclusiveAngleLabel, this),
        includeSourceLabel_ (includeSourceLabel, this)
      {
      }

      InstancePolar::
      InstancePolar (::std::unique_ptr< BaseType > base,
                     ::std::unique_ptr< AxisTypeType > axisType,
                     ::std::unique_ptr< CsysType > csys,
                     ::std::unique_ptr< CountType > count,
                     ::std::unique_ptr< AngleType > angle,
                     ::std::unique_ptr< InclusiveAngleType > inclusiveAngle,
                     ::std::unique_ptr< IncludeSourceType > includeSource,
                     ::std::unique_ptr< SourceType > source,
                     ::std::unique_ptr< SeerShapeType > seerShape,
                     ::std::unique_ptr< InstanceMapsType > instanceMaps,
                     ::std::unique_ptr< CsysDraggerType > csysDragger,
                     ::std::unique_ptr< CountLabelType > countLabel,
                     ::std::unique_ptr< AngleLabelType > angleLabel,
                     ::std::unique_ptr< InclusiveAngleLabelType > inclusiveAngleLabel,
                     ::std::unique_ptr< IncludeSourceLabelType > includeSourceLabel)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        axisType_ (std::move (axisType), this),
        csys_ (std::move (csys), this),
        count_ (std::move (count), this),
        angle_ (std::move (angle), this),
        inclusiveAngle_ (std::move (inclusiveAngle), this),
        includeSource_ (std::move (includeSource), this),
        source_ (std::move (source), this),
        axis_ (this),
        seerShape_ (std::move (seerShape), this),
        instanceMaps_ (std::move (instanceMaps), this),
        csysDragger_ (std::move (csysDragger), this),
        countLabel_ (std::move (countLabel), this),
        angleLabel_ (std::move (angleLabel), this),
        inclusiveAngleLabel_ (std::move (inclusiveAngleLabel), this),
        includeSourceLabel_ (std::move (includeSourceLabel), this)
      {
      }

      InstancePolar::
      InstancePolar (const InstancePolar& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        axisType_ (x.axisType_, f, this),
        csys_ (x.csys_, f, this),
        count_ (x.count_, f, this),
        angle_ (x.angle_, f, this),
        inclusiveAngle_ (x.inclusiveAngle_, f, this),
        includeSource_ (x.includeSource_, f, this),
        source_ (x.source_, f, this),
        axis_ (x.axis_, f, this),
        seerShape_ (x.seerShape_, f, this),
        instanceMaps_ (x.instanceMaps_, f, this),
        csysDragger_ (x.csysDragger_, f, this),
        countLabel_ (x.countLabel_, f, this),
        angleLabel_ (x.angleLabel_, f, this),
        inclusiveAngleLabel_ (x.inclusiveAngleLabel_, f, this),
        includeSourceLabel_ (x.includeSourceLabel_, f, this)
      {
      }

      InstancePolar::
      InstancePolar (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        axisType_ (this),
        csys_ (this),
        count_ (this),
        angle_ (this),
        inclusiveAngle_ (this),
        includeSource_ (this),
        source_ (this),
        axis_ (this),
        seerShape_ (this),
        instanceMaps_ (this),
        csysDragger_ (this),
        countLabel_ (this),
        angleLabel_ (this),
        inclusiveAngleLabel_ (this),
        includeSourceLabel_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void InstancePolar::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // axisType
          //
          if (n.name () == "axisType" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisTypeType > r (
              AxisTypeTraits::create (i, f, this));

            if (!axisType_.present ())
            {
              this->axisType_.set (::std::move (r));
              continue;
            }
          }

          // csys
          //
          if (n.name () == "csys" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysType > r (
              CsysTraits::create (i, f, this));

            if (!csys_.present ())
            {
              this->csys_.set (::std::move (r));
              continue;
            }
          }

          // count
          //
          if (n.name () == "count" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CountType > r (
              CountTraits::create (i, f, this));

            if (!count_.present ())
            {
              this->count_.set (::std::move (r));
              continue;
            }
          }

          // angle
          //
          if (n.name () == "angle" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AngleType > r (
              AngleTraits::create (i, f, this));

            if (!angle_.present ())
            {
              this->angle_.set (::std::move (r));
              continue;
            }
          }

          // inclusiveAngle
          //
          if (n.name () == "inclusiveAngle" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< InclusiveAngleType > r (
              InclusiveAngleTraits::create (i, f, this));

            if (!inclusiveAngle_.present ())
            {
              this->inclusiveAngle_.set (::std::move (r));
              continue;
            }
          }

          // includeSource
          //
          if (n.name () == "includeSource" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IncludeSourceType > r (
              IncludeSourceTraits::create (i, f, this));

            if (!includeSource_.present ())
            {
              this->includeSource_.set (::std::move (r));
              continue;
            }
          }

          // source
          //
          if (n.name () == "source" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SourceType > r (
              SourceTraits::create (i, f, this));

            if (!source_.present ())
            {
              this->source_.set (::std::move (r));
              continue;
            }
          }

          // axis
          //
          if (n.name () == "axis" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisType > r (
              AxisTraits::create (i, f, this));

            if (!this->axis_)
            {
              this->axis_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // instanceMaps
          //
          if (n.name () == "instanceMaps" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< InstanceMapsType > r (
              InstanceMapsTraits::create (i, f, this));

            if (!instanceMaps_.present ())
            {
              this->instanceMaps_.set (::std::move (r));
              continue;
            }
          }

          // csysDragger
          //
          if (n.name () == "csysDragger" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysDraggerType > r (
              CsysDraggerTraits::create (i, f, this));

            if (!csysDragger_.present ())
            {
              this->csysDragger_.set (::std::move (r));
              continue;
            }
          }

          // countLabel
          //
          if (n.name () == "countLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CountLabelType > r (
              CountLabelTraits::create (i, f, this));

            if (!countLabel_.present ())
            {
              this->countLabel_.set (::std::move (r));
              continue;
            }
          }

          // angleLabel
          //
          if (n.name () == "angleLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AngleLabelType > r (
              AngleLabelTraits::create (i, f, this));

            if (!angleLabel_.present ())
            {
              this->angleLabel_.set (::std::move (r));
              continue;
            }
          }

          // inclusiveAngleLabel
          //
          if (n.name () == "inclusiveAngleLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< InclusiveAngleLabelType > r (
              InclusiveAngleLabelTraits::create (i, f, this));

            if (!inclusiveAngleLabel_.present ())
            {
              this->inclusiveAngleLabel_.set (::std::move (r));
              continue;
            }
          }

          // includeSourceLabel
          //
          if (n.name () == "includeSourceLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IncludeSourceLabelType > r (
              IncludeSourceLabelTraits::create (i, f, this));

            if (!includeSourceLabel_.present ())
            {
              this->includeSourceLabel_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!axisType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisType",
            "");
        }

        if (!csys_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csys",
            "");
        }

        if (!count_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "count",
            "");
        }

        if (!angle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "angle",
            "");
        }

        if (!inclusiveAngle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "inclusiveAngle",
            "");
        }

        if (!includeSource_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "includeSource",
            "");
        }

        if (!source_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "source",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!instanceMaps_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "instanceMaps",
            "");
        }

        if (!csysDragger_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysDragger",
            "");
        }

        if (!countLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "countLabel",
            "");
        }

        if (!angleLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "angleLabel",
            "");
        }

        if (!inclusiveAngleLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "inclusiveAngleLabel",
            "");
        }

        if (!includeSourceLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "includeSourceLabel",
            "");
        }
      }

      InstancePolar* InstancePolar::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class InstancePolar (*this, f, c);
      }

      InstancePolar& InstancePolar::
      operator= (const InstancePolar& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->axisType_ = x.axisType_;
          this->csys_ = x.csys_;
          this->count_ = x.count_;
          this->angle_ = x.angle_;
          this->inclusiveAngle_ = x.inclusiveAngle_;
          this->includeSource_ = x.includeSource_;
          this->source_ = x.source_;
          this->axis_ = x.axis_;
          this->seerShape_ = x.seerShape_;
          this->instanceMaps_ = x.instanceMaps_;
          this->csysDragger_ = x.csysDragger_;
          this->countLabel_ = x.countLabel_;
          this->angleLabel_ = x.angleLabel_;
          this->inclusiveAngleLabel_ = x.inclusiveAngleLabel_;
          this->includeSourceLabel_ = x.includeSourceLabel_;
        }

        return *this;
      }

      InstancePolar::
      ~InstancePolar ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace inps
    {
      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::inps::InstancePolar > (
          ::prj::srl::inps::instancePolar (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inps::InstancePolar > (
          ::prj::srl::inps::instancePolar (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inps::InstancePolar > (
          ::prj::srl::inps::instancePolar (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inps::instancePolar (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inps::instancePolar (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inps::instancePolar (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inps::instancePolar (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inps::instancePolar (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inps::instancePolar (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::inps::InstancePolar > (
          ::prj::srl::inps::instancePolar (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inps::InstancePolar > (
          ::prj::srl::inps::instancePolar (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inps::InstancePolar > (
          ::prj::srl::inps::instancePolar (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::inps::InstancePolar > (
            ::prj::srl::inps::instancePolar (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "instancePolar" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inps")
        {
          ::std::unique_ptr< ::prj::srl::inps::InstancePolar > r (
            ::xsd::cxx::tree::traits< ::prj::srl::inps::InstancePolar, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "instancePolar",
          "http://www.cadseer.com/prj/srl/inps");
      }

      ::std::unique_ptr< ::prj::srl::inps::InstancePolar >
      instancePolar (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "instancePolar" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inps")
        {
          ::std::unique_ptr< ::prj::srl::inps::InstancePolar > r (
            ::xsd::cxx::tree::traits< ::prj::srl::inps::InstancePolar, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "instancePolar",
          "http://www.cadseer.com/prj/srl/inps");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace inps
    {
      void
      operator<< (::xercesc::DOMElement& e, const InstancePolar& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // axisType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisType",
              e));

          s << i.axisType ();
        }

        // csys
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csys",
              e));

          s << i.csys ();
        }

        // count
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "count",
              e));

          s << i.count ();
        }

        // angle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "angle",
              e));

          s << i.angle ();
        }

        // inclusiveAngle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "inclusiveAngle",
              e));

          s << i.inclusiveAngle ();
        }

        // includeSource
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "includeSource",
              e));

          s << i.includeSource ();
        }

        // source
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "source",
              e));

          s << i.source ();
        }

        // axis
        //
        if (i.axis ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axis",
              e));

          s << *i.axis ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // instanceMaps
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "instanceMaps",
              e));

          s << i.instanceMaps ();
        }

        // csysDragger
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysDragger",
              e));

          s << i.csysDragger ();
        }

        // countLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "countLabel",
              e));

          s << i.countLabel ();
        }

        // angleLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "angleLabel",
              e));

          s << i.angleLabel ();
        }

        // inclusiveAngleLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "inclusiveAngleLabel",
              e));

          s << i.inclusiveAngleLabel ();
        }

        // includeSourceLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "includeSourceLabel",
              e));

          s << i.includeSourceLabel ();
        }
      }

      void
      instancePolar (::std::ostream& o,
                     const ::prj::srl::inps::InstancePolar& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inps::instancePolar (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      instancePolar (::std::ostream& o,
                     const ::prj::srl::inps::InstancePolar& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inps::instancePolar (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instancePolar (::std::ostream& o,
                     const ::prj::srl::inps::InstancePolar& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inps::instancePolar (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instancePolar (::xercesc::XMLFormatTarget& t,
                     const ::prj::srl::inps::InstancePolar& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inps::instancePolar (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      instancePolar (::xercesc::XMLFormatTarget& t,
                     const ::prj::srl::inps::InstancePolar& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inps::instancePolar (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instancePolar (::xercesc::XMLFormatTarget& t,
                     const ::prj::srl::inps::InstancePolar& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inps::instancePolar (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instancePolar (::xercesc::DOMDocument& d,
                     const ::prj::srl::inps::InstancePolar& s,
                     ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "instancePolar" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inps")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "instancePolar",
            "http://www.cadseer.com/prj/srl/inps");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      instancePolar (const ::prj::srl::inps::InstancePolar& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "instancePolar",
            "http://www.cadseer.com/prj/srl/inps",
            m, f));

        ::prj::srl::inps::instancePolar (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

