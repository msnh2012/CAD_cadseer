// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlprsmprism.h"

namespace prj
{
  namespace srl
  {
    namespace prsm
    {
      // Prism
      // 

      const Prism::BaseType& Prism::
      base () const
      {
        return this->base_.get ();
      }

      Prism::BaseType& Prism::
      base ()
      {
        return this->base_.get ();
      }

      void Prism::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void Prism::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const Prism::RadiusTypeType& Prism::
      radiusType () const
      {
        return this->radiusType_.get ();
      }

      Prism::RadiusTypeType& Prism::
      radiusType ()
      {
        return this->radiusType_.get ();
      }

      void Prism::
      radiusType (const RadiusTypeType& x)
      {
        this->radiusType_.set (x);
      }

      void Prism::
      radiusType (::std::unique_ptr< RadiusTypeType > x)
      {
        this->radiusType_.set (std::move (x));
      }

      const Prism::SidesType& Prism::
      sides () const
      {
        return this->sides_.get ();
      }

      Prism::SidesType& Prism::
      sides ()
      {
        return this->sides_.get ();
      }

      void Prism::
      sides (const SidesType& x)
      {
        this->sides_.set (x);
      }

      void Prism::
      sides (::std::unique_ptr< SidesType > x)
      {
        this->sides_.set (std::move (x));
      }

      const Prism::PyramidType& Prism::
      pyramid () const
      {
        return this->pyramid_.get ();
      }

      Prism::PyramidType& Prism::
      pyramid ()
      {
        return this->pyramid_.get ();
      }

      void Prism::
      pyramid (const PyramidType& x)
      {
        this->pyramid_.set (x);
      }

      void Prism::
      pyramid (::std::unique_ptr< PyramidType > x)
      {
        this->pyramid_.set (std::move (x));
      }

      const Prism::RadiusType& Prism::
      radius () const
      {
        return this->radius_.get ();
      }

      Prism::RadiusType& Prism::
      radius ()
      {
        return this->radius_.get ();
      }

      void Prism::
      radius (const RadiusType& x)
      {
        this->radius_.set (x);
      }

      void Prism::
      radius (::std::unique_ptr< RadiusType > x)
      {
        this->radius_.set (std::move (x));
      }

      const Prism::HeightType& Prism::
      height () const
      {
        return this->height_.get ();
      }

      Prism::HeightType& Prism::
      height ()
      {
        return this->height_.get ();
      }

      void Prism::
      height (const HeightType& x)
      {
        this->height_.set (x);
      }

      void Prism::
      height (::std::unique_ptr< HeightType > x)
      {
        this->height_.set (std::move (x));
      }

      const Prism::CsysTypeType& Prism::
      csysType () const
      {
        return this->csysType_.get ();
      }

      Prism::CsysTypeType& Prism::
      csysType ()
      {
        return this->csysType_.get ();
      }

      void Prism::
      csysType (const CsysTypeType& x)
      {
        this->csysType_.set (x);
      }

      void Prism::
      csysType (::std::unique_ptr< CsysTypeType > x)
      {
        this->csysType_.set (std::move (x));
      }

      const Prism::CsysType& Prism::
      csys () const
      {
        return this->csys_.get ();
      }

      Prism::CsysType& Prism::
      csys ()
      {
        return this->csys_.get ();
      }

      void Prism::
      csys (const CsysType& x)
      {
        this->csys_.set (x);
      }

      void Prism::
      csys (::std::unique_ptr< CsysType > x)
      {
        this->csys_.set (std::move (x));
      }

      const Prism::CsysLinkedType& Prism::
      csysLinked () const
      {
        return this->csysLinked_.get ();
      }

      Prism::CsysLinkedType& Prism::
      csysLinked ()
      {
        return this->csysLinked_.get ();
      }

      void Prism::
      csysLinked (const CsysLinkedType& x)
      {
        this->csysLinked_.set (x);
      }

      void Prism::
      csysLinked (::std::unique_ptr< CsysLinkedType > x)
      {
        this->csysLinked_.set (std::move (x));
      }

      const Prism::CsysDraggerType& Prism::
      csysDragger () const
      {
        return this->csysDragger_.get ();
      }

      Prism::CsysDraggerType& Prism::
      csysDragger ()
      {
        return this->csysDragger_.get ();
      }

      void Prism::
      csysDragger (const CsysDraggerType& x)
      {
        this->csysDragger_.set (x);
      }

      void Prism::
      csysDragger (::std::unique_ptr< CsysDraggerType > x)
      {
        this->csysDragger_.set (std::move (x));
      }

      const Prism::SeerShapeType& Prism::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      Prism::SeerShapeType& Prism::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void Prism::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void Prism::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const Prism::RadiusIPType& Prism::
      radiusIP () const
      {
        return this->radiusIP_.get ();
      }

      Prism::RadiusIPType& Prism::
      radiusIP ()
      {
        return this->radiusIP_.get ();
      }

      void Prism::
      radiusIP (const RadiusIPType& x)
      {
        this->radiusIP_.set (x);
      }

      void Prism::
      radiusIP (::std::unique_ptr< RadiusIPType > x)
      {
        this->radiusIP_.set (std::move (x));
      }

      const Prism::HeightIPType& Prism::
      heightIP () const
      {
        return this->heightIP_.get ();
      }

      Prism::HeightIPType& Prism::
      heightIP ()
      {
        return this->heightIP_.get ();
      }

      void Prism::
      heightIP (const HeightIPType& x)
      {
        this->heightIP_.set (x);
      }

      void Prism::
      heightIP (::std::unique_ptr< HeightIPType > x)
      {
        this->heightIP_.set (std::move (x));
      }

      const Prism::RadiusTypeLabelType& Prism::
      radiusTypeLabel () const
      {
        return this->radiusTypeLabel_.get ();
      }

      Prism::RadiusTypeLabelType& Prism::
      radiusTypeLabel ()
      {
        return this->radiusTypeLabel_.get ();
      }

      void Prism::
      radiusTypeLabel (const RadiusTypeLabelType& x)
      {
        this->radiusTypeLabel_.set (x);
      }

      void Prism::
      radiusTypeLabel (::std::unique_ptr< RadiusTypeLabelType > x)
      {
        this->radiusTypeLabel_.set (std::move (x));
      }

      const Prism::SidesLabelType& Prism::
      sidesLabel () const
      {
        return this->sidesLabel_.get ();
      }

      Prism::SidesLabelType& Prism::
      sidesLabel ()
      {
        return this->sidesLabel_.get ();
      }

      void Prism::
      sidesLabel (const SidesLabelType& x)
      {
        this->sidesLabel_.set (x);
      }

      void Prism::
      sidesLabel (::std::unique_ptr< SidesLabelType > x)
      {
        this->sidesLabel_.set (std::move (x));
      }

      const Prism::PyramidLabelType& Prism::
      pyramidLabel () const
      {
        return this->pyramidLabel_.get ();
      }

      Prism::PyramidLabelType& Prism::
      pyramidLabel ()
      {
        return this->pyramidLabel_.get ();
      }

      void Prism::
      pyramidLabel (const PyramidLabelType& x)
      {
        this->pyramidLabel_.set (x);
      }

      void Prism::
      pyramidLabel (::std::unique_ptr< PyramidLabelType > x)
      {
        this->pyramidLabel_.set (std::move (x));
      }

      const Prism::ApexIdType& Prism::
      apexId () const
      {
        return this->apexId_.get ();
      }

      Prism::ApexIdType& Prism::
      apexId ()
      {
        return this->apexId_.get ();
      }

      void Prism::
      apexId (const ApexIdType& x)
      {
        this->apexId_.set (x);
      }

      void Prism::
      apexId (::std::unique_ptr< ApexIdType > x)
      {
        this->apexId_.set (std::move (x));
      }

      const Prism::BottomWireIdType& Prism::
      bottomWireId () const
      {
        return this->bottomWireId_.get ();
      }

      Prism::BottomWireIdType& Prism::
      bottomWireId ()
      {
        return this->bottomWireId_.get ();
      }

      void Prism::
      bottomWireId (const BottomWireIdType& x)
      {
        this->bottomWireId_.set (x);
      }

      void Prism::
      bottomWireId (::std::unique_ptr< BottomWireIdType > x)
      {
        this->bottomWireId_.set (std::move (x));
      }

      const Prism::TopWireIdType& Prism::
      topWireId () const
      {
        return this->topWireId_.get ();
      }

      Prism::TopWireIdType& Prism::
      topWireId ()
      {
        return this->topWireId_.get ();
      }

      void Prism::
      topWireId (const TopWireIdType& x)
      {
        this->topWireId_.set (x);
      }

      void Prism::
      topWireId (::std::unique_ptr< TopWireIdType > x)
      {
        this->topWireId_.set (std::move (x));
      }

      const Prism::BottomFaceIdType& Prism::
      bottomFaceId () const
      {
        return this->bottomFaceId_.get ();
      }

      Prism::BottomFaceIdType& Prism::
      bottomFaceId ()
      {
        return this->bottomFaceId_.get ();
      }

      void Prism::
      bottomFaceId (const BottomFaceIdType& x)
      {
        this->bottomFaceId_.set (x);
      }

      void Prism::
      bottomFaceId (::std::unique_ptr< BottomFaceIdType > x)
      {
        this->bottomFaceId_.set (std::move (x));
      }

      const Prism::TopFaceIdType& Prism::
      topFaceId () const
      {
        return this->topFaceId_.get ();
      }

      Prism::TopFaceIdType& Prism::
      topFaceId ()
      {
        return this->topFaceId_.get ();
      }

      void Prism::
      topFaceId (const TopFaceIdType& x)
      {
        this->topFaceId_.set (x);
      }

      void Prism::
      topFaceId (::std::unique_ptr< TopFaceIdType > x)
      {
        this->topFaceId_.set (std::move (x));
      }

      const Prism::ShellIdType& Prism::
      shellId () const
      {
        return this->shellId_.get ();
      }

      Prism::ShellIdType& Prism::
      shellId ()
      {
        return this->shellId_.get ();
      }

      void Prism::
      shellId (const ShellIdType& x)
      {
        this->shellId_.set (x);
      }

      void Prism::
      shellId (::std::unique_ptr< ShellIdType > x)
      {
        this->shellId_.set (std::move (x));
      }

      const Prism::SolidIdType& Prism::
      solidId () const
      {
        return this->solidId_.get ();
      }

      Prism::SolidIdType& Prism::
      solidId ()
      {
        return this->solidId_.get ();
      }

      void Prism::
      solidId (const SolidIdType& x)
      {
        this->solidId_.set (x);
      }

      void Prism::
      solidId (::std::unique_ptr< SolidIdType > x)
      {
        this->solidId_.set (std::move (x));
      }

      const Prism::BottomVertexIdsSequence& Prism::
      bottomVertexIds () const
      {
        return this->bottomVertexIds_;
      }

      Prism::BottomVertexIdsSequence& Prism::
      bottomVertexIds ()
      {
        return this->bottomVertexIds_;
      }

      void Prism::
      bottomVertexIds (const BottomVertexIdsSequence& s)
      {
        this->bottomVertexIds_ = s;
      }

      const Prism::TopVertexIdsSequence& Prism::
      topVertexIds () const
      {
        return this->topVertexIds_;
      }

      Prism::TopVertexIdsSequence& Prism::
      topVertexIds ()
      {
        return this->topVertexIds_;
      }

      void Prism::
      topVertexIds (const TopVertexIdsSequence& s)
      {
        this->topVertexIds_ = s;
      }

      const Prism::BottomEdgeIdsSequence& Prism::
      bottomEdgeIds () const
      {
        return this->bottomEdgeIds_;
      }

      Prism::BottomEdgeIdsSequence& Prism::
      bottomEdgeIds ()
      {
        return this->bottomEdgeIds_;
      }

      void Prism::
      bottomEdgeIds (const BottomEdgeIdsSequence& s)
      {
        this->bottomEdgeIds_ = s;
      }

      const Prism::TopEdgeIdsSequence& Prism::
      topEdgeIds () const
      {
        return this->topEdgeIds_;
      }

      Prism::TopEdgeIdsSequence& Prism::
      topEdgeIds ()
      {
        return this->topEdgeIds_;
      }

      void Prism::
      topEdgeIds (const TopEdgeIdsSequence& s)
      {
        this->topEdgeIds_ = s;
      }

      const Prism::VerticalEdgeIdsSequence& Prism::
      verticalEdgeIds () const
      {
        return this->verticalEdgeIds_;
      }

      Prism::VerticalEdgeIdsSequence& Prism::
      verticalEdgeIds ()
      {
        return this->verticalEdgeIds_;
      }

      void Prism::
      verticalEdgeIds (const VerticalEdgeIdsSequence& s)
      {
        this->verticalEdgeIds_ = s;
      }

      const Prism::WireIdsSequence& Prism::
      wireIds () const
      {
        return this->wireIds_;
      }

      Prism::WireIdsSequence& Prism::
      wireIds ()
      {
        return this->wireIds_;
      }

      void Prism::
      wireIds (const WireIdsSequence& s)
      {
        this->wireIds_ = s;
      }

      const Prism::FaceIdsSequence& Prism::
      faceIds () const
      {
        return this->faceIds_;
      }

      Prism::FaceIdsSequence& Prism::
      faceIds ()
      {
        return this->faceIds_;
      }

      void Prism::
      faceIds (const FaceIdsSequence& s)
      {
        this->faceIds_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace prsm
    {
      // Prism
      //

      Prism::
      Prism (const BaseType& base,
             const RadiusTypeType& radiusType,
             const SidesType& sides,
             const PyramidType& pyramid,
             const RadiusType& radius,
             const HeightType& height,
             const CsysTypeType& csysType,
             const CsysType& csys,
             const CsysLinkedType& csysLinked,
             const CsysDraggerType& csysDragger,
             const SeerShapeType& seerShape,
             const RadiusIPType& radiusIP,
             const HeightIPType& heightIP,
             const RadiusTypeLabelType& radiusTypeLabel,
             const SidesLabelType& sidesLabel,
             const PyramidLabelType& pyramidLabel,
             const ApexIdType& apexId,
             const BottomWireIdType& bottomWireId,
             const TopWireIdType& topWireId,
             const BottomFaceIdType& bottomFaceId,
             const TopFaceIdType& topFaceId,
             const ShellIdType& shellId,
             const SolidIdType& solidId)
      : ::xml_schema::Type (),
        base_ (base, this),
        radiusType_ (radiusType, this),
        sides_ (sides, this),
        pyramid_ (pyramid, this),
        radius_ (radius, this),
        height_ (height, this),
        csysType_ (csysType, this),
        csys_ (csys, this),
        csysLinked_ (csysLinked, this),
        csysDragger_ (csysDragger, this),
        seerShape_ (seerShape, this),
        radiusIP_ (radiusIP, this),
        heightIP_ (heightIP, this),
        radiusTypeLabel_ (radiusTypeLabel, this),
        sidesLabel_ (sidesLabel, this),
        pyramidLabel_ (pyramidLabel, this),
        apexId_ (apexId, this),
        bottomWireId_ (bottomWireId, this),
        topWireId_ (topWireId, this),
        bottomFaceId_ (bottomFaceId, this),
        topFaceId_ (topFaceId, this),
        shellId_ (shellId, this),
        solidId_ (solidId, this),
        bottomVertexIds_ (this),
        topVertexIds_ (this),
        bottomEdgeIds_ (this),
        topEdgeIds_ (this),
        verticalEdgeIds_ (this),
        wireIds_ (this),
        faceIds_ (this)
      {
      }

      Prism::
      Prism (::std::unique_ptr< BaseType > base,
             ::std::unique_ptr< RadiusTypeType > radiusType,
             ::std::unique_ptr< SidesType > sides,
             ::std::unique_ptr< PyramidType > pyramid,
             ::std::unique_ptr< RadiusType > radius,
             ::std::unique_ptr< HeightType > height,
             ::std::unique_ptr< CsysTypeType > csysType,
             ::std::unique_ptr< CsysType > csys,
             ::std::unique_ptr< CsysLinkedType > csysLinked,
             ::std::unique_ptr< CsysDraggerType > csysDragger,
             ::std::unique_ptr< SeerShapeType > seerShape,
             ::std::unique_ptr< RadiusIPType > radiusIP,
             ::std::unique_ptr< HeightIPType > heightIP,
             ::std::unique_ptr< RadiusTypeLabelType > radiusTypeLabel,
             ::std::unique_ptr< SidesLabelType > sidesLabel,
             ::std::unique_ptr< PyramidLabelType > pyramidLabel,
             const ApexIdType& apexId,
             const BottomWireIdType& bottomWireId,
             const TopWireIdType& topWireId,
             const BottomFaceIdType& bottomFaceId,
             const TopFaceIdType& topFaceId,
             const ShellIdType& shellId,
             const SolidIdType& solidId)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        radiusType_ (std::move (radiusType), this),
        sides_ (std::move (sides), this),
        pyramid_ (std::move (pyramid), this),
        radius_ (std::move (radius), this),
        height_ (std::move (height), this),
        csysType_ (std::move (csysType), this),
        csys_ (std::move (csys), this),
        csysLinked_ (std::move (csysLinked), this),
        csysDragger_ (std::move (csysDragger), this),
        seerShape_ (std::move (seerShape), this),
        radiusIP_ (std::move (radiusIP), this),
        heightIP_ (std::move (heightIP), this),
        radiusTypeLabel_ (std::move (radiusTypeLabel), this),
        sidesLabel_ (std::move (sidesLabel), this),
        pyramidLabel_ (std::move (pyramidLabel), this),
        apexId_ (apexId, this),
        bottomWireId_ (bottomWireId, this),
        topWireId_ (topWireId, this),
        bottomFaceId_ (bottomFaceId, this),
        topFaceId_ (topFaceId, this),
        shellId_ (shellId, this),
        solidId_ (solidId, this),
        bottomVertexIds_ (this),
        topVertexIds_ (this),
        bottomEdgeIds_ (this),
        topEdgeIds_ (this),
        verticalEdgeIds_ (this),
        wireIds_ (this),
        faceIds_ (this)
      {
      }

      Prism::
      Prism (const Prism& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        radiusType_ (x.radiusType_, f, this),
        sides_ (x.sides_, f, this),
        pyramid_ (x.pyramid_, f, this),
        radius_ (x.radius_, f, this),
        height_ (x.height_, f, this),
        csysType_ (x.csysType_, f, this),
        csys_ (x.csys_, f, this),
        csysLinked_ (x.csysLinked_, f, this),
        csysDragger_ (x.csysDragger_, f, this),
        seerShape_ (x.seerShape_, f, this),
        radiusIP_ (x.radiusIP_, f, this),
        heightIP_ (x.heightIP_, f, this),
        radiusTypeLabel_ (x.radiusTypeLabel_, f, this),
        sidesLabel_ (x.sidesLabel_, f, this),
        pyramidLabel_ (x.pyramidLabel_, f, this),
        apexId_ (x.apexId_, f, this),
        bottomWireId_ (x.bottomWireId_, f, this),
        topWireId_ (x.topWireId_, f, this),
        bottomFaceId_ (x.bottomFaceId_, f, this),
        topFaceId_ (x.topFaceId_, f, this),
        shellId_ (x.shellId_, f, this),
        solidId_ (x.solidId_, f, this),
        bottomVertexIds_ (x.bottomVertexIds_, f, this),
        topVertexIds_ (x.topVertexIds_, f, this),
        bottomEdgeIds_ (x.bottomEdgeIds_, f, this),
        topEdgeIds_ (x.topEdgeIds_, f, this),
        verticalEdgeIds_ (x.verticalEdgeIds_, f, this),
        wireIds_ (x.wireIds_, f, this),
        faceIds_ (x.faceIds_, f, this)
      {
      }

      Prism::
      Prism (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        radiusType_ (this),
        sides_ (this),
        pyramid_ (this),
        radius_ (this),
        height_ (this),
        csysType_ (this),
        csys_ (this),
        csysLinked_ (this),
        csysDragger_ (this),
        seerShape_ (this),
        radiusIP_ (this),
        heightIP_ (this),
        radiusTypeLabel_ (this),
        sidesLabel_ (this),
        pyramidLabel_ (this),
        apexId_ (this),
        bottomWireId_ (this),
        topWireId_ (this),
        bottomFaceId_ (this),
        topFaceId_ (this),
        shellId_ (this),
        solidId_ (this),
        bottomVertexIds_ (this),
        topVertexIds_ (this),
        bottomEdgeIds_ (this),
        topEdgeIds_ (this),
        verticalEdgeIds_ (this),
        wireIds_ (this),
        faceIds_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Prism::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // radiusType
          //
          if (n.name () == "radiusType" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< RadiusTypeType > r (
              RadiusTypeTraits::create (i, f, this));

            if (!radiusType_.present ())
            {
              this->radiusType_.set (::std::move (r));
              continue;
            }
          }

          // sides
          //
          if (n.name () == "sides" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SidesType > r (
              SidesTraits::create (i, f, this));

            if (!sides_.present ())
            {
              this->sides_.set (::std::move (r));
              continue;
            }
          }

          // pyramid
          //
          if (n.name () == "pyramid" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PyramidType > r (
              PyramidTraits::create (i, f, this));

            if (!pyramid_.present ())
            {
              this->pyramid_.set (::std::move (r));
              continue;
            }
          }

          // radius
          //
          if (n.name () == "radius" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< RadiusType > r (
              RadiusTraits::create (i, f, this));

            if (!radius_.present ())
            {
              this->radius_.set (::std::move (r));
              continue;
            }
          }

          // height
          //
          if (n.name () == "height" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< HeightType > r (
              HeightTraits::create (i, f, this));

            if (!height_.present ())
            {
              this->height_.set (::std::move (r));
              continue;
            }
          }

          // csysType
          //
          if (n.name () == "csysType" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysTypeType > r (
              CsysTypeTraits::create (i, f, this));

            if (!csysType_.present ())
            {
              this->csysType_.set (::std::move (r));
              continue;
            }
          }

          // csys
          //
          if (n.name () == "csys" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysType > r (
              CsysTraits::create (i, f, this));

            if (!csys_.present ())
            {
              this->csys_.set (::std::move (r));
              continue;
            }
          }

          // csysLinked
          //
          if (n.name () == "csysLinked" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysLinkedType > r (
              CsysLinkedTraits::create (i, f, this));

            if (!csysLinked_.present ())
            {
              this->csysLinked_.set (::std::move (r));
              continue;
            }
          }

          // csysDragger
          //
          if (n.name () == "csysDragger" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysDraggerType > r (
              CsysDraggerTraits::create (i, f, this));

            if (!csysDragger_.present ())
            {
              this->csysDragger_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // radiusIP
          //
          if (n.name () == "radiusIP" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< RadiusIPType > r (
              RadiusIPTraits::create (i, f, this));

            if (!radiusIP_.present ())
            {
              this->radiusIP_.set (::std::move (r));
              continue;
            }
          }

          // heightIP
          //
          if (n.name () == "heightIP" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< HeightIPType > r (
              HeightIPTraits::create (i, f, this));

            if (!heightIP_.present ())
            {
              this->heightIP_.set (::std::move (r));
              continue;
            }
          }

          // radiusTypeLabel
          //
          if (n.name () == "radiusTypeLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< RadiusTypeLabelType > r (
              RadiusTypeLabelTraits::create (i, f, this));

            if (!radiusTypeLabel_.present ())
            {
              this->radiusTypeLabel_.set (::std::move (r));
              continue;
            }
          }

          // sidesLabel
          //
          if (n.name () == "sidesLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SidesLabelType > r (
              SidesLabelTraits::create (i, f, this));

            if (!sidesLabel_.present ())
            {
              this->sidesLabel_.set (::std::move (r));
              continue;
            }
          }

          // pyramidLabel
          //
          if (n.name () == "pyramidLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PyramidLabelType > r (
              PyramidLabelTraits::create (i, f, this));

            if (!pyramidLabel_.present ())
            {
              this->pyramidLabel_.set (::std::move (r));
              continue;
            }
          }

          // apexId
          //
          if (n.name () == "apexId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ApexIdType > r (
              ApexIdTraits::create (i, f, this));

            if (!apexId_.present ())
            {
              this->apexId_.set (::std::move (r));
              continue;
            }
          }

          // bottomWireId
          //
          if (n.name () == "bottomWireId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BottomWireIdType > r (
              BottomWireIdTraits::create (i, f, this));

            if (!bottomWireId_.present ())
            {
              this->bottomWireId_.set (::std::move (r));
              continue;
            }
          }

          // topWireId
          //
          if (n.name () == "topWireId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TopWireIdType > r (
              TopWireIdTraits::create (i, f, this));

            if (!topWireId_.present ())
            {
              this->topWireId_.set (::std::move (r));
              continue;
            }
          }

          // bottomFaceId
          //
          if (n.name () == "bottomFaceId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BottomFaceIdType > r (
              BottomFaceIdTraits::create (i, f, this));

            if (!bottomFaceId_.present ())
            {
              this->bottomFaceId_.set (::std::move (r));
              continue;
            }
          }

          // topFaceId
          //
          if (n.name () == "topFaceId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TopFaceIdType > r (
              TopFaceIdTraits::create (i, f, this));

            if (!topFaceId_.present ())
            {
              this->topFaceId_.set (::std::move (r));
              continue;
            }
          }

          // shellId
          //
          if (n.name () == "shellId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ShellIdType > r (
              ShellIdTraits::create (i, f, this));

            if (!shellId_.present ())
            {
              this->shellId_.set (::std::move (r));
              continue;
            }
          }

          // solidId
          //
          if (n.name () == "solidId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SolidIdType > r (
              SolidIdTraits::create (i, f, this));

            if (!solidId_.present ())
            {
              this->solidId_.set (::std::move (r));
              continue;
            }
          }

          // bottomVertexIds
          //
          if (n.name () == "bottomVertexIds" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BottomVertexIdsType > r (
              BottomVertexIdsTraits::create (i, f, this));

            this->bottomVertexIds_.push_back (::std::move (r));
            continue;
          }

          // topVertexIds
          //
          if (n.name () == "topVertexIds" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TopVertexIdsType > r (
              TopVertexIdsTraits::create (i, f, this));

            this->topVertexIds_.push_back (::std::move (r));
            continue;
          }

          // bottomEdgeIds
          //
          if (n.name () == "bottomEdgeIds" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BottomEdgeIdsType > r (
              BottomEdgeIdsTraits::create (i, f, this));

            this->bottomEdgeIds_.push_back (::std::move (r));
            continue;
          }

          // topEdgeIds
          //
          if (n.name () == "topEdgeIds" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TopEdgeIdsType > r (
              TopEdgeIdsTraits::create (i, f, this));

            this->topEdgeIds_.push_back (::std::move (r));
            continue;
          }

          // verticalEdgeIds
          //
          if (n.name () == "verticalEdgeIds" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< VerticalEdgeIdsType > r (
              VerticalEdgeIdsTraits::create (i, f, this));

            this->verticalEdgeIds_.push_back (::std::move (r));
            continue;
          }

          // wireIds
          //
          if (n.name () == "wireIds" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< WireIdsType > r (
              WireIdsTraits::create (i, f, this));

            this->wireIds_.push_back (::std::move (r));
            continue;
          }

          // faceIds
          //
          if (n.name () == "faceIds" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FaceIdsType > r (
              FaceIdsTraits::create (i, f, this));

            this->faceIds_.push_back (::std::move (r));
            continue;
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!radiusType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "radiusType",
            "");
        }

        if (!sides_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sides",
            "");
        }

        if (!pyramid_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pyramid",
            "");
        }

        if (!radius_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "radius",
            "");
        }

        if (!height_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "height",
            "");
        }

        if (!csysType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysType",
            "");
        }

        if (!csys_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csys",
            "");
        }

        if (!csysLinked_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysLinked",
            "");
        }

        if (!csysDragger_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysDragger",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!radiusIP_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "radiusIP",
            "");
        }

        if (!heightIP_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "heightIP",
            "");
        }

        if (!radiusTypeLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "radiusTypeLabel",
            "");
        }

        if (!sidesLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sidesLabel",
            "");
        }

        if (!pyramidLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pyramidLabel",
            "");
        }

        if (!apexId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "apexId",
            "");
        }

        if (!bottomWireId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "bottomWireId",
            "");
        }

        if (!topWireId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "topWireId",
            "");
        }

        if (!bottomFaceId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "bottomFaceId",
            "");
        }

        if (!topFaceId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "topFaceId",
            "");
        }

        if (!shellId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "shellId",
            "");
        }

        if (!solidId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "solidId",
            "");
        }
      }

      Prism* Prism::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Prism (*this, f, c);
      }

      Prism& Prism::
      operator= (const Prism& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->radiusType_ = x.radiusType_;
          this->sides_ = x.sides_;
          this->pyramid_ = x.pyramid_;
          this->radius_ = x.radius_;
          this->height_ = x.height_;
          this->csysType_ = x.csysType_;
          this->csys_ = x.csys_;
          this->csysLinked_ = x.csysLinked_;
          this->csysDragger_ = x.csysDragger_;
          this->seerShape_ = x.seerShape_;
          this->radiusIP_ = x.radiusIP_;
          this->heightIP_ = x.heightIP_;
          this->radiusTypeLabel_ = x.radiusTypeLabel_;
          this->sidesLabel_ = x.sidesLabel_;
          this->pyramidLabel_ = x.pyramidLabel_;
          this->apexId_ = x.apexId_;
          this->bottomWireId_ = x.bottomWireId_;
          this->topWireId_ = x.topWireId_;
          this->bottomFaceId_ = x.bottomFaceId_;
          this->topFaceId_ = x.topFaceId_;
          this->shellId_ = x.shellId_;
          this->solidId_ = x.solidId_;
          this->bottomVertexIds_ = x.bottomVertexIds_;
          this->topVertexIds_ = x.topVertexIds_;
          this->bottomEdgeIds_ = x.bottomEdgeIds_;
          this->topEdgeIds_ = x.topEdgeIds_;
          this->verticalEdgeIds_ = x.verticalEdgeIds_;
          this->wireIds_ = x.wireIds_;
          this->faceIds_ = x.faceIds_;
        }

        return *this;
      }

      Prism::
      ~Prism ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace prsm
    {
      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::prsm::Prism > (
          ::prj::srl::prsm::prism (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::prsm::Prism > (
          ::prj::srl::prsm::prism (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::prsm::Prism > (
          ::prj::srl::prsm::prism (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::prsm::prism (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::prsm::prism (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::prsm::prism (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::prsm::prism (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::prsm::prism (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::prsm::prism (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::prsm::Prism > (
          ::prj::srl::prsm::prism (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::prsm::Prism > (
          ::prj::srl::prsm::prism (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::prsm::Prism > (
          ::prj::srl::prsm::prism (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::prsm::Prism > (
            ::prj::srl::prsm::prism (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "prism" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/prsm")
        {
          ::std::unique_ptr< ::prj::srl::prsm::Prism > r (
            ::xsd::cxx::tree::traits< ::prj::srl::prsm::Prism, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "prism",
          "http://www.cadseer.com/prj/srl/prsm");
      }

      ::std::unique_ptr< ::prj::srl::prsm::Prism >
      prism (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "prism" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/prsm")
        {
          ::std::unique_ptr< ::prj::srl::prsm::Prism > r (
            ::xsd::cxx::tree::traits< ::prj::srl::prsm::Prism, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "prism",
          "http://www.cadseer.com/prj/srl/prsm");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace prsm
    {
      void
      operator<< (::xercesc::DOMElement& e, const Prism& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // radiusType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "radiusType",
              e));

          s << i.radiusType ();
        }

        // sides
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sides",
              e));

          s << i.sides ();
        }

        // pyramid
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pyramid",
              e));

          s << i.pyramid ();
        }

        // radius
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "radius",
              e));

          s << i.radius ();
        }

        // height
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "height",
              e));

          s << i.height ();
        }

        // csysType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysType",
              e));

          s << i.csysType ();
        }

        // csys
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csys",
              e));

          s << i.csys ();
        }

        // csysLinked
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysLinked",
              e));

          s << i.csysLinked ();
        }

        // csysDragger
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysDragger",
              e));

          s << i.csysDragger ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // radiusIP
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "radiusIP",
              e));

          s << i.radiusIP ();
        }

        // heightIP
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "heightIP",
              e));

          s << i.heightIP ();
        }

        // radiusTypeLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "radiusTypeLabel",
              e));

          s << i.radiusTypeLabel ();
        }

        // sidesLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sidesLabel",
              e));

          s << i.sidesLabel ();
        }

        // pyramidLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pyramidLabel",
              e));

          s << i.pyramidLabel ();
        }

        // apexId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "apexId",
              e));

          s << i.apexId ();
        }

        // bottomWireId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "bottomWireId",
              e));

          s << i.bottomWireId ();
        }

        // topWireId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "topWireId",
              e));

          s << i.topWireId ();
        }

        // bottomFaceId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "bottomFaceId",
              e));

          s << i.bottomFaceId ();
        }

        // topFaceId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "topFaceId",
              e));

          s << i.topFaceId ();
        }

        // shellId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "shellId",
              e));

          s << i.shellId ();
        }

        // solidId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "solidId",
              e));

          s << i.solidId ();
        }

        // bottomVertexIds
        //
        for (Prism::BottomVertexIdsConstIterator
             b (i.bottomVertexIds ().begin ()), n (i.bottomVertexIds ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "bottomVertexIds",
              e));

          s << *b;
        }

        // topVertexIds
        //
        for (Prism::TopVertexIdsConstIterator
             b (i.topVertexIds ().begin ()), n (i.topVertexIds ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "topVertexIds",
              e));

          s << *b;
        }

        // bottomEdgeIds
        //
        for (Prism::BottomEdgeIdsConstIterator
             b (i.bottomEdgeIds ().begin ()), n (i.bottomEdgeIds ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "bottomEdgeIds",
              e));

          s << *b;
        }

        // topEdgeIds
        //
        for (Prism::TopEdgeIdsConstIterator
             b (i.topEdgeIds ().begin ()), n (i.topEdgeIds ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "topEdgeIds",
              e));

          s << *b;
        }

        // verticalEdgeIds
        //
        for (Prism::VerticalEdgeIdsConstIterator
             b (i.verticalEdgeIds ().begin ()), n (i.verticalEdgeIds ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "verticalEdgeIds",
              e));

          s << *b;
        }

        // wireIds
        //
        for (Prism::WireIdsConstIterator
             b (i.wireIds ().begin ()), n (i.wireIds ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "wireIds",
              e));

          s << *b;
        }

        // faceIds
        //
        for (Prism::FaceIdsConstIterator
             b (i.faceIds ().begin ()), n (i.faceIds ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "faceIds",
              e));

          s << *b;
        }
      }

      void
      prism (::std::ostream& o,
             const ::prj::srl::prsm::Prism& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::prsm::prism (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      prism (::std::ostream& o,
             const ::prj::srl::prsm::Prism& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::prsm::prism (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      prism (::std::ostream& o,
             const ::prj::srl::prsm::Prism& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::prsm::prism (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      prism (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::prsm::Prism& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::prsm::prism (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      prism (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::prsm::Prism& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::prsm::prism (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      prism (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::prsm::Prism& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::prsm::prism (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      prism (::xercesc::DOMDocument& d,
             const ::prj::srl::prsm::Prism& s,
             ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "prism" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/prsm")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "prism",
            "http://www.cadseer.com/prj/srl/prsm");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      prism (const ::prj::srl::prsm::Prism& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "prism",
            "http://www.cadseer.com/prj/srl/prsm",
            m, f));

        ::prj::srl::prsm::prism (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

