// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_SPT_PRJSRLSPTPICK_H
#define PRJ_SRL_SPT_PRJSRLSPTPICK_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class Pick;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptshapehistory.h"

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class Pick: public ::xml_schema::Type
      {
        public:
        // u
        //
        typedef ::xml_schema::Double UType;
        typedef ::xsd::cxx::tree::traits< UType, char, ::xsd::cxx::tree::schema_type::double_ > UTraits;

        const UType&
        u () const;

        UType&
        u ();

        void
        u (const UType& x);

        static UType
        u_default_value ();

        // v
        //
        typedef ::xml_schema::Double VType;
        typedef ::xsd::cxx::tree::traits< VType, char, ::xsd::cxx::tree::schema_type::double_ > VTraits;

        const VType&
        v () const;

        VType&
        v ();

        void
        v (const VType& x);

        static VType
        v_default_value ();

        // history
        //
        typedef ::prj::srl::spt::ShapeHistory HistoryType;
        typedef ::xsd::cxx::tree::traits< HistoryType, char > HistoryTraits;

        const HistoryType&
        history () const;

        HistoryType&
        history ();

        void
        history (const HistoryType& x);

        void
        history (::std::unique_ptr< HistoryType > p);

        // selectionType
        //
        typedef ::xml_schema::Int SelectionTypeType;
        typedef ::xsd::cxx::tree::traits< SelectionTypeType, char > SelectionTypeTraits;

        const SelectionTypeType&
        selectionType () const;

        SelectionTypeType&
        selectionType ();

        void
        selectionType (const SelectionTypeType& x);

        // tag
        //
        typedef ::xml_schema::String TagType;
        typedef ::xsd::cxx::tree::traits< TagType, char > TagTraits;

        const TagType&
        tag () const;

        TagType&
        tag ();

        void
        tag (const TagType& x);

        void
        tag (::std::unique_ptr< TagType > p);

        // accrue
        //
        typedef ::xml_schema::Int AccrueType;
        typedef ::xsd::cxx::tree::traits< AccrueType, char > AccrueTraits;

        const AccrueType&
        accrue () const;

        AccrueType&
        accrue ();

        void
        accrue (const AccrueType& x);

        // Constructors.
        //
        Pick (const UType&,
              const VType&,
              const HistoryType&,
              const SelectionTypeType&,
              const TagType&,
              const AccrueType&);

        Pick (const UType&,
              const VType&,
              ::std::unique_ptr< HistoryType >,
              const SelectionTypeType&,
              const TagType&,
              const AccrueType&);

        Pick (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        Pick (const Pick& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        virtual Pick*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Pick&
        operator= (const Pick& x);

        virtual 
        ~Pick ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< UType > u_;
        ::xsd::cxx::tree::one< VType > v_;
        ::xsd::cxx::tree::one< HistoryType > history_;
        ::xsd::cxx::tree::one< SelectionTypeType > selectionType_;
        ::xsd::cxx::tree::one< TagType > tag_;
        ::xsd::cxx::tree::one< AccrueType > accrue_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement&, const Pick&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_SPT_PRJSRLSPTPICK_H
