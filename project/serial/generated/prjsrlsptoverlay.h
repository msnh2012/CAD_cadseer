// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_SPT_PRJSRLSPTOVERLAY_H
#define PRJ_SRL_SPT_PRJSRLSPTOVERLAY_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class PLabel;
      class IPGroup;
      class CSysDragger;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptvectormath.h"

#include "prjsrlsptcolor.h"

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class PLabel: public ::xml_schema::Type
      {
        public:
        // matrix
        //
        typedef ::prj::srl::spt::Matrixd MatrixType;
        typedef ::xsd::cxx::tree::traits< MatrixType, char > MatrixTraits;

        const MatrixType&
        matrix () const;

        MatrixType&
        matrix ();

        void
        matrix (const MatrixType& x);

        void
        matrix (::std::unique_ptr< MatrixType > p);

        // color
        //
        typedef ::prj::srl::spt::Color ColorType;
        typedef ::xsd::cxx::tree::traits< ColorType, char > ColorTraits;

        const ColorType&
        color () const;

        ColorType&
        color ();

        void
        color (const ColorType& x);

        void
        color (::std::unique_ptr< ColorType > p);

        // Constructors.
        //
        PLabel (const MatrixType&,
                const ColorType&);

        PLabel (::std::unique_ptr< MatrixType >,
                ::std::unique_ptr< ColorType >);

        PLabel (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        PLabel (const PLabel& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual PLabel*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        PLabel&
        operator= (const PLabel& x);

        virtual 
        ~PLabel ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< MatrixType > matrix_;
        ::xsd::cxx::tree::one< ColorType > color_;
      };

      class IPGroup: public ::xml_schema::Type
      {
        public:
        // matrixRoot
        //
        typedef ::prj::srl::spt::Matrixd MatrixRootType;
        typedef ::xsd::cxx::tree::traits< MatrixRootType, char > MatrixRootTraits;

        const MatrixRootType&
        matrixRoot () const;

        MatrixRootType&
        matrixRoot ();

        void
        matrixRoot (const MatrixRootType& x);

        void
        matrixRoot (::std::unique_ptr< MatrixRootType > p);

        // matrixDims
        //
        typedef ::prj::srl::spt::Matrixd MatrixDimsType;
        typedef ::xsd::cxx::tree::traits< MatrixDimsType, char > MatrixDimsTraits;

        const MatrixDimsType&
        matrixDims () const;

        MatrixDimsType&
        matrixDims ();

        void
        matrixDims (const MatrixDimsType& x);

        void
        matrixDims (::std::unique_ptr< MatrixDimsType > p);

        // matrixDragger
        //
        typedef ::prj::srl::spt::Matrixd MatrixDraggerType;
        typedef ::xsd::cxx::tree::traits< MatrixDraggerType, char > MatrixDraggerTraits;

        const MatrixDraggerType&
        matrixDragger () const;

        MatrixDraggerType&
        matrixDragger ();

        void
        matrixDragger (const MatrixDraggerType& x);

        void
        matrixDragger (::std::unique_ptr< MatrixDraggerType > p);

        // rotationAxis
        //
        typedef ::prj::srl::spt::Vec3d RotationAxisType;
        typedef ::xsd::cxx::tree::traits< RotationAxisType, char > RotationAxisTraits;

        const RotationAxisType&
        rotationAxis () const;

        RotationAxisType&
        rotationAxis ();

        void
        rotationAxis (const RotationAxisType& x);

        void
        rotationAxis (::std::unique_ptr< RotationAxisType > p);

        // rotationNormal
        //
        typedef ::prj::srl::spt::Vec3d RotationNormalType;
        typedef ::xsd::cxx::tree::traits< RotationNormalType, char > RotationNormalTraits;

        const RotationNormalType&
        rotationNormal () const;

        RotationNormalType&
        rotationNormal ();

        void
        rotationNormal (const RotationNormalType& x);

        void
        rotationNormal (::std::unique_ptr< RotationNormalType > p);

        // dimsFlipped
        //
        typedef ::xml_schema::Boolean DimsFlippedType;
        typedef ::xsd::cxx::tree::traits< DimsFlippedType, char > DimsFlippedTraits;

        const DimsFlippedType&
        dimsFlipped () const;

        DimsFlippedType&
        dimsFlipped ();

        void
        dimsFlipped (const DimsFlippedType& x);

        // rotateDragger
        //
        typedef ::xml_schema::Boolean RotateDraggerType;
        typedef ::xsd::cxx::tree::traits< RotateDraggerType, char > RotateDraggerTraits;

        const RotateDraggerType&
        rotateDragger () const;

        RotateDraggerType&
        rotateDragger ();

        void
        rotateDragger (const RotateDraggerType& x);

        // visibleDragger
        //
        typedef ::xml_schema::Boolean VisibleDraggerType;
        typedef ::xsd::cxx::tree::traits< VisibleDraggerType, char > VisibleDraggerTraits;

        const VisibleDraggerType&
        visibleDragger () const;

        VisibleDraggerType&
        visibleDragger ();

        void
        visibleDragger (const VisibleDraggerType& x);

        // color
        //
        typedef ::prj::srl::spt::Color ColorType;
        typedef ::xsd::cxx::tree::traits< ColorType, char > ColorTraits;

        const ColorType&
        color () const;

        ColorType&
        color ();

        void
        color (const ColorType& x);

        void
        color (::std::unique_ptr< ColorType > p);

        // Constructors.
        //
        IPGroup (const MatrixRootType&,
                 const MatrixDimsType&,
                 const MatrixDraggerType&,
                 const RotationAxisType&,
                 const RotationNormalType&,
                 const DimsFlippedType&,
                 const RotateDraggerType&,
                 const VisibleDraggerType&,
                 const ColorType&);

        IPGroup (::std::unique_ptr< MatrixRootType >,
                 ::std::unique_ptr< MatrixDimsType >,
                 ::std::unique_ptr< MatrixDraggerType >,
                 ::std::unique_ptr< RotationAxisType >,
                 ::std::unique_ptr< RotationNormalType >,
                 const DimsFlippedType&,
                 const RotateDraggerType&,
                 const VisibleDraggerType&,
                 ::std::unique_ptr< ColorType >);

        IPGroup (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        IPGroup (const IPGroup& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        virtual IPGroup*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        IPGroup&
        operator= (const IPGroup& x);

        virtual 
        ~IPGroup ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< MatrixRootType > matrixRoot_;
        ::xsd::cxx::tree::one< MatrixDimsType > matrixDims_;
        ::xsd::cxx::tree::one< MatrixDraggerType > matrixDragger_;
        ::xsd::cxx::tree::one< RotationAxisType > rotationAxis_;
        ::xsd::cxx::tree::one< RotationNormalType > rotationNormal_;
        ::xsd::cxx::tree::one< DimsFlippedType > dimsFlipped_;
        ::xsd::cxx::tree::one< RotateDraggerType > rotateDragger_;
        ::xsd::cxx::tree::one< VisibleDraggerType > visibleDragger_;
        ::xsd::cxx::tree::one< ColorType > color_;
      };

      class CSysDragger: public ::xml_schema::Type
      {
        public:
        // matrix
        //
        typedef ::prj::srl::spt::Matrixd MatrixType;
        typedef ::xsd::cxx::tree::traits< MatrixType, char > MatrixTraits;

        const MatrixType&
        matrix () const;

        MatrixType&
        matrix ();

        void
        matrix (const MatrixType& x);

        void
        matrix (::std::unique_ptr< MatrixType > p);

        // linked
        //
        typedef ::xml_schema::Boolean LinkedType;
        typedef ::xsd::cxx::tree::traits< LinkedType, char > LinkedTraits;

        const LinkedType&
        linked () const;

        LinkedType&
        linked ();

        void
        linked (const LinkedType& x);

        // featureId
        //
        typedef ::xml_schema::String FeatureIdType;
        typedef ::xsd::cxx::tree::traits< FeatureIdType, char > FeatureIdTraits;

        const FeatureIdType&
        featureId () const;

        FeatureIdType&
        featureId ();

        void
        featureId (const FeatureIdType& x);

        void
        featureId (::std::unique_ptr< FeatureIdType > p);

        static const FeatureIdType&
        featureId_default_value ();

        // Constructors.
        //
        CSysDragger (const MatrixType&,
                     const LinkedType&,
                     const FeatureIdType&);

        CSysDragger (::std::unique_ptr< MatrixType >,
                     const LinkedType&,
                     const FeatureIdType&);

        CSysDragger (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        CSysDragger (const CSysDragger& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        virtual CSysDragger*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        CSysDragger&
        operator= (const CSysDragger& x);

        virtual 
        ~CSysDragger ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< MatrixType > matrix_;
        ::xsd::cxx::tree::one< LinkedType > linked_;
        ::xsd::cxx::tree::one< FeatureIdType > featureId_;
        static const FeatureIdType featureId_default_value_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement&, const PLabel&);

      void
      operator<< (::xercesc::DOMElement&, const IPGroup&);

      void
      operator<< (::xercesc::DOMElement&, const CSysDragger&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_SPT_PRJSRLSPTOVERLAY_H
