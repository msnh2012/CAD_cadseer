// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrltscstransitioncurve.h"

namespace prj
{
  namespace srl
  {
    namespace tscs
    {
      // TransitionCurve
      // 

      const TransitionCurve::BaseType& TransitionCurve::
      base () const
      {
        return this->base_.get ();
      }

      TransitionCurve::BaseType& TransitionCurve::
      base ()
      {
        return this->base_.get ();
      }

      void TransitionCurve::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void TransitionCurve::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const TransitionCurve::PicksType& TransitionCurve::
      picks () const
      {
        return this->picks_.get ();
      }

      TransitionCurve::PicksType& TransitionCurve::
      picks ()
      {
        return this->picks_.get ();
      }

      void TransitionCurve::
      picks (const PicksType& x)
      {
        this->picks_.set (x);
      }

      void TransitionCurve::
      picks (::std::unique_ptr< PicksType > x)
      {
        this->picks_.set (std::move (x));
      }

      const TransitionCurve::Direction0Type& TransitionCurve::
      direction0 () const
      {
        return this->direction0_.get ();
      }

      TransitionCurve::Direction0Type& TransitionCurve::
      direction0 ()
      {
        return this->direction0_.get ();
      }

      void TransitionCurve::
      direction0 (const Direction0Type& x)
      {
        this->direction0_.set (x);
      }

      void TransitionCurve::
      direction0 (::std::unique_ptr< Direction0Type > x)
      {
        this->direction0_.set (std::move (x));
      }

      const TransitionCurve::Direction1Type& TransitionCurve::
      direction1 () const
      {
        return this->direction1_.get ();
      }

      TransitionCurve::Direction1Type& TransitionCurve::
      direction1 ()
      {
        return this->direction1_.get ();
      }

      void TransitionCurve::
      direction1 (const Direction1Type& x)
      {
        this->direction1_.set (x);
      }

      void TransitionCurve::
      direction1 (::std::unique_ptr< Direction1Type > x)
      {
        this->direction1_.set (std::move (x));
      }

      const TransitionCurve::Magnitude0Type& TransitionCurve::
      magnitude0 () const
      {
        return this->magnitude0_.get ();
      }

      TransitionCurve::Magnitude0Type& TransitionCurve::
      magnitude0 ()
      {
        return this->magnitude0_.get ();
      }

      void TransitionCurve::
      magnitude0 (const Magnitude0Type& x)
      {
        this->magnitude0_.set (x);
      }

      void TransitionCurve::
      magnitude0 (::std::unique_ptr< Magnitude0Type > x)
      {
        this->magnitude0_.set (std::move (x));
      }

      const TransitionCurve::Magnitude1Type& TransitionCurve::
      magnitude1 () const
      {
        return this->magnitude1_.get ();
      }

      TransitionCurve::Magnitude1Type& TransitionCurve::
      magnitude1 ()
      {
        return this->magnitude1_.get ();
      }

      void TransitionCurve::
      magnitude1 (const Magnitude1Type& x)
      {
        this->magnitude1_.set (x);
      }

      void TransitionCurve::
      magnitude1 (::std::unique_ptr< Magnitude1Type > x)
      {
        this->magnitude1_.set (std::move (x));
      }

      const TransitionCurve::AutoScaleType& TransitionCurve::
      autoScale () const
      {
        return this->autoScale_.get ();
      }

      TransitionCurve::AutoScaleType& TransitionCurve::
      autoScale ()
      {
        return this->autoScale_.get ();
      }

      void TransitionCurve::
      autoScale (const AutoScaleType& x)
      {
        this->autoScale_.set (x);
      }

      void TransitionCurve::
      autoScale (::std::unique_ptr< AutoScaleType > x)
      {
        this->autoScale_.set (std::move (x));
      }

      const TransitionCurve::SeerShapeType& TransitionCurve::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      TransitionCurve::SeerShapeType& TransitionCurve::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void TransitionCurve::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void TransitionCurve::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const TransitionCurve::Direction0LabelType& TransitionCurve::
      direction0Label () const
      {
        return this->direction0Label_.get ();
      }

      TransitionCurve::Direction0LabelType& TransitionCurve::
      direction0Label ()
      {
        return this->direction0Label_.get ();
      }

      void TransitionCurve::
      direction0Label (const Direction0LabelType& x)
      {
        this->direction0Label_.set (x);
      }

      void TransitionCurve::
      direction0Label (::std::unique_ptr< Direction0LabelType > x)
      {
        this->direction0Label_.set (std::move (x));
      }

      const TransitionCurve::Direction1LabelType& TransitionCurve::
      direction1Label () const
      {
        return this->direction1Label_.get ();
      }

      TransitionCurve::Direction1LabelType& TransitionCurve::
      direction1Label ()
      {
        return this->direction1Label_.get ();
      }

      void TransitionCurve::
      direction1Label (const Direction1LabelType& x)
      {
        this->direction1Label_.set (x);
      }

      void TransitionCurve::
      direction1Label (::std::unique_ptr< Direction1LabelType > x)
      {
        this->direction1Label_.set (std::move (x));
      }

      const TransitionCurve::Magnitude0LabelType& TransitionCurve::
      magnitude0Label () const
      {
        return this->magnitude0Label_.get ();
      }

      TransitionCurve::Magnitude0LabelType& TransitionCurve::
      magnitude0Label ()
      {
        return this->magnitude0Label_.get ();
      }

      void TransitionCurve::
      magnitude0Label (const Magnitude0LabelType& x)
      {
        this->magnitude0Label_.set (x);
      }

      void TransitionCurve::
      magnitude0Label (::std::unique_ptr< Magnitude0LabelType > x)
      {
        this->magnitude0Label_.set (std::move (x));
      }

      const TransitionCurve::Magnitude1LabelType& TransitionCurve::
      magnitude1Label () const
      {
        return this->magnitude1Label_.get ();
      }

      TransitionCurve::Magnitude1LabelType& TransitionCurve::
      magnitude1Label ()
      {
        return this->magnitude1Label_.get ();
      }

      void TransitionCurve::
      magnitude1Label (const Magnitude1LabelType& x)
      {
        this->magnitude1Label_.set (x);
      }

      void TransitionCurve::
      magnitude1Label (::std::unique_ptr< Magnitude1LabelType > x)
      {
        this->magnitude1Label_.set (std::move (x));
      }

      const TransitionCurve::AutoScaleLabelType& TransitionCurve::
      autoScaleLabel () const
      {
        return this->autoScaleLabel_.get ();
      }

      TransitionCurve::AutoScaleLabelType& TransitionCurve::
      autoScaleLabel ()
      {
        return this->autoScaleLabel_.get ();
      }

      void TransitionCurve::
      autoScaleLabel (const AutoScaleLabelType& x)
      {
        this->autoScaleLabel_.set (x);
      }

      void TransitionCurve::
      autoScaleLabel (::std::unique_ptr< AutoScaleLabelType > x)
      {
        this->autoScaleLabel_.set (std::move (x));
      }

      const TransitionCurve::CurveIdType& TransitionCurve::
      curveId () const
      {
        return this->curveId_.get ();
      }

      TransitionCurve::CurveIdType& TransitionCurve::
      curveId ()
      {
        return this->curveId_.get ();
      }

      void TransitionCurve::
      curveId (const CurveIdType& x)
      {
        this->curveId_.set (x);
      }

      void TransitionCurve::
      curveId (::std::unique_ptr< CurveIdType > x)
      {
        this->curveId_.set (std::move (x));
      }

      const TransitionCurve::CurveIdType& TransitionCurve::
      curveId_default_value ()
      {
        return curveId_default_value_;
      }

      const TransitionCurve::Vertex0IdType& TransitionCurve::
      vertex0Id () const
      {
        return this->vertex0Id_.get ();
      }

      TransitionCurve::Vertex0IdType& TransitionCurve::
      vertex0Id ()
      {
        return this->vertex0Id_.get ();
      }

      void TransitionCurve::
      vertex0Id (const Vertex0IdType& x)
      {
        this->vertex0Id_.set (x);
      }

      void TransitionCurve::
      vertex0Id (::std::unique_ptr< Vertex0IdType > x)
      {
        this->vertex0Id_.set (std::move (x));
      }

      const TransitionCurve::Vertex0IdType& TransitionCurve::
      vertex0Id_default_value ()
      {
        return vertex0Id_default_value_;
      }

      const TransitionCurve::Vertex1IdType& TransitionCurve::
      vertex1Id () const
      {
        return this->vertex1Id_.get ();
      }

      TransitionCurve::Vertex1IdType& TransitionCurve::
      vertex1Id ()
      {
        return this->vertex1Id_.get ();
      }

      void TransitionCurve::
      vertex1Id (const Vertex1IdType& x)
      {
        this->vertex1Id_.set (x);
      }

      void TransitionCurve::
      vertex1Id (::std::unique_ptr< Vertex1IdType > x)
      {
        this->vertex1Id_.set (std::move (x));
      }

      const TransitionCurve::Vertex1IdType& TransitionCurve::
      vertex1Id_default_value ()
      {
        return vertex1Id_default_value_;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace tscs
    {
      // TransitionCurve
      //

      const TransitionCurve::CurveIdType TransitionCurve::curveId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      const TransitionCurve::Vertex0IdType TransitionCurve::vertex0Id_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      const TransitionCurve::Vertex1IdType TransitionCurve::vertex1Id_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      TransitionCurve::
      TransitionCurve (const BaseType& base,
                       const PicksType& picks,
                       const Direction0Type& direction0,
                       const Direction1Type& direction1,
                       const Magnitude0Type& magnitude0,
                       const Magnitude1Type& magnitude1,
                       const AutoScaleType& autoScale,
                       const SeerShapeType& seerShape,
                       const Direction0LabelType& direction0Label,
                       const Direction1LabelType& direction1Label,
                       const Magnitude0LabelType& magnitude0Label,
                       const Magnitude1LabelType& magnitude1Label,
                       const AutoScaleLabelType& autoScaleLabel,
                       const CurveIdType& curveId,
                       const Vertex0IdType& vertex0Id,
                       const Vertex1IdType& vertex1Id)
      : ::xml_schema::Type (),
        base_ (base, this),
        picks_ (picks, this),
        direction0_ (direction0, this),
        direction1_ (direction1, this),
        magnitude0_ (magnitude0, this),
        magnitude1_ (magnitude1, this),
        autoScale_ (autoScale, this),
        seerShape_ (seerShape, this),
        direction0Label_ (direction0Label, this),
        direction1Label_ (direction1Label, this),
        magnitude0Label_ (magnitude0Label, this),
        magnitude1Label_ (magnitude1Label, this),
        autoScaleLabel_ (autoScaleLabel, this),
        curveId_ (curveId, this),
        vertex0Id_ (vertex0Id, this),
        vertex1Id_ (vertex1Id, this)
      {
      }

      TransitionCurve::
      TransitionCurve (::std::unique_ptr< BaseType > base,
                       ::std::unique_ptr< PicksType > picks,
                       ::std::unique_ptr< Direction0Type > direction0,
                       ::std::unique_ptr< Direction1Type > direction1,
                       ::std::unique_ptr< Magnitude0Type > magnitude0,
                       ::std::unique_ptr< Magnitude1Type > magnitude1,
                       ::std::unique_ptr< AutoScaleType > autoScale,
                       ::std::unique_ptr< SeerShapeType > seerShape,
                       ::std::unique_ptr< Direction0LabelType > direction0Label,
                       ::std::unique_ptr< Direction1LabelType > direction1Label,
                       ::std::unique_ptr< Magnitude0LabelType > magnitude0Label,
                       ::std::unique_ptr< Magnitude1LabelType > magnitude1Label,
                       ::std::unique_ptr< AutoScaleLabelType > autoScaleLabel,
                       const CurveIdType& curveId,
                       const Vertex0IdType& vertex0Id,
                       const Vertex1IdType& vertex1Id)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        picks_ (std::move (picks), this),
        direction0_ (std::move (direction0), this),
        direction1_ (std::move (direction1), this),
        magnitude0_ (std::move (magnitude0), this),
        magnitude1_ (std::move (magnitude1), this),
        autoScale_ (std::move (autoScale), this),
        seerShape_ (std::move (seerShape), this),
        direction0Label_ (std::move (direction0Label), this),
        direction1Label_ (std::move (direction1Label), this),
        magnitude0Label_ (std::move (magnitude0Label), this),
        magnitude1Label_ (std::move (magnitude1Label), this),
        autoScaleLabel_ (std::move (autoScaleLabel), this),
        curveId_ (curveId, this),
        vertex0Id_ (vertex0Id, this),
        vertex1Id_ (vertex1Id, this)
      {
      }

      TransitionCurve::
      TransitionCurve (const TransitionCurve& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        picks_ (x.picks_, f, this),
        direction0_ (x.direction0_, f, this),
        direction1_ (x.direction1_, f, this),
        magnitude0_ (x.magnitude0_, f, this),
        magnitude1_ (x.magnitude1_, f, this),
        autoScale_ (x.autoScale_, f, this),
        seerShape_ (x.seerShape_, f, this),
        direction0Label_ (x.direction0Label_, f, this),
        direction1Label_ (x.direction1Label_, f, this),
        magnitude0Label_ (x.magnitude0Label_, f, this),
        magnitude1Label_ (x.magnitude1Label_, f, this),
        autoScaleLabel_ (x.autoScaleLabel_, f, this),
        curveId_ (x.curveId_, f, this),
        vertex0Id_ (x.vertex0Id_, f, this),
        vertex1Id_ (x.vertex1Id_, f, this)
      {
      }

      TransitionCurve::
      TransitionCurve (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        picks_ (this),
        direction0_ (this),
        direction1_ (this),
        magnitude0_ (this),
        magnitude1_ (this),
        autoScale_ (this),
        seerShape_ (this),
        direction0Label_ (this),
        direction1Label_ (this),
        magnitude0Label_ (this),
        magnitude1Label_ (this),
        autoScaleLabel_ (this),
        curveId_ (this),
        vertex0Id_ (this),
        vertex1Id_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void TransitionCurve::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // picks
          //
          if (n.name () == "picks" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PicksType > r (
              PicksTraits::create (i, f, this));

            if (!picks_.present ())
            {
              this->picks_.set (::std::move (r));
              continue;
            }
          }

          // direction0
          //
          if (n.name () == "direction0" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Direction0Type > r (
              Direction0Traits::create (i, f, this));

            if (!direction0_.present ())
            {
              this->direction0_.set (::std::move (r));
              continue;
            }
          }

          // direction1
          //
          if (n.name () == "direction1" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Direction1Type > r (
              Direction1Traits::create (i, f, this));

            if (!direction1_.present ())
            {
              this->direction1_.set (::std::move (r));
              continue;
            }
          }

          // magnitude0
          //
          if (n.name () == "magnitude0" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Magnitude0Type > r (
              Magnitude0Traits::create (i, f, this));

            if (!magnitude0_.present ())
            {
              this->magnitude0_.set (::std::move (r));
              continue;
            }
          }

          // magnitude1
          //
          if (n.name () == "magnitude1" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Magnitude1Type > r (
              Magnitude1Traits::create (i, f, this));

            if (!magnitude1_.present ())
            {
              this->magnitude1_.set (::std::move (r));
              continue;
            }
          }

          // autoScale
          //
          if (n.name () == "autoScale" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AutoScaleType > r (
              AutoScaleTraits::create (i, f, this));

            if (!autoScale_.present ())
            {
              this->autoScale_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // direction0Label
          //
          if (n.name () == "direction0Label" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Direction0LabelType > r (
              Direction0LabelTraits::create (i, f, this));

            if (!direction0Label_.present ())
            {
              this->direction0Label_.set (::std::move (r));
              continue;
            }
          }

          // direction1Label
          //
          if (n.name () == "direction1Label" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Direction1LabelType > r (
              Direction1LabelTraits::create (i, f, this));

            if (!direction1Label_.present ())
            {
              this->direction1Label_.set (::std::move (r));
              continue;
            }
          }

          // magnitude0Label
          //
          if (n.name () == "magnitude0Label" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Magnitude0LabelType > r (
              Magnitude0LabelTraits::create (i, f, this));

            if (!magnitude0Label_.present ())
            {
              this->magnitude0Label_.set (::std::move (r));
              continue;
            }
          }

          // magnitude1Label
          //
          if (n.name () == "magnitude1Label" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Magnitude1LabelType > r (
              Magnitude1LabelTraits::create (i, f, this));

            if (!magnitude1Label_.present ())
            {
              this->magnitude1Label_.set (::std::move (r));
              continue;
            }
          }

          // autoScaleLabel
          //
          if (n.name () == "autoScaleLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AutoScaleLabelType > r (
              AutoScaleLabelTraits::create (i, f, this));

            if (!autoScaleLabel_.present ())
            {
              this->autoScaleLabel_.set (::std::move (r));
              continue;
            }
          }

          // curveId
          //
          if (n.name () == "curveId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CurveIdType > r (
              CurveIdTraits::create (i, f, this));

            if (!curveId_.present ())
            {
              this->curveId_.set (::std::move (r));
              continue;
            }
          }

          // vertex0Id
          //
          if (n.name () == "vertex0Id" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Vertex0IdType > r (
              Vertex0IdTraits::create (i, f, this));

            if (!vertex0Id_.present ())
            {
              this->vertex0Id_.set (::std::move (r));
              continue;
            }
          }

          // vertex1Id
          //
          if (n.name () == "vertex1Id" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< Vertex1IdType > r (
              Vertex1IdTraits::create (i, f, this));

            if (!vertex1Id_.present ())
            {
              this->vertex1Id_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!picks_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "picks",
            "");
        }

        if (!direction0_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "direction0",
            "");
        }

        if (!direction1_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "direction1",
            "");
        }

        if (!magnitude0_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "magnitude0",
            "");
        }

        if (!magnitude1_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "magnitude1",
            "");
        }

        if (!autoScale_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "autoScale",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!direction0Label_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "direction0Label",
            "");
        }

        if (!direction1Label_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "direction1Label",
            "");
        }

        if (!magnitude0Label_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "magnitude0Label",
            "");
        }

        if (!magnitude1Label_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "magnitude1Label",
            "");
        }

        if (!autoScaleLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "autoScaleLabel",
            "");
        }

        if (!curveId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "curveId",
            "");
        }

        if (!vertex0Id_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "vertex0Id",
            "");
        }

        if (!vertex1Id_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "vertex1Id",
            "");
        }
      }

      TransitionCurve* TransitionCurve::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class TransitionCurve (*this, f, c);
      }

      TransitionCurve& TransitionCurve::
      operator= (const TransitionCurve& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->picks_ = x.picks_;
          this->direction0_ = x.direction0_;
          this->direction1_ = x.direction1_;
          this->magnitude0_ = x.magnitude0_;
          this->magnitude1_ = x.magnitude1_;
          this->autoScale_ = x.autoScale_;
          this->seerShape_ = x.seerShape_;
          this->direction0Label_ = x.direction0Label_;
          this->direction1Label_ = x.direction1Label_;
          this->magnitude0Label_ = x.magnitude0Label_;
          this->magnitude1Label_ = x.magnitude1Label_;
          this->autoScaleLabel_ = x.autoScaleLabel_;
          this->curveId_ = x.curveId_;
          this->vertex0Id_ = x.vertex0Id_;
          this->vertex1Id_ = x.vertex1Id_;
        }

        return *this;
      }

      TransitionCurve::
      ~TransitionCurve ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace tscs
    {
      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > (
          ::prj::srl::tscs::transitionCurve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > (
          ::prj::srl::tscs::transitionCurve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > (
          ::prj::srl::tscs::transitionCurve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::tscs::transitionCurve (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::tscs::transitionCurve (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::tscs::transitionCurve (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::tscs::transitionCurve (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::tscs::transitionCurve (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::tscs::transitionCurve (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > (
          ::prj::srl::tscs::transitionCurve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > (
          ::prj::srl::tscs::transitionCurve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > (
          ::prj::srl::tscs::transitionCurve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > (
            ::prj::srl::tscs::transitionCurve (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "transitionCurve" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/tscs")
        {
          ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > r (
            ::xsd::cxx::tree::traits< ::prj::srl::tscs::TransitionCurve, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "transitionCurve",
          "http://www.cadseer.com/prj/srl/tscs");
      }

      ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve >
      transitionCurve (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "transitionCurve" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/tscs")
        {
          ::std::unique_ptr< ::prj::srl::tscs::TransitionCurve > r (
            ::xsd::cxx::tree::traits< ::prj::srl::tscs::TransitionCurve, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "transitionCurve",
          "http://www.cadseer.com/prj/srl/tscs");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace tscs
    {
      void
      operator<< (::xercesc::DOMElement& e, const TransitionCurve& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // picks
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "picks",
              e));

          s << i.picks ();
        }

        // direction0
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "direction0",
              e));

          s << i.direction0 ();
        }

        // direction1
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "direction1",
              e));

          s << i.direction1 ();
        }

        // magnitude0
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "magnitude0",
              e));

          s << i.magnitude0 ();
        }

        // magnitude1
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "magnitude1",
              e));

          s << i.magnitude1 ();
        }

        // autoScale
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "autoScale",
              e));

          s << i.autoScale ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // direction0Label
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "direction0Label",
              e));

          s << i.direction0Label ();
        }

        // direction1Label
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "direction1Label",
              e));

          s << i.direction1Label ();
        }

        // magnitude0Label
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "magnitude0Label",
              e));

          s << i.magnitude0Label ();
        }

        // magnitude1Label
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "magnitude1Label",
              e));

          s << i.magnitude1Label ();
        }

        // autoScaleLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "autoScaleLabel",
              e));

          s << i.autoScaleLabel ();
        }

        // curveId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "curveId",
              e));

          s << i.curveId ();
        }

        // vertex0Id
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "vertex0Id",
              e));

          s << i.vertex0Id ();
        }

        // vertex1Id
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "vertex1Id",
              e));

          s << i.vertex1Id ();
        }
      }

      void
      transitionCurve (::std::ostream& o,
                       const ::prj::srl::tscs::TransitionCurve& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::tscs::transitionCurve (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      transitionCurve (::std::ostream& o,
                       const ::prj::srl::tscs::TransitionCurve& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::tscs::transitionCurve (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      transitionCurve (::std::ostream& o,
                       const ::prj::srl::tscs::TransitionCurve& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::tscs::transitionCurve (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      transitionCurve (::xercesc::XMLFormatTarget& t,
                       const ::prj::srl::tscs::TransitionCurve& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::tscs::transitionCurve (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      transitionCurve (::xercesc::XMLFormatTarget& t,
                       const ::prj::srl::tscs::TransitionCurve& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::tscs::transitionCurve (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      transitionCurve (::xercesc::XMLFormatTarget& t,
                       const ::prj::srl::tscs::TransitionCurve& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::tscs::transitionCurve (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      transitionCurve (::xercesc::DOMDocument& d,
                       const ::prj::srl::tscs::TransitionCurve& s,
                       ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "transitionCurve" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/tscs")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "transitionCurve",
            "http://www.cadseer.com/prj/srl/tscs");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      transitionCurve (const ::prj::srl::tscs::TransitionCurve& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "transitionCurve",
            "http://www.cadseer.com/prj/srl/tscs",
            m, f));

        ::prj::srl::tscs::transitionCurve (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

