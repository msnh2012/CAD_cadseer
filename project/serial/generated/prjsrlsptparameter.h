// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_SPT_PRJSRLSPTPARAMETER_H
#define PRJ_SRL_SPT_PRJSRLSPTPARAMETER_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class ParameterValue;
      class Parameter;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptvectormath.h"

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class ParameterValue: public ::xml_schema::Type
      {
        public:
        // aDouble
        //
        typedef ::xml_schema::Double ADoubleType;
        typedef ::xsd::cxx::tree::optional< ADoubleType > ADoubleOptional;
        typedef ::xsd::cxx::tree::traits< ADoubleType, char, ::xsd::cxx::tree::schema_type::double_ > ADoubleTraits;

        const ADoubleOptional&
        aDouble () const;

        ADoubleOptional&
        aDouble ();

        void
        aDouble (const ADoubleType& x);

        void
        aDouble (const ADoubleOptional& x);

        static ADoubleType
        aDouble_default_value ();

        // anInteger
        //
        typedef ::xml_schema::Int AnIntegerType;
        typedef ::xsd::cxx::tree::optional< AnIntegerType > AnIntegerOptional;
        typedef ::xsd::cxx::tree::traits< AnIntegerType, char > AnIntegerTraits;

        const AnIntegerOptional&
        anInteger () const;

        AnIntegerOptional&
        anInteger ();

        void
        anInteger (const AnIntegerType& x);

        void
        anInteger (const AnIntegerOptional& x);

        static AnIntegerType
        anInteger_default_value ();

        // aBool
        //
        typedef ::xml_schema::Boolean ABoolType;
        typedef ::xsd::cxx::tree::optional< ABoolType > ABoolOptional;
        typedef ::xsd::cxx::tree::traits< ABoolType, char > ABoolTraits;

        const ABoolOptional&
        aBool () const;

        ABoolOptional&
        aBool ();

        void
        aBool (const ABoolType& x);

        void
        aBool (const ABoolOptional& x);

        static ABoolType
        aBool_default_value ();

        // aString
        //
        typedef ::xml_schema::String AStringType;
        typedef ::xsd::cxx::tree::optional< AStringType > AStringOptional;
        typedef ::xsd::cxx::tree::traits< AStringType, char > AStringTraits;

        const AStringOptional&
        aString () const;

        AStringOptional&
        aString ();

        void
        aString (const AStringType& x);

        void
        aString (const AStringOptional& x);

        void
        aString (::std::unique_ptr< AStringType > p);

        // aPath
        //
        typedef ::xml_schema::Uri APathType;
        typedef ::xsd::cxx::tree::optional< APathType > APathOptional;
        typedef ::xsd::cxx::tree::traits< APathType, char > APathTraits;

        const APathOptional&
        aPath () const;

        APathOptional&
        aPath ();

        void
        aPath (const APathType& x);

        void
        aPath (const APathOptional& x);

        void
        aPath (::std::unique_ptr< APathType > p);

        // aVec3d
        //
        typedef ::prj::srl::spt::Vec3d AVec3dType;
        typedef ::xsd::cxx::tree::optional< AVec3dType > AVec3dOptional;
        typedef ::xsd::cxx::tree::traits< AVec3dType, char > AVec3dTraits;

        const AVec3dOptional&
        aVec3d () const;

        AVec3dOptional&
        aVec3d ();

        void
        aVec3d (const AVec3dType& x);

        void
        aVec3d (const AVec3dOptional& x);

        void
        aVec3d (::std::unique_ptr< AVec3dType > p);

        // aQuat
        //
        typedef ::prj::srl::spt::Quat AQuatType;
        typedef ::xsd::cxx::tree::optional< AQuatType > AQuatOptional;
        typedef ::xsd::cxx::tree::traits< AQuatType, char > AQuatTraits;

        const AQuatOptional&
        aQuat () const;

        AQuatOptional&
        aQuat ();

        void
        aQuat (const AQuatType& x);

        void
        aQuat (const AQuatOptional& x);

        void
        aQuat (::std::unique_ptr< AQuatType > p);

        // aMatrixd
        //
        typedef ::prj::srl::spt::Matrixd AMatrixdType;
        typedef ::xsd::cxx::tree::optional< AMatrixdType > AMatrixdOptional;
        typedef ::xsd::cxx::tree::traits< AMatrixdType, char > AMatrixdTraits;

        const AMatrixdOptional&
        aMatrixd () const;

        AMatrixdOptional&
        aMatrixd ();

        void
        aMatrixd (const AMatrixdType& x);

        void
        aMatrixd (const AMatrixdOptional& x);

        void
        aMatrixd (::std::unique_ptr< AMatrixdType > p);

        // Constructors.
        //
        ParameterValue ();

        ParameterValue (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

        ParameterValue (const ParameterValue& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

        virtual ParameterValue*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        ParameterValue&
        operator= (const ParameterValue& x);

        virtual 
        ~ParameterValue ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ADoubleOptional aDouble_;
        AnIntegerOptional anInteger_;
        ABoolOptional aBool_;
        AStringOptional aString_;
        APathOptional aPath_;
        AVec3dOptional aVec3d_;
        AQuatOptional aQuat_;
        AMatrixdOptional aMatrixd_;
      };

      class Parameter: public ::xml_schema::Type
      {
        public:
        // name
        //
        typedef ::xml_schema::String NameType;
        typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

        const NameType&
        name () const;

        NameType&
        name ();

        void
        name (const NameType& x);

        void
        name (::std::unique_ptr< NameType > p);

        static const NameType&
        name_default_value ();

        // constant
        //
        typedef ::xml_schema::Boolean ConstantType;
        typedef ::xsd::cxx::tree::traits< ConstantType, char > ConstantTraits;

        const ConstantType&
        constant () const;

        ConstantType&
        constant ();

        void
        constant (const ConstantType& x);

        static ConstantType
        constant_default_value ();

        // id
        //
        typedef ::xml_schema::String IdType;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdType&
        id () const;

        IdType&
        id ();

        void
        id (const IdType& x);

        void
        id (::std::unique_ptr< IdType > p);

        static const IdType&
        id_default_value ();

        // pValue
        //
        typedef ::prj::srl::spt::ParameterValue PValueType;
        typedef ::xsd::cxx::tree::traits< PValueType, char > PValueTraits;

        const PValueType&
        pValue () const;

        PValueType&
        pValue ();

        void
        pValue (const PValueType& x);

        void
        pValue (::std::unique_ptr< PValueType > p);

        // Constructors.
        //
        Parameter (const NameType&,
                   const ConstantType&,
                   const IdType&,
                   const PValueType&);

        Parameter (const NameType&,
                   const ConstantType&,
                   const IdType&,
                   ::std::unique_ptr< PValueType >);

        Parameter (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        Parameter (const Parameter& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual Parameter*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Parameter&
        operator= (const Parameter& x);

        virtual 
        ~Parameter ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< NameType > name_;
        static const NameType name_default_value_;
        ::xsd::cxx::tree::one< ConstantType > constant_;
        ::xsd::cxx::tree::one< IdType > id_;
        static const IdType id_default_value_;
        ::xsd::cxx::tree::one< PValueType > pValue_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement&, const ParameterValue&);

      void
      operator<< (::xercesc::DOMElement&, const Parameter&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_SPT_PRJSRLSPTPARAMETER_H
