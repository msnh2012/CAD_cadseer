// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_INLS_PRJSRLINLSINSTANCELINEAR_H
#define PRJ_SRL_INLS_PRJSRLINLSINSTANCELINEAR_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace inls
    {
      class InstanceLinear;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptinstancemapping.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace inls
    {
      class InstanceLinear: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // source
        //
        typedef ::prj::srl::spt::Parameter SourceType;
        typedef ::xsd::cxx::tree::traits< SourceType, char > SourceTraits;

        const SourceType&
        source () const;

        SourceType&
        source ();

        void
        source (const SourceType& x);

        void
        source (::std::unique_ptr< SourceType > p);

        // csys
        //
        typedef ::prj::srl::spt::Parameter CsysType;
        typedef ::xsd::cxx::tree::traits< CsysType, char > CsysTraits;

        const CsysType&
        csys () const;

        CsysType&
        csys ();

        void
        csys (const CsysType& x);

        void
        csys (::std::unique_ptr< CsysType > p);

        // xOffset
        //
        typedef ::prj::srl::spt::Parameter XOffsetType;
        typedef ::xsd::cxx::tree::traits< XOffsetType, char > XOffsetTraits;

        const XOffsetType&
        xOffset () const;

        XOffsetType&
        xOffset ();

        void
        xOffset (const XOffsetType& x);

        void
        xOffset (::std::unique_ptr< XOffsetType > p);

        // yOffset
        //
        typedef ::prj::srl::spt::Parameter YOffsetType;
        typedef ::xsd::cxx::tree::traits< YOffsetType, char > YOffsetTraits;

        const YOffsetType&
        yOffset () const;

        YOffsetType&
        yOffset ();

        void
        yOffset (const YOffsetType& x);

        void
        yOffset (::std::unique_ptr< YOffsetType > p);

        // zOffset
        //
        typedef ::prj::srl::spt::Parameter ZOffsetType;
        typedef ::xsd::cxx::tree::traits< ZOffsetType, char > ZOffsetTraits;

        const ZOffsetType&
        zOffset () const;

        ZOffsetType&
        zOffset ();

        void
        zOffset (const ZOffsetType& x);

        void
        zOffset (::std::unique_ptr< ZOffsetType > p);

        // xCount
        //
        typedef ::prj::srl::spt::Parameter XCountType;
        typedef ::xsd::cxx::tree::traits< XCountType, char > XCountTraits;

        const XCountType&
        xCount () const;

        XCountType&
        xCount ();

        void
        xCount (const XCountType& x);

        void
        xCount (::std::unique_ptr< XCountType > p);

        // yCount
        //
        typedef ::prj::srl::spt::Parameter YCountType;
        typedef ::xsd::cxx::tree::traits< YCountType, char > YCountTraits;

        const YCountType&
        yCount () const;

        YCountType&
        yCount ();

        void
        yCount (const YCountType& x);

        void
        yCount (::std::unique_ptr< YCountType > p);

        // zCount
        //
        typedef ::prj::srl::spt::Parameter ZCountType;
        typedef ::xsd::cxx::tree::traits< ZCountType, char > ZCountTraits;

        const ZCountType&
        zCount () const;

        ZCountType&
        zCount ();

        void
        zCount (const ZCountType& x);

        void
        zCount (::std::unique_ptr< ZCountType > p);

        // includeSource
        //
        typedef ::prj::srl::spt::Parameter IncludeSourceType;
        typedef ::xsd::cxx::tree::traits< IncludeSourceType, char > IncludeSourceTraits;

        const IncludeSourceType&
        includeSource () const;

        IncludeSourceType&
        includeSource ();

        void
        includeSource (const IncludeSourceType& x);

        void
        includeSource (::std::unique_ptr< IncludeSourceType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // instanceMaps
        //
        typedef ::prj::srl::spt::InstanceMaps InstanceMapsType;
        typedef ::xsd::cxx::tree::traits< InstanceMapsType, char > InstanceMapsTraits;

        const InstanceMapsType&
        instanceMaps () const;

        InstanceMapsType&
        instanceMaps ();

        void
        instanceMaps (const InstanceMapsType& x);

        void
        instanceMaps (::std::unique_ptr< InstanceMapsType > p);

        // csysDragger
        //
        typedef ::prj::srl::spt::CSysDragger CsysDraggerType;
        typedef ::xsd::cxx::tree::traits< CsysDraggerType, char > CsysDraggerTraits;

        const CsysDraggerType&
        csysDragger () const;

        CsysDraggerType&
        csysDragger ();

        void
        csysDragger (const CsysDraggerType& x);

        void
        csysDragger (::std::unique_ptr< CsysDraggerType > p);

        // xOffsetLabel
        //
        typedef ::prj::srl::spt::PLabel XOffsetLabelType;
        typedef ::xsd::cxx::tree::traits< XOffsetLabelType, char > XOffsetLabelTraits;

        const XOffsetLabelType&
        xOffsetLabel () const;

        XOffsetLabelType&
        xOffsetLabel ();

        void
        xOffsetLabel (const XOffsetLabelType& x);

        void
        xOffsetLabel (::std::unique_ptr< XOffsetLabelType > p);

        // yOffsetLabel
        //
        typedef ::prj::srl::spt::PLabel YOffsetLabelType;
        typedef ::xsd::cxx::tree::traits< YOffsetLabelType, char > YOffsetLabelTraits;

        const YOffsetLabelType&
        yOffsetLabel () const;

        YOffsetLabelType&
        yOffsetLabel ();

        void
        yOffsetLabel (const YOffsetLabelType& x);

        void
        yOffsetLabel (::std::unique_ptr< YOffsetLabelType > p);

        // zOffsetLabel
        //
        typedef ::prj::srl::spt::PLabel ZOffsetLabelType;
        typedef ::xsd::cxx::tree::traits< ZOffsetLabelType, char > ZOffsetLabelTraits;

        const ZOffsetLabelType&
        zOffsetLabel () const;

        ZOffsetLabelType&
        zOffsetLabel ();

        void
        zOffsetLabel (const ZOffsetLabelType& x);

        void
        zOffsetLabel (::std::unique_ptr< ZOffsetLabelType > p);

        // xCountLabel
        //
        typedef ::prj::srl::spt::PLabel XCountLabelType;
        typedef ::xsd::cxx::tree::traits< XCountLabelType, char > XCountLabelTraits;

        const XCountLabelType&
        xCountLabel () const;

        XCountLabelType&
        xCountLabel ();

        void
        xCountLabel (const XCountLabelType& x);

        void
        xCountLabel (::std::unique_ptr< XCountLabelType > p);

        // yCountLabel
        //
        typedef ::prj::srl::spt::PLabel YCountLabelType;
        typedef ::xsd::cxx::tree::traits< YCountLabelType, char > YCountLabelTraits;

        const YCountLabelType&
        yCountLabel () const;

        YCountLabelType&
        yCountLabel ();

        void
        yCountLabel (const YCountLabelType& x);

        void
        yCountLabel (::std::unique_ptr< YCountLabelType > p);

        // zCountLabel
        //
        typedef ::prj::srl::spt::PLabel ZCountLabelType;
        typedef ::xsd::cxx::tree::traits< ZCountLabelType, char > ZCountLabelTraits;

        const ZCountLabelType&
        zCountLabel () const;

        ZCountLabelType&
        zCountLabel ();

        void
        zCountLabel (const ZCountLabelType& x);

        void
        zCountLabel (::std::unique_ptr< ZCountLabelType > p);

        // includeSourceLabel
        //
        typedef ::prj::srl::spt::PLabel IncludeSourceLabelType;
        typedef ::xsd::cxx::tree::traits< IncludeSourceLabelType, char > IncludeSourceLabelTraits;

        const IncludeSourceLabelType&
        includeSourceLabel () const;

        IncludeSourceLabelType&
        includeSourceLabel ();

        void
        includeSourceLabel (const IncludeSourceLabelType& x);

        void
        includeSourceLabel (::std::unique_ptr< IncludeSourceLabelType > p);

        // Constructors.
        //
        InstanceLinear (const BaseType&,
                        const SourceType&,
                        const CsysType&,
                        const XOffsetType&,
                        const YOffsetType&,
                        const ZOffsetType&,
                        const XCountType&,
                        const YCountType&,
                        const ZCountType&,
                        const IncludeSourceType&,
                        const SeerShapeType&,
                        const InstanceMapsType&,
                        const CsysDraggerType&,
                        const XOffsetLabelType&,
                        const YOffsetLabelType&,
                        const ZOffsetLabelType&,
                        const XCountLabelType&,
                        const YCountLabelType&,
                        const ZCountLabelType&,
                        const IncludeSourceLabelType&);

        InstanceLinear (::std::unique_ptr< BaseType >,
                        ::std::unique_ptr< SourceType >,
                        ::std::unique_ptr< CsysType >,
                        ::std::unique_ptr< XOffsetType >,
                        ::std::unique_ptr< YOffsetType >,
                        ::std::unique_ptr< ZOffsetType >,
                        ::std::unique_ptr< XCountType >,
                        ::std::unique_ptr< YCountType >,
                        ::std::unique_ptr< ZCountType >,
                        ::std::unique_ptr< IncludeSourceType >,
                        ::std::unique_ptr< SeerShapeType >,
                        ::std::unique_ptr< InstanceMapsType >,
                        ::std::unique_ptr< CsysDraggerType >,
                        ::std::unique_ptr< XOffsetLabelType >,
                        ::std::unique_ptr< YOffsetLabelType >,
                        ::std::unique_ptr< ZOffsetLabelType >,
                        ::std::unique_ptr< XCountLabelType >,
                        ::std::unique_ptr< YCountLabelType >,
                        ::std::unique_ptr< ZCountLabelType >,
                        ::std::unique_ptr< IncludeSourceLabelType >);

        InstanceLinear (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

        InstanceLinear (const InstanceLinear& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

        virtual InstanceLinear*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        InstanceLinear&
        operator= (const InstanceLinear& x);

        virtual 
        ~InstanceLinear ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< SourceType > source_;
        ::xsd::cxx::tree::one< CsysType > csys_;
        ::xsd::cxx::tree::one< XOffsetType > xOffset_;
        ::xsd::cxx::tree::one< YOffsetType > yOffset_;
        ::xsd::cxx::tree::one< ZOffsetType > zOffset_;
        ::xsd::cxx::tree::one< XCountType > xCount_;
        ::xsd::cxx::tree::one< YCountType > yCount_;
        ::xsd::cxx::tree::one< ZCountType > zCount_;
        ::xsd::cxx::tree::one< IncludeSourceType > includeSource_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< InstanceMapsType > instanceMaps_;
        ::xsd::cxx::tree::one< CsysDraggerType > csysDragger_;
        ::xsd::cxx::tree::one< XOffsetLabelType > xOffsetLabel_;
        ::xsd::cxx::tree::one< YOffsetLabelType > yOffsetLabel_;
        ::xsd::cxx::tree::one< ZOffsetLabelType > zOffsetLabel_;
        ::xsd::cxx::tree::one< XCountLabelType > xCountLabel_;
        ::xsd::cxx::tree::one< YCountLabelType > yCountLabel_;
        ::xsd::cxx::tree::one< ZCountLabelType > zCountLabel_;
        ::xsd::cxx::tree::one< IncludeSourceLabelType > includeSourceLabel_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace inls
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace inls
    {
      void
      operator<< (::xercesc::DOMElement&, const InstanceLinear&);

      // Serialize to std::ostream.
      //

      void
      instanceLinear (::std::ostream& os,
                      const ::prj::srl::inls::InstanceLinear& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      void
      instanceLinear (::std::ostream& os,
                      const ::prj::srl::inls::InstanceLinear& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      void
      instanceLinear (::std::ostream& os,
                      const ::prj::srl::inls::InstanceLinear& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      instanceLinear (::xercesc::XMLFormatTarget& ft,
                      const ::prj::srl::inls::InstanceLinear& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      void
      instanceLinear (::xercesc::XMLFormatTarget& ft,
                      const ::prj::srl::inls::InstanceLinear& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      void
      instanceLinear (::xercesc::XMLFormatTarget& ft,
                      const ::prj::srl::inls::InstanceLinear& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      instanceLinear (::xercesc::DOMDocument& d,
                      const ::prj::srl::inls::InstanceLinear& x,
                      ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      instanceLinear (const ::prj::srl::inls::InstanceLinear& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_INLS_PRJSRLINLSINSTANCELINEAR_H
