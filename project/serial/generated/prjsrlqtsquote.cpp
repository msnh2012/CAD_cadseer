// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlqtsquote.h"

namespace prj
{
  namespace srl
  {
    namespace qts
    {
      // Quote
      // 

      const Quote::BaseType& Quote::
      base () const
      {
        return this->base_.get ();
      }

      Quote::BaseType& Quote::
      base ()
      {
        return this->base_.get ();
      }

      void Quote::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void Quote::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const Quote::StripPickType& Quote::
      stripPick () const
      {
        return this->stripPick_.get ();
      }

      Quote::StripPickType& Quote::
      stripPick ()
      {
        return this->stripPick_.get ();
      }

      void Quote::
      stripPick (const StripPickType& x)
      {
        this->stripPick_.set (x);
      }

      void Quote::
      stripPick (::std::unique_ptr< StripPickType > x)
      {
        this->stripPick_.set (std::move (x));
      }

      const Quote::DiesetPickType& Quote::
      diesetPick () const
      {
        return this->diesetPick_.get ();
      }

      Quote::DiesetPickType& Quote::
      diesetPick ()
      {
        return this->diesetPick_.get ();
      }

      void Quote::
      diesetPick (const DiesetPickType& x)
      {
        this->diesetPick_.set (x);
      }

      void Quote::
      diesetPick (::std::unique_ptr< DiesetPickType > x)
      {
        this->diesetPick_.set (std::move (x));
      }

      const Quote::TFileType& Quote::
      tFile () const
      {
        return this->tFile_.get ();
      }

      Quote::TFileType& Quote::
      tFile ()
      {
        return this->tFile_.get ();
      }

      void Quote::
      tFile (const TFileType& x)
      {
        this->tFile_.set (x);
      }

      void Quote::
      tFile (::std::unique_ptr< TFileType > x)
      {
        this->tFile_.set (std::move (x));
      }

      const Quote::OFileType& Quote::
      oFile () const
      {
        return this->oFile_.get ();
      }

      Quote::OFileType& Quote::
      oFile ()
      {
        return this->oFile_.get ();
      }

      void Quote::
      oFile (const OFileType& x)
      {
        this->oFile_.set (x);
      }

      void Quote::
      oFile (::std::unique_ptr< OFileType > x)
      {
        this->oFile_.set (std::move (x));
      }

      const Quote::PFileType& Quote::
      pFile () const
      {
        return this->pFile_.get ();
      }

      Quote::PFileType& Quote::
      pFile ()
      {
        return this->pFile_.get ();
      }

      void Quote::
      pFile (const PFileType& x)
      {
        this->pFile_.set (x);
      }

      void Quote::
      pFile (::std::unique_ptr< PFileType > x)
      {
        this->pFile_.set (std::move (x));
      }

      const Quote::QuoteNumberType& Quote::
      quoteNumber () const
      {
        return this->quoteNumber_.get ();
      }

      Quote::QuoteNumberType& Quote::
      quoteNumber ()
      {
        return this->quoteNumber_.get ();
      }

      void Quote::
      quoteNumber (const QuoteNumberType& x)
      {
        this->quoteNumber_.set (x);
      }

      void Quote::
      quoteNumber (::std::unique_ptr< QuoteNumberType > x)
      {
        this->quoteNumber_.set (std::move (x));
      }

      const Quote::CustomerNameType& Quote::
      customerName () const
      {
        return this->customerName_.get ();
      }

      Quote::CustomerNameType& Quote::
      customerName ()
      {
        return this->customerName_.get ();
      }

      void Quote::
      customerName (const CustomerNameType& x)
      {
        this->customerName_.set (x);
      }

      void Quote::
      customerName (::std::unique_ptr< CustomerNameType > x)
      {
        this->customerName_.set (std::move (x));
      }

      const Quote::CustomerIdType& Quote::
      customerId () const
      {
        return this->customerId_.get ();
      }

      Quote::CustomerIdType& Quote::
      customerId ()
      {
        return this->customerId_.get ();
      }

      void Quote::
      customerId (const CustomerIdType& x)
      {
        this->customerId_.set (x);
      }

      void Quote::
      customerId (::std::unique_ptr< CustomerIdType > x)
      {
        this->customerId_.set (std::move (x));
      }

      const Quote::PartNameType& Quote::
      partName () const
      {
        return this->partName_.get ();
      }

      Quote::PartNameType& Quote::
      partName ()
      {
        return this->partName_.get ();
      }

      void Quote::
      partName (const PartNameType& x)
      {
        this->partName_.set (x);
      }

      void Quote::
      partName (::std::unique_ptr< PartNameType > x)
      {
        this->partName_.set (std::move (x));
      }

      const Quote::PartNumberType& Quote::
      partNumber () const
      {
        return this->partNumber_.get ();
      }

      Quote::PartNumberType& Quote::
      partNumber ()
      {
        return this->partNumber_.get ();
      }

      void Quote::
      partNumber (const PartNumberType& x)
      {
        this->partNumber_.set (x);
      }

      void Quote::
      partNumber (::std::unique_ptr< PartNumberType > x)
      {
        this->partNumber_.set (std::move (x));
      }

      const Quote::PartSetupType& Quote::
      partSetup () const
      {
        return this->partSetup_.get ();
      }

      Quote::PartSetupType& Quote::
      partSetup ()
      {
        return this->partSetup_.get ();
      }

      void Quote::
      partSetup (const PartSetupType& x)
      {
        this->partSetup_.set (x);
      }

      void Quote::
      partSetup (::std::unique_ptr< PartSetupType > x)
      {
        this->partSetup_.set (std::move (x));
      }

      const Quote::PartRevisionType& Quote::
      partRevision () const
      {
        return this->partRevision_.get ();
      }

      Quote::PartRevisionType& Quote::
      partRevision ()
      {
        return this->partRevision_.get ();
      }

      void Quote::
      partRevision (const PartRevisionType& x)
      {
        this->partRevision_.set (x);
      }

      void Quote::
      partRevision (::std::unique_ptr< PartRevisionType > x)
      {
        this->partRevision_.set (std::move (x));
      }

      const Quote::MaterialTypeType& Quote::
      materialType () const
      {
        return this->materialType_.get ();
      }

      Quote::MaterialTypeType& Quote::
      materialType ()
      {
        return this->materialType_.get ();
      }

      void Quote::
      materialType (const MaterialTypeType& x)
      {
        this->materialType_.set (x);
      }

      void Quote::
      materialType (::std::unique_ptr< MaterialTypeType > x)
      {
        this->materialType_.set (std::move (x));
      }

      const Quote::MaterialThicknessType& Quote::
      materialThickness () const
      {
        return this->materialThickness_.get ();
      }

      Quote::MaterialThicknessType& Quote::
      materialThickness ()
      {
        return this->materialThickness_.get ();
      }

      void Quote::
      materialThickness (const MaterialThicknessType& x)
      {
        this->materialThickness_.set (x);
      }

      void Quote::
      materialThickness (::std::unique_ptr< MaterialThicknessType > x)
      {
        this->materialThickness_.set (std::move (x));
      }

      const Quote::ProcessTypeType& Quote::
      processType () const
      {
        return this->processType_.get ();
      }

      Quote::ProcessTypeType& Quote::
      processType ()
      {
        return this->processType_.get ();
      }

      void Quote::
      processType (const ProcessTypeType& x)
      {
        this->processType_.set (x);
      }

      void Quote::
      processType (::std::unique_ptr< ProcessTypeType > x)
      {
        this->processType_.set (std::move (x));
      }

      const Quote::AnnualVolumeType& Quote::
      annualVolume () const
      {
        return this->annualVolume_.get ();
      }

      Quote::AnnualVolumeType& Quote::
      annualVolume ()
      {
        return this->annualVolume_.get ();
      }

      void Quote::
      annualVolume (const AnnualVolumeType& x)
      {
        this->annualVolume_.set (x);
      }

      void Quote::
      annualVolume (::std::unique_ptr< AnnualVolumeType > x)
      {
        this->annualVolume_.set (std::move (x));
      }

      const Quote::TFileLabelType& Quote::
      tFileLabel () const
      {
        return this->tFileLabel_.get ();
      }

      Quote::TFileLabelType& Quote::
      tFileLabel ()
      {
        return this->tFileLabel_.get ();
      }

      void Quote::
      tFileLabel (const TFileLabelType& x)
      {
        this->tFileLabel_.set (x);
      }

      void Quote::
      tFileLabel (::std::unique_ptr< TFileLabelType > x)
      {
        this->tFileLabel_.set (std::move (x));
      }

      const Quote::OFileLabelType& Quote::
      oFileLabel () const
      {
        return this->oFileLabel_.get ();
      }

      Quote::OFileLabelType& Quote::
      oFileLabel ()
      {
        return this->oFileLabel_.get ();
      }

      void Quote::
      oFileLabel (const OFileLabelType& x)
      {
        this->oFileLabel_.set (x);
      }

      void Quote::
      oFileLabel (::std::unique_ptr< OFileLabelType > x)
      {
        this->oFileLabel_.set (std::move (x));
      }

      const Quote::PFileLabelType& Quote::
      pFileLabel () const
      {
        return this->pFileLabel_.get ();
      }

      Quote::PFileLabelType& Quote::
      pFileLabel ()
      {
        return this->pFileLabel_.get ();
      }

      void Quote::
      pFileLabel (const PFileLabelType& x)
      {
        this->pFileLabel_.set (x);
      }

      void Quote::
      pFileLabel (::std::unique_ptr< PFileLabelType > x)
      {
        this->pFileLabel_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace qts
    {
      // Quote
      //

      Quote::
      Quote (const BaseType& base,
             const StripPickType& stripPick,
             const DiesetPickType& diesetPick,
             const TFileType& tFile,
             const OFileType& oFile,
             const PFileType& pFile,
             const QuoteNumberType& quoteNumber,
             const CustomerNameType& customerName,
             const CustomerIdType& customerId,
             const PartNameType& partName,
             const PartNumberType& partNumber,
             const PartSetupType& partSetup,
             const PartRevisionType& partRevision,
             const MaterialTypeType& materialType,
             const MaterialThicknessType& materialThickness,
             const ProcessTypeType& processType,
             const AnnualVolumeType& annualVolume,
             const TFileLabelType& tFileLabel,
             const OFileLabelType& oFileLabel,
             const PFileLabelType& pFileLabel)
      : ::xml_schema::Type (),
        base_ (base, this),
        stripPick_ (stripPick, this),
        diesetPick_ (diesetPick, this),
        tFile_ (tFile, this),
        oFile_ (oFile, this),
        pFile_ (pFile, this),
        quoteNumber_ (quoteNumber, this),
        customerName_ (customerName, this),
        customerId_ (customerId, this),
        partName_ (partName, this),
        partNumber_ (partNumber, this),
        partSetup_ (partSetup, this),
        partRevision_ (partRevision, this),
        materialType_ (materialType, this),
        materialThickness_ (materialThickness, this),
        processType_ (processType, this),
        annualVolume_ (annualVolume, this),
        tFileLabel_ (tFileLabel, this),
        oFileLabel_ (oFileLabel, this),
        pFileLabel_ (pFileLabel, this)
      {
      }

      Quote::
      Quote (::std::unique_ptr< BaseType > base,
             ::std::unique_ptr< StripPickType > stripPick,
             ::std::unique_ptr< DiesetPickType > diesetPick,
             ::std::unique_ptr< TFileType > tFile,
             ::std::unique_ptr< OFileType > oFile,
             ::std::unique_ptr< PFileType > pFile,
             ::std::unique_ptr< QuoteNumberType > quoteNumber,
             ::std::unique_ptr< CustomerNameType > customerName,
             ::std::unique_ptr< CustomerIdType > customerId,
             ::std::unique_ptr< PartNameType > partName,
             ::std::unique_ptr< PartNumberType > partNumber,
             ::std::unique_ptr< PartSetupType > partSetup,
             ::std::unique_ptr< PartRevisionType > partRevision,
             ::std::unique_ptr< MaterialTypeType > materialType,
             ::std::unique_ptr< MaterialThicknessType > materialThickness,
             ::std::unique_ptr< ProcessTypeType > processType,
             ::std::unique_ptr< AnnualVolumeType > annualVolume,
             ::std::unique_ptr< TFileLabelType > tFileLabel,
             ::std::unique_ptr< OFileLabelType > oFileLabel,
             ::std::unique_ptr< PFileLabelType > pFileLabel)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        stripPick_ (std::move (stripPick), this),
        diesetPick_ (std::move (diesetPick), this),
        tFile_ (std::move (tFile), this),
        oFile_ (std::move (oFile), this),
        pFile_ (std::move (pFile), this),
        quoteNumber_ (std::move (quoteNumber), this),
        customerName_ (std::move (customerName), this),
        customerId_ (std::move (customerId), this),
        partName_ (std::move (partName), this),
        partNumber_ (std::move (partNumber), this),
        partSetup_ (std::move (partSetup), this),
        partRevision_ (std::move (partRevision), this),
        materialType_ (std::move (materialType), this),
        materialThickness_ (std::move (materialThickness), this),
        processType_ (std::move (processType), this),
        annualVolume_ (std::move (annualVolume), this),
        tFileLabel_ (std::move (tFileLabel), this),
        oFileLabel_ (std::move (oFileLabel), this),
        pFileLabel_ (std::move (pFileLabel), this)
      {
      }

      Quote::
      Quote (const Quote& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        stripPick_ (x.stripPick_, f, this),
        diesetPick_ (x.diesetPick_, f, this),
        tFile_ (x.tFile_, f, this),
        oFile_ (x.oFile_, f, this),
        pFile_ (x.pFile_, f, this),
        quoteNumber_ (x.quoteNumber_, f, this),
        customerName_ (x.customerName_, f, this),
        customerId_ (x.customerId_, f, this),
        partName_ (x.partName_, f, this),
        partNumber_ (x.partNumber_, f, this),
        partSetup_ (x.partSetup_, f, this),
        partRevision_ (x.partRevision_, f, this),
        materialType_ (x.materialType_, f, this),
        materialThickness_ (x.materialThickness_, f, this),
        processType_ (x.processType_, f, this),
        annualVolume_ (x.annualVolume_, f, this),
        tFileLabel_ (x.tFileLabel_, f, this),
        oFileLabel_ (x.oFileLabel_, f, this),
        pFileLabel_ (x.pFileLabel_, f, this)
      {
      }

      Quote::
      Quote (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        stripPick_ (this),
        diesetPick_ (this),
        tFile_ (this),
        oFile_ (this),
        pFile_ (this),
        quoteNumber_ (this),
        customerName_ (this),
        customerId_ (this),
        partName_ (this),
        partNumber_ (this),
        partSetup_ (this),
        partRevision_ (this),
        materialType_ (this),
        materialThickness_ (this),
        processType_ (this),
        annualVolume_ (this),
        tFileLabel_ (this),
        oFileLabel_ (this),
        pFileLabel_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Quote::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // stripPick
          //
          if (n.name () == "stripPick" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< StripPickType > r (
              StripPickTraits::create (i, f, this));

            if (!stripPick_.present ())
            {
              this->stripPick_.set (::std::move (r));
              continue;
            }
          }

          // diesetPick
          //
          if (n.name () == "diesetPick" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DiesetPickType > r (
              DiesetPickTraits::create (i, f, this));

            if (!diesetPick_.present ())
            {
              this->diesetPick_.set (::std::move (r));
              continue;
            }
          }

          // tFile
          //
          if (n.name () == "tFile" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TFileType > r (
              TFileTraits::create (i, f, this));

            if (!tFile_.present ())
            {
              this->tFile_.set (::std::move (r));
              continue;
            }
          }

          // oFile
          //
          if (n.name () == "oFile" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< OFileType > r (
              OFileTraits::create (i, f, this));

            if (!oFile_.present ())
            {
              this->oFile_.set (::std::move (r));
              continue;
            }
          }

          // pFile
          //
          if (n.name () == "pFile" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PFileType > r (
              PFileTraits::create (i, f, this));

            if (!pFile_.present ())
            {
              this->pFile_.set (::std::move (r));
              continue;
            }
          }

          // quoteNumber
          //
          if (n.name () == "quoteNumber" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< QuoteNumberType > r (
              QuoteNumberTraits::create (i, f, this));

            if (!quoteNumber_.present ())
            {
              this->quoteNumber_.set (::std::move (r));
              continue;
            }
          }

          // customerName
          //
          if (n.name () == "customerName" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CustomerNameType > r (
              CustomerNameTraits::create (i, f, this));

            if (!customerName_.present ())
            {
              this->customerName_.set (::std::move (r));
              continue;
            }
          }

          // customerId
          //
          if (n.name () == "customerId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CustomerIdType > r (
              CustomerIdTraits::create (i, f, this));

            if (!customerId_.present ())
            {
              this->customerId_.set (::std::move (r));
              continue;
            }
          }

          // partName
          //
          if (n.name () == "partName" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PartNameType > r (
              PartNameTraits::create (i, f, this));

            if (!partName_.present ())
            {
              this->partName_.set (::std::move (r));
              continue;
            }
          }

          // partNumber
          //
          if (n.name () == "partNumber" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PartNumberType > r (
              PartNumberTraits::create (i, f, this));

            if (!partNumber_.present ())
            {
              this->partNumber_.set (::std::move (r));
              continue;
            }
          }

          // partSetup
          //
          if (n.name () == "partSetup" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PartSetupType > r (
              PartSetupTraits::create (i, f, this));

            if (!partSetup_.present ())
            {
              this->partSetup_.set (::std::move (r));
              continue;
            }
          }

          // partRevision
          //
          if (n.name () == "partRevision" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PartRevisionType > r (
              PartRevisionTraits::create (i, f, this));

            if (!partRevision_.present ())
            {
              this->partRevision_.set (::std::move (r));
              continue;
            }
          }

          // materialType
          //
          if (n.name () == "materialType" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< MaterialTypeType > r (
              MaterialTypeTraits::create (i, f, this));

            if (!materialType_.present ())
            {
              this->materialType_.set (::std::move (r));
              continue;
            }
          }

          // materialThickness
          //
          if (n.name () == "materialThickness" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< MaterialThicknessType > r (
              MaterialThicknessTraits::create (i, f, this));

            if (!materialThickness_.present ())
            {
              this->materialThickness_.set (::std::move (r));
              continue;
            }
          }

          // processType
          //
          if (n.name () == "processType" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ProcessTypeType > r (
              ProcessTypeTraits::create (i, f, this));

            if (!processType_.present ())
            {
              this->processType_.set (::std::move (r));
              continue;
            }
          }

          // annualVolume
          //
          if (n.name () == "annualVolume" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AnnualVolumeType > r (
              AnnualVolumeTraits::create (i, f, this));

            if (!annualVolume_.present ())
            {
              this->annualVolume_.set (::std::move (r));
              continue;
            }
          }

          // tFileLabel
          //
          if (n.name () == "tFileLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TFileLabelType > r (
              TFileLabelTraits::create (i, f, this));

            if (!tFileLabel_.present ())
            {
              this->tFileLabel_.set (::std::move (r));
              continue;
            }
          }

          // oFileLabel
          //
          if (n.name () == "oFileLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< OFileLabelType > r (
              OFileLabelTraits::create (i, f, this));

            if (!oFileLabel_.present ())
            {
              this->oFileLabel_.set (::std::move (r));
              continue;
            }
          }

          // pFileLabel
          //
          if (n.name () == "pFileLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PFileLabelType > r (
              PFileLabelTraits::create (i, f, this));

            if (!pFileLabel_.present ())
            {
              this->pFileLabel_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!stripPick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "stripPick",
            "");
        }

        if (!diesetPick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "diesetPick",
            "");
        }

        if (!tFile_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tFile",
            "");
        }

        if (!oFile_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "oFile",
            "");
        }

        if (!pFile_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pFile",
            "");
        }

        if (!quoteNumber_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "quoteNumber",
            "");
        }

        if (!customerName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "customerName",
            "");
        }

        if (!customerId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "customerId",
            "");
        }

        if (!partName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "partName",
            "");
        }

        if (!partNumber_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "partNumber",
            "");
        }

        if (!partSetup_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "partSetup",
            "");
        }

        if (!partRevision_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "partRevision",
            "");
        }

        if (!materialType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "materialType",
            "");
        }

        if (!materialThickness_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "materialThickness",
            "");
        }

        if (!processType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "processType",
            "");
        }

        if (!annualVolume_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "annualVolume",
            "");
        }

        if (!tFileLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tFileLabel",
            "");
        }

        if (!oFileLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "oFileLabel",
            "");
        }

        if (!pFileLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pFileLabel",
            "");
        }
      }

      Quote* Quote::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Quote (*this, f, c);
      }

      Quote& Quote::
      operator= (const Quote& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->stripPick_ = x.stripPick_;
          this->diesetPick_ = x.diesetPick_;
          this->tFile_ = x.tFile_;
          this->oFile_ = x.oFile_;
          this->pFile_ = x.pFile_;
          this->quoteNumber_ = x.quoteNumber_;
          this->customerName_ = x.customerName_;
          this->customerId_ = x.customerId_;
          this->partName_ = x.partName_;
          this->partNumber_ = x.partNumber_;
          this->partSetup_ = x.partSetup_;
          this->partRevision_ = x.partRevision_;
          this->materialType_ = x.materialType_;
          this->materialThickness_ = x.materialThickness_;
          this->processType_ = x.processType_;
          this->annualVolume_ = x.annualVolume_;
          this->tFileLabel_ = x.tFileLabel_;
          this->oFileLabel_ = x.oFileLabel_;
          this->pFileLabel_ = x.pFileLabel_;
        }

        return *this;
      }

      Quote::
      ~Quote ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace qts
    {
      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::qts::Quote > (
          ::prj::srl::qts::quote (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::qts::Quote > (
          ::prj::srl::qts::quote (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::qts::Quote > (
          ::prj::srl::qts::quote (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::qts::quote (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::qts::quote (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::qts::quote (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::qts::quote (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::qts::quote (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::qts::quote (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::qts::Quote > (
          ::prj::srl::qts::quote (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::qts::Quote > (
          ::prj::srl::qts::quote (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::qts::Quote > (
          ::prj::srl::qts::quote (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::qts::Quote > (
            ::prj::srl::qts::quote (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "quote" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/qts")
        {
          ::std::unique_ptr< ::prj::srl::qts::Quote > r (
            ::xsd::cxx::tree::traits< ::prj::srl::qts::Quote, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "quote",
          "http://www.cadseer.com/prj/srl/qts");
      }

      ::std::unique_ptr< ::prj::srl::qts::Quote >
      quote (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "quote" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/qts")
        {
          ::std::unique_ptr< ::prj::srl::qts::Quote > r (
            ::xsd::cxx::tree::traits< ::prj::srl::qts::Quote, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "quote",
          "http://www.cadseer.com/prj/srl/qts");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace qts
    {
      void
      operator<< (::xercesc::DOMElement& e, const Quote& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // stripPick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "stripPick",
              e));

          s << i.stripPick ();
        }

        // diesetPick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "diesetPick",
              e));

          s << i.diesetPick ();
        }

        // tFile
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tFile",
              e));

          s << i.tFile ();
        }

        // oFile
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "oFile",
              e));

          s << i.oFile ();
        }

        // pFile
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pFile",
              e));

          s << i.pFile ();
        }

        // quoteNumber
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "quoteNumber",
              e));

          s << i.quoteNumber ();
        }

        // customerName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "customerName",
              e));

          s << i.customerName ();
        }

        // customerId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "customerId",
              e));

          s << i.customerId ();
        }

        // partName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "partName",
              e));

          s << i.partName ();
        }

        // partNumber
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "partNumber",
              e));

          s << i.partNumber ();
        }

        // partSetup
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "partSetup",
              e));

          s << i.partSetup ();
        }

        // partRevision
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "partRevision",
              e));

          s << i.partRevision ();
        }

        // materialType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "materialType",
              e));

          s << i.materialType ();
        }

        // materialThickness
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "materialThickness",
              e));

          s << i.materialThickness ();
        }

        // processType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "processType",
              e));

          s << i.processType ();
        }

        // annualVolume
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "annualVolume",
              e));

          s << i.annualVolume ();
        }

        // tFileLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tFileLabel",
              e));

          s << i.tFileLabel ();
        }

        // oFileLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "oFileLabel",
              e));

          s << i.oFileLabel ();
        }

        // pFileLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pFileLabel",
              e));

          s << i.pFileLabel ();
        }
      }

      void
      quote (::std::ostream& o,
             const ::prj::srl::qts::Quote& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::qts::quote (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      quote (::std::ostream& o,
             const ::prj::srl::qts::Quote& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::qts::quote (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      quote (::std::ostream& o,
             const ::prj::srl::qts::Quote& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::qts::quote (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      quote (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::qts::Quote& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::qts::quote (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      quote (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::qts::Quote& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::qts::quote (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      quote (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::qts::Quote& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::qts::quote (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      quote (::xercesc::DOMDocument& d,
             const ::prj::srl::qts::Quote& s,
             ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "quote" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/qts")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "quote",
            "http://www.cadseer.com/prj/srl/qts");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      quote (const ::prj::srl::qts::Quote& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "quote",
            "http://www.cadseer.com/prj/srl/qts",
            m, f));

        ::prj::srl::qts::quote (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

