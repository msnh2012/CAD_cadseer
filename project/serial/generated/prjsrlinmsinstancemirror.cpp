// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlinmsinstancemirror.h"

namespace prj
{
  namespace srl
  {
    namespace inms
    {
      // InstanceMirror
      // 

      const InstanceMirror::BaseType& InstanceMirror::
      base () const
      {
        return this->base_.get ();
      }

      InstanceMirror::BaseType& InstanceMirror::
      base ()
      {
        return this->base_.get ();
      }

      void InstanceMirror::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void InstanceMirror::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const InstanceMirror::SeerShapeType& InstanceMirror::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      InstanceMirror::SeerShapeType& InstanceMirror::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void InstanceMirror::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void InstanceMirror::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const InstanceMirror::InstanceMapsType& InstanceMirror::
      instanceMaps () const
      {
        return this->instanceMaps_.get ();
      }

      InstanceMirror::InstanceMapsType& InstanceMirror::
      instanceMaps ()
      {
        return this->instanceMaps_.get ();
      }

      void InstanceMirror::
      instanceMaps (const InstanceMapsType& x)
      {
        this->instanceMaps_.set (x);
      }

      void InstanceMirror::
      instanceMaps (::std::unique_ptr< InstanceMapsType > x)
      {
        this->instanceMaps_.set (std::move (x));
      }

      const InstanceMirror::CsysDraggerType& InstanceMirror::
      csysDragger () const
      {
        return this->csysDragger_.get ();
      }

      InstanceMirror::CsysDraggerType& InstanceMirror::
      csysDragger ()
      {
        return this->csysDragger_.get ();
      }

      void InstanceMirror::
      csysDragger (const CsysDraggerType& x)
      {
        this->csysDragger_.set (x);
      }

      void InstanceMirror::
      csysDragger (::std::unique_ptr< CsysDraggerType > x)
      {
        this->csysDragger_.set (std::move (x));
      }

      const InstanceMirror::CsysType& InstanceMirror::
      csys () const
      {
        return this->csys_.get ();
      }

      InstanceMirror::CsysType& InstanceMirror::
      csys ()
      {
        return this->csys_.get ();
      }

      void InstanceMirror::
      csys (const CsysType& x)
      {
        this->csys_.set (x);
      }

      void InstanceMirror::
      csys (::std::unique_ptr< CsysType > x)
      {
        this->csys_.set (std::move (x));
      }

      const InstanceMirror::IncludeSourceType& InstanceMirror::
      includeSource () const
      {
        return this->includeSource_.get ();
      }

      InstanceMirror::IncludeSourceType& InstanceMirror::
      includeSource ()
      {
        return this->includeSource_.get ();
      }

      void InstanceMirror::
      includeSource (const IncludeSourceType& x)
      {
        this->includeSource_.set (x);
      }

      void InstanceMirror::
      includeSource (::std::unique_ptr< IncludeSourceType > x)
      {
        this->includeSource_.set (std::move (x));
      }

      const InstanceMirror::ShapePickType& InstanceMirror::
      shapePick () const
      {
        return this->shapePick_.get ();
      }

      InstanceMirror::ShapePickType& InstanceMirror::
      shapePick ()
      {
        return this->shapePick_.get ();
      }

      void InstanceMirror::
      shapePick (const ShapePickType& x)
      {
        this->shapePick_.set (x);
      }

      void InstanceMirror::
      shapePick (::std::unique_ptr< ShapePickType > x)
      {
        this->shapePick_.set (std::move (x));
      }

      const InstanceMirror::PlanePickType& InstanceMirror::
      planePick () const
      {
        return this->planePick_.get ();
      }

      InstanceMirror::PlanePickType& InstanceMirror::
      planePick ()
      {
        return this->planePick_.get ();
      }

      void InstanceMirror::
      planePick (const PlanePickType& x)
      {
        this->planePick_.set (x);
      }

      void InstanceMirror::
      planePick (::std::unique_ptr< PlanePickType > x)
      {
        this->planePick_.set (std::move (x));
      }

      const InstanceMirror::IncludeSourceLabelType& InstanceMirror::
      includeSourceLabel () const
      {
        return this->includeSourceLabel_.get ();
      }

      InstanceMirror::IncludeSourceLabelType& InstanceMirror::
      includeSourceLabel ()
      {
        return this->includeSourceLabel_.get ();
      }

      void InstanceMirror::
      includeSourceLabel (const IncludeSourceLabelType& x)
      {
        this->includeSourceLabel_.set (x);
      }

      void InstanceMirror::
      includeSourceLabel (::std::unique_ptr< IncludeSourceLabelType > x)
      {
        this->includeSourceLabel_.set (std::move (x));
      }

      const InstanceMirror::DraggerVisibleType& InstanceMirror::
      draggerVisible () const
      {
        return this->draggerVisible_.get ();
      }

      InstanceMirror::DraggerVisibleType& InstanceMirror::
      draggerVisible ()
      {
        return this->draggerVisible_.get ();
      }

      void InstanceMirror::
      draggerVisible (const DraggerVisibleType& x)
      {
        this->draggerVisible_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace inms
    {
      // InstanceMirror
      //

      InstanceMirror::
      InstanceMirror (const BaseType& base,
                      const SeerShapeType& seerShape,
                      const InstanceMapsType& instanceMaps,
                      const CsysDraggerType& csysDragger,
                      const CsysType& csys,
                      const IncludeSourceType& includeSource,
                      const ShapePickType& shapePick,
                      const PlanePickType& planePick,
                      const IncludeSourceLabelType& includeSourceLabel,
                      const DraggerVisibleType& draggerVisible)
      : ::xml_schema::Type (),
        base_ (base, this),
        seerShape_ (seerShape, this),
        instanceMaps_ (instanceMaps, this),
        csysDragger_ (csysDragger, this),
        csys_ (csys, this),
        includeSource_ (includeSource, this),
        shapePick_ (shapePick, this),
        planePick_ (planePick, this),
        includeSourceLabel_ (includeSourceLabel, this),
        draggerVisible_ (draggerVisible, this)
      {
      }

      InstanceMirror::
      InstanceMirror (::std::unique_ptr< BaseType > base,
                      ::std::unique_ptr< SeerShapeType > seerShape,
                      ::std::unique_ptr< InstanceMapsType > instanceMaps,
                      ::std::unique_ptr< CsysDraggerType > csysDragger,
                      ::std::unique_ptr< CsysType > csys,
                      ::std::unique_ptr< IncludeSourceType > includeSource,
                      ::std::unique_ptr< ShapePickType > shapePick,
                      ::std::unique_ptr< PlanePickType > planePick,
                      ::std::unique_ptr< IncludeSourceLabelType > includeSourceLabel,
                      const DraggerVisibleType& draggerVisible)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        seerShape_ (std::move (seerShape), this),
        instanceMaps_ (std::move (instanceMaps), this),
        csysDragger_ (std::move (csysDragger), this),
        csys_ (std::move (csys), this),
        includeSource_ (std::move (includeSource), this),
        shapePick_ (std::move (shapePick), this),
        planePick_ (std::move (planePick), this),
        includeSourceLabel_ (std::move (includeSourceLabel), this),
        draggerVisible_ (draggerVisible, this)
      {
      }

      InstanceMirror::
      InstanceMirror (const InstanceMirror& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        seerShape_ (x.seerShape_, f, this),
        instanceMaps_ (x.instanceMaps_, f, this),
        csysDragger_ (x.csysDragger_, f, this),
        csys_ (x.csys_, f, this),
        includeSource_ (x.includeSource_, f, this),
        shapePick_ (x.shapePick_, f, this),
        planePick_ (x.planePick_, f, this),
        includeSourceLabel_ (x.includeSourceLabel_, f, this),
        draggerVisible_ (x.draggerVisible_, f, this)
      {
      }

      InstanceMirror::
      InstanceMirror (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        seerShape_ (this),
        instanceMaps_ (this),
        csysDragger_ (this),
        csys_ (this),
        includeSource_ (this),
        shapePick_ (this),
        planePick_ (this),
        includeSourceLabel_ (this),
        draggerVisible_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void InstanceMirror::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // instanceMaps
          //
          if (n.name () == "instanceMaps" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< InstanceMapsType > r (
              InstanceMapsTraits::create (i, f, this));

            if (!instanceMaps_.present ())
            {
              this->instanceMaps_.set (::std::move (r));
              continue;
            }
          }

          // csysDragger
          //
          if (n.name () == "csysDragger" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysDraggerType > r (
              CsysDraggerTraits::create (i, f, this));

            if (!csysDragger_.present ())
            {
              this->csysDragger_.set (::std::move (r));
              continue;
            }
          }

          // csys
          //
          if (n.name () == "csys" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysType > r (
              CsysTraits::create (i, f, this));

            if (!csys_.present ())
            {
              this->csys_.set (::std::move (r));
              continue;
            }
          }

          // includeSource
          //
          if (n.name () == "includeSource" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IncludeSourceType > r (
              IncludeSourceTraits::create (i, f, this));

            if (!includeSource_.present ())
            {
              this->includeSource_.set (::std::move (r));
              continue;
            }
          }

          // shapePick
          //
          if (n.name () == "shapePick" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ShapePickType > r (
              ShapePickTraits::create (i, f, this));

            if (!shapePick_.present ())
            {
              this->shapePick_.set (::std::move (r));
              continue;
            }
          }

          // planePick
          //
          if (n.name () == "planePick" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PlanePickType > r (
              PlanePickTraits::create (i, f, this));

            if (!planePick_.present ())
            {
              this->planePick_.set (::std::move (r));
              continue;
            }
          }

          // includeSourceLabel
          //
          if (n.name () == "includeSourceLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IncludeSourceLabelType > r (
              IncludeSourceLabelTraits::create (i, f, this));

            if (!includeSourceLabel_.present ())
            {
              this->includeSourceLabel_.set (::std::move (r));
              continue;
            }
          }

          // draggerVisible
          //
          if (n.name () == "draggerVisible" && n.namespace_ ().empty ())
          {
            if (!draggerVisible_.present ())
            {
              this->draggerVisible_.set (DraggerVisibleTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!instanceMaps_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "instanceMaps",
            "");
        }

        if (!csysDragger_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysDragger",
            "");
        }

        if (!csys_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csys",
            "");
        }

        if (!includeSource_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "includeSource",
            "");
        }

        if (!shapePick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "shapePick",
            "");
        }

        if (!planePick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "planePick",
            "");
        }

        if (!includeSourceLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "includeSourceLabel",
            "");
        }

        if (!draggerVisible_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "draggerVisible",
            "");
        }
      }

      InstanceMirror* InstanceMirror::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class InstanceMirror (*this, f, c);
      }

      InstanceMirror& InstanceMirror::
      operator= (const InstanceMirror& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->seerShape_ = x.seerShape_;
          this->instanceMaps_ = x.instanceMaps_;
          this->csysDragger_ = x.csysDragger_;
          this->csys_ = x.csys_;
          this->includeSource_ = x.includeSource_;
          this->shapePick_ = x.shapePick_;
          this->planePick_ = x.planePick_;
          this->includeSourceLabel_ = x.includeSourceLabel_;
          this->draggerVisible_ = x.draggerVisible_;
        }

        return *this;
      }

      InstanceMirror::
      ~InstanceMirror ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace inms
    {
      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (const ::std::string& u,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > (
          ::prj::srl::inms::instanceMirror (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (const ::std::string& u,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > (
          ::prj::srl::inms::instanceMirror (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > (
          ::prj::srl::inms::instanceMirror (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::std::istream& is,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inms::instanceMirror (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::std::istream& is,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inms::instanceMirror (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inms::instanceMirror (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inms::instanceMirror (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inms::instanceMirror (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inms::instanceMirror (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::xercesc::InputSource& i,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > (
          ::prj::srl::inms::instanceMirror (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::xercesc::InputSource& i,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > (
          ::prj::srl::inms::instanceMirror (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > (
          ::prj::srl::inms::instanceMirror (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > (
            ::prj::srl::inms::instanceMirror (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "instanceMirror" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inms")
        {
          ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > r (
            ::xsd::cxx::tree::traits< ::prj::srl::inms::InstanceMirror, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "instanceMirror",
          "http://www.cadseer.com/prj/srl/inms");
      }

      ::std::unique_ptr< ::prj::srl::inms::InstanceMirror >
      instanceMirror (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "instanceMirror" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inms")
        {
          ::std::unique_ptr< ::prj::srl::inms::InstanceMirror > r (
            ::xsd::cxx::tree::traits< ::prj::srl::inms::InstanceMirror, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "instanceMirror",
          "http://www.cadseer.com/prj/srl/inms");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace inms
    {
      void
      operator<< (::xercesc::DOMElement& e, const InstanceMirror& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // instanceMaps
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "instanceMaps",
              e));

          s << i.instanceMaps ();
        }

        // csysDragger
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysDragger",
              e));

          s << i.csysDragger ();
        }

        // csys
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csys",
              e));

          s << i.csys ();
        }

        // includeSource
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "includeSource",
              e));

          s << i.includeSource ();
        }

        // shapePick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "shapePick",
              e));

          s << i.shapePick ();
        }

        // planePick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "planePick",
              e));

          s << i.planePick ();
        }

        // includeSourceLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "includeSourceLabel",
              e));

          s << i.includeSourceLabel ();
        }

        // draggerVisible
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "draggerVisible",
              e));

          s << i.draggerVisible ();
        }
      }

      void
      instanceMirror (::std::ostream& o,
                      const ::prj::srl::inms::InstanceMirror& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inms::instanceMirror (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      instanceMirror (::std::ostream& o,
                      const ::prj::srl::inms::InstanceMirror& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inms::instanceMirror (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instanceMirror (::std::ostream& o,
                      const ::prj::srl::inms::InstanceMirror& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inms::instanceMirror (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instanceMirror (::xercesc::XMLFormatTarget& t,
                      const ::prj::srl::inms::InstanceMirror& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inms::instanceMirror (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      instanceMirror (::xercesc::XMLFormatTarget& t,
                      const ::prj::srl::inms::InstanceMirror& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inms::instanceMirror (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instanceMirror (::xercesc::XMLFormatTarget& t,
                      const ::prj::srl::inms::InstanceMirror& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inms::instanceMirror (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instanceMirror (::xercesc::DOMDocument& d,
                      const ::prj::srl::inms::InstanceMirror& s,
                      ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "instanceMirror" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inms")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "instanceMirror",
            "http://www.cadseer.com/prj/srl/inms");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      instanceMirror (const ::prj::srl::inms::InstanceMirror& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "instanceMirror",
            "http://www.cadseer.com/prj/srl/inms",
            m, f));

        ::prj::srl::inms::instanceMirror (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

