// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrldtpsdatumplane.h"

namespace prj
{
  namespace srl
  {
    namespace dtps
    {
      // DatumPlane
      // 

      const DatumPlane::BaseType& DatumPlane::
      base () const
      {
        return this->base_.get ();
      }

      DatumPlane::BaseType& DatumPlane::
      base ()
      {
        return this->base_.get ();
      }

      void DatumPlane::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void DatumPlane::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const DatumPlane::DpTypeType& DatumPlane::
      dpType () const
      {
        return this->dpType_.get ();
      }

      DatumPlane::DpTypeType& DatumPlane::
      dpType ()
      {
        return this->dpType_.get ();
      }

      void DatumPlane::
      dpType (const DpTypeType& x)
      {
        this->dpType_.set (x);
      }

      void DatumPlane::
      dpType (::std::unique_ptr< DpTypeType > x)
      {
        this->dpType_.set (std::move (x));
      }

      const DatumPlane::CsysType& DatumPlane::
      csys () const
      {
        return this->csys_.get ();
      }

      DatumPlane::CsysType& DatumPlane::
      csys ()
      {
        return this->csys_.get ();
      }

      void DatumPlane::
      csys (const CsysType& x)
      {
        this->csys_.set (x);
      }

      void DatumPlane::
      csys (::std::unique_ptr< CsysType > x)
      {
        this->csys_.set (std::move (x));
      }

      const DatumPlane::FlipType& DatumPlane::
      flip () const
      {
        return this->flip_.get ();
      }

      DatumPlane::FlipType& DatumPlane::
      flip ()
      {
        return this->flip_.get ();
      }

      void DatumPlane::
      flip (const FlipType& x)
      {
        this->flip_.set (x);
      }

      void DatumPlane::
      flip (::std::unique_ptr< FlipType > x)
      {
        this->flip_.set (std::move (x));
      }

      const DatumPlane::AutoSizeType& DatumPlane::
      autoSize () const
      {
        return this->autoSize_.get ();
      }

      DatumPlane::AutoSizeType& DatumPlane::
      autoSize ()
      {
        return this->autoSize_.get ();
      }

      void DatumPlane::
      autoSize (const AutoSizeType& x)
      {
        this->autoSize_.set (x);
      }

      void DatumPlane::
      autoSize (::std::unique_ptr< AutoSizeType > x)
      {
        this->autoSize_.set (std::move (x));
      }

      const DatumPlane::SizeType& DatumPlane::
      size () const
      {
        return this->size_.get ();
      }

      DatumPlane::SizeType& DatumPlane::
      size ()
      {
        return this->size_.get ();
      }

      void DatumPlane::
      size (const SizeType& x)
      {
        this->size_.set (x);
      }

      void DatumPlane::
      size (::std::unique_ptr< SizeType > x)
      {
        this->size_.set (std::move (x));
      }

      const DatumPlane::OffsetType& DatumPlane::
      offset () const
      {
        return this->offset_.get ();
      }

      DatumPlane::OffsetType& DatumPlane::
      offset ()
      {
        return this->offset_.get ();
      }

      void DatumPlane::
      offset (const OffsetType& x)
      {
        this->offset_.set (x);
      }

      void DatumPlane::
      offset (::std::unique_ptr< OffsetType > x)
      {
        this->offset_.set (std::move (x));
      }

      const DatumPlane::AngleType& DatumPlane::
      angle () const
      {
        return this->angle_.get ();
      }

      DatumPlane::AngleType& DatumPlane::
      angle ()
      {
        return this->angle_.get ();
      }

      void DatumPlane::
      angle (const AngleType& x)
      {
        this->angle_.set (x);
      }

      void DatumPlane::
      angle (::std::unique_ptr< AngleType > x)
      {
        this->angle_.set (std::move (x));
      }

      const DatumPlane::PicksType& DatumPlane::
      picks () const
      {
        return this->picks_.get ();
      }

      DatumPlane::PicksType& DatumPlane::
      picks ()
      {
        return this->picks_.get ();
      }

      void DatumPlane::
      picks (const PicksType& x)
      {
        this->picks_.set (x);
      }

      void DatumPlane::
      picks (::std::unique_ptr< PicksType > x)
      {
        this->picks_.set (std::move (x));
      }

      const DatumPlane::CsysDraggerType& DatumPlane::
      csysDragger () const
      {
        return this->csysDragger_.get ();
      }

      DatumPlane::CsysDraggerType& DatumPlane::
      csysDragger ()
      {
        return this->csysDragger_.get ();
      }

      void DatumPlane::
      csysDragger (const CsysDraggerType& x)
      {
        this->csysDragger_.set (x);
      }

      void DatumPlane::
      csysDragger (::std::unique_ptr< CsysDraggerType > x)
      {
        this->csysDragger_.set (std::move (x));
      }

      const DatumPlane::FlipLabelType& DatumPlane::
      flipLabel () const
      {
        return this->flipLabel_.get ();
      }

      DatumPlane::FlipLabelType& DatumPlane::
      flipLabel ()
      {
        return this->flipLabel_.get ();
      }

      void DatumPlane::
      flipLabel (const FlipLabelType& x)
      {
        this->flipLabel_.set (x);
      }

      void DatumPlane::
      flipLabel (::std::unique_ptr< FlipLabelType > x)
      {
        this->flipLabel_.set (std::move (x));
      }

      const DatumPlane::AutoSizeLabelType& DatumPlane::
      autoSizeLabel () const
      {
        return this->autoSizeLabel_.get ();
      }

      DatumPlane::AutoSizeLabelType& DatumPlane::
      autoSizeLabel ()
      {
        return this->autoSizeLabel_.get ();
      }

      void DatumPlane::
      autoSizeLabel (const AutoSizeLabelType& x)
      {
        this->autoSizeLabel_.set (x);
      }

      void DatumPlane::
      autoSizeLabel (::std::unique_ptr< AutoSizeLabelType > x)
      {
        this->autoSizeLabel_.set (std::move (x));
      }

      const DatumPlane::AngleLabelType& DatumPlane::
      angleLabel () const
      {
        return this->angleLabel_.get ();
      }

      DatumPlane::AngleLabelType& DatumPlane::
      angleLabel ()
      {
        return this->angleLabel_.get ();
      }

      void DatumPlane::
      angleLabel (const AngleLabelType& x)
      {
        this->angleLabel_.set (x);
      }

      void DatumPlane::
      angleLabel (::std::unique_ptr< AngleLabelType > x)
      {
        this->angleLabel_.set (std::move (x));
      }

      const DatumPlane::SizeIPType& DatumPlane::
      sizeIP () const
      {
        return this->sizeIP_.get ();
      }

      DatumPlane::SizeIPType& DatumPlane::
      sizeIP ()
      {
        return this->sizeIP_.get ();
      }

      void DatumPlane::
      sizeIP (const SizeIPType& x)
      {
        this->sizeIP_.set (x);
      }

      void DatumPlane::
      sizeIP (::std::unique_ptr< SizeIPType > x)
      {
        this->sizeIP_.set (std::move (x));
      }

      const DatumPlane::OffsetIPType& DatumPlane::
      offsetIP () const
      {
        return this->offsetIP_.get ();
      }

      DatumPlane::OffsetIPType& DatumPlane::
      offsetIP ()
      {
        return this->offsetIP_.get ();
      }

      void DatumPlane::
      offsetIP (const OffsetIPType& x)
      {
        this->offsetIP_.set (x);
      }

      void DatumPlane::
      offsetIP (::std::unique_ptr< OffsetIPType > x)
      {
        this->offsetIP_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace dtps
    {
      // DatumPlane
      //

      DatumPlane::
      DatumPlane (const BaseType& base,
                  const DpTypeType& dpType,
                  const CsysType& csys,
                  const FlipType& flip,
                  const AutoSizeType& autoSize,
                  const SizeType& size,
                  const OffsetType& offset,
                  const AngleType& angle,
                  const PicksType& picks,
                  const CsysDraggerType& csysDragger,
                  const FlipLabelType& flipLabel,
                  const AutoSizeLabelType& autoSizeLabel,
                  const AngleLabelType& angleLabel,
                  const SizeIPType& sizeIP,
                  const OffsetIPType& offsetIP)
      : ::xml_schema::Type (),
        base_ (base, this),
        dpType_ (dpType, this),
        csys_ (csys, this),
        flip_ (flip, this),
        autoSize_ (autoSize, this),
        size_ (size, this),
        offset_ (offset, this),
        angle_ (angle, this),
        picks_ (picks, this),
        csysDragger_ (csysDragger, this),
        flipLabel_ (flipLabel, this),
        autoSizeLabel_ (autoSizeLabel, this),
        angleLabel_ (angleLabel, this),
        sizeIP_ (sizeIP, this),
        offsetIP_ (offsetIP, this)
      {
      }

      DatumPlane::
      DatumPlane (::std::unique_ptr< BaseType > base,
                  ::std::unique_ptr< DpTypeType > dpType,
                  ::std::unique_ptr< CsysType > csys,
                  ::std::unique_ptr< FlipType > flip,
                  ::std::unique_ptr< AutoSizeType > autoSize,
                  ::std::unique_ptr< SizeType > size,
                  ::std::unique_ptr< OffsetType > offset,
                  ::std::unique_ptr< AngleType > angle,
                  ::std::unique_ptr< PicksType > picks,
                  ::std::unique_ptr< CsysDraggerType > csysDragger,
                  ::std::unique_ptr< FlipLabelType > flipLabel,
                  ::std::unique_ptr< AutoSizeLabelType > autoSizeLabel,
                  ::std::unique_ptr< AngleLabelType > angleLabel,
                  ::std::unique_ptr< SizeIPType > sizeIP,
                  ::std::unique_ptr< OffsetIPType > offsetIP)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        dpType_ (std::move (dpType), this),
        csys_ (std::move (csys), this),
        flip_ (std::move (flip), this),
        autoSize_ (std::move (autoSize), this),
        size_ (std::move (size), this),
        offset_ (std::move (offset), this),
        angle_ (std::move (angle), this),
        picks_ (std::move (picks), this),
        csysDragger_ (std::move (csysDragger), this),
        flipLabel_ (std::move (flipLabel), this),
        autoSizeLabel_ (std::move (autoSizeLabel), this),
        angleLabel_ (std::move (angleLabel), this),
        sizeIP_ (std::move (sizeIP), this),
        offsetIP_ (std::move (offsetIP), this)
      {
      }

      DatumPlane::
      DatumPlane (const DatumPlane& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        dpType_ (x.dpType_, f, this),
        csys_ (x.csys_, f, this),
        flip_ (x.flip_, f, this),
        autoSize_ (x.autoSize_, f, this),
        size_ (x.size_, f, this),
        offset_ (x.offset_, f, this),
        angle_ (x.angle_, f, this),
        picks_ (x.picks_, f, this),
        csysDragger_ (x.csysDragger_, f, this),
        flipLabel_ (x.flipLabel_, f, this),
        autoSizeLabel_ (x.autoSizeLabel_, f, this),
        angleLabel_ (x.angleLabel_, f, this),
        sizeIP_ (x.sizeIP_, f, this),
        offsetIP_ (x.offsetIP_, f, this)
      {
      }

      DatumPlane::
      DatumPlane (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        dpType_ (this),
        csys_ (this),
        flip_ (this),
        autoSize_ (this),
        size_ (this),
        offset_ (this),
        angle_ (this),
        picks_ (this),
        csysDragger_ (this),
        flipLabel_ (this),
        autoSizeLabel_ (this),
        angleLabel_ (this),
        sizeIP_ (this),
        offsetIP_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void DatumPlane::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // dpType
          //
          if (n.name () == "dpType" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DpTypeType > r (
              DpTypeTraits::create (i, f, this));

            if (!dpType_.present ())
            {
              this->dpType_.set (::std::move (r));
              continue;
            }
          }

          // csys
          //
          if (n.name () == "csys" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysType > r (
              CsysTraits::create (i, f, this));

            if (!csys_.present ())
            {
              this->csys_.set (::std::move (r));
              continue;
            }
          }

          // flip
          //
          if (n.name () == "flip" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FlipType > r (
              FlipTraits::create (i, f, this));

            if (!flip_.present ())
            {
              this->flip_.set (::std::move (r));
              continue;
            }
          }

          // autoSize
          //
          if (n.name () == "autoSize" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AutoSizeType > r (
              AutoSizeTraits::create (i, f, this));

            if (!autoSize_.present ())
            {
              this->autoSize_.set (::std::move (r));
              continue;
            }
          }

          // size
          //
          if (n.name () == "size" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SizeType > r (
              SizeTraits::create (i, f, this));

            if (!size_.present ())
            {
              this->size_.set (::std::move (r));
              continue;
            }
          }

          // offset
          //
          if (n.name () == "offset" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< OffsetType > r (
              OffsetTraits::create (i, f, this));

            if (!offset_.present ())
            {
              this->offset_.set (::std::move (r));
              continue;
            }
          }

          // angle
          //
          if (n.name () == "angle" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AngleType > r (
              AngleTraits::create (i, f, this));

            if (!angle_.present ())
            {
              this->angle_.set (::std::move (r));
              continue;
            }
          }

          // picks
          //
          if (n.name () == "picks" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PicksType > r (
              PicksTraits::create (i, f, this));

            if (!picks_.present ())
            {
              this->picks_.set (::std::move (r));
              continue;
            }
          }

          // csysDragger
          //
          if (n.name () == "csysDragger" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysDraggerType > r (
              CsysDraggerTraits::create (i, f, this));

            if (!csysDragger_.present ())
            {
              this->csysDragger_.set (::std::move (r));
              continue;
            }
          }

          // flipLabel
          //
          if (n.name () == "flipLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FlipLabelType > r (
              FlipLabelTraits::create (i, f, this));

            if (!flipLabel_.present ())
            {
              this->flipLabel_.set (::std::move (r));
              continue;
            }
          }

          // autoSizeLabel
          //
          if (n.name () == "autoSizeLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AutoSizeLabelType > r (
              AutoSizeLabelTraits::create (i, f, this));

            if (!autoSizeLabel_.present ())
            {
              this->autoSizeLabel_.set (::std::move (r));
              continue;
            }
          }

          // angleLabel
          //
          if (n.name () == "angleLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AngleLabelType > r (
              AngleLabelTraits::create (i, f, this));

            if (!angleLabel_.present ())
            {
              this->angleLabel_.set (::std::move (r));
              continue;
            }
          }

          // sizeIP
          //
          if (n.name () == "sizeIP" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SizeIPType > r (
              SizeIPTraits::create (i, f, this));

            if (!sizeIP_.present ())
            {
              this->sizeIP_.set (::std::move (r));
              continue;
            }
          }

          // offsetIP
          //
          if (n.name () == "offsetIP" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< OffsetIPType > r (
              OffsetIPTraits::create (i, f, this));

            if (!offsetIP_.present ())
            {
              this->offsetIP_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!dpType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "dpType",
            "");
        }

        if (!csys_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csys",
            "");
        }

        if (!flip_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "flip",
            "");
        }

        if (!autoSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "autoSize",
            "");
        }

        if (!size_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "size",
            "");
        }

        if (!offset_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "offset",
            "");
        }

        if (!angle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "angle",
            "");
        }

        if (!picks_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "picks",
            "");
        }

        if (!csysDragger_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysDragger",
            "");
        }

        if (!flipLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "flipLabel",
            "");
        }

        if (!autoSizeLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "autoSizeLabel",
            "");
        }

        if (!angleLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "angleLabel",
            "");
        }

        if (!sizeIP_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sizeIP",
            "");
        }

        if (!offsetIP_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "offsetIP",
            "");
        }
      }

      DatumPlane* DatumPlane::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class DatumPlane (*this, f, c);
      }

      DatumPlane& DatumPlane::
      operator= (const DatumPlane& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->dpType_ = x.dpType_;
          this->csys_ = x.csys_;
          this->flip_ = x.flip_;
          this->autoSize_ = x.autoSize_;
          this->size_ = x.size_;
          this->offset_ = x.offset_;
          this->angle_ = x.angle_;
          this->picks_ = x.picks_;
          this->csysDragger_ = x.csysDragger_;
          this->flipLabel_ = x.flipLabel_;
          this->autoSizeLabel_ = x.autoSizeLabel_;
          this->angleLabel_ = x.angleLabel_;
          this->sizeIP_ = x.sizeIP_;
          this->offsetIP_ = x.offsetIP_;
        }

        return *this;
      }

      DatumPlane::
      ~DatumPlane ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace dtps
    {
      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > (
          ::prj::srl::dtps::datumPlane (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > (
          ::prj::srl::dtps::datumPlane (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > (
          ::prj::srl::dtps::datumPlane (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::dtps::datumPlane (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::dtps::datumPlane (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::dtps::datumPlane (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::dtps::datumPlane (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::dtps::datumPlane (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::dtps::datumPlane (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > (
          ::prj::srl::dtps::datumPlane (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > (
          ::prj::srl::dtps::datumPlane (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > (
          ::prj::srl::dtps::datumPlane (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > (
            ::prj::srl::dtps::datumPlane (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "datumPlane" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/dtps")
        {
          ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > r (
            ::xsd::cxx::tree::traits< ::prj::srl::dtps::DatumPlane, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "datumPlane",
          "http://www.cadseer.com/prj/srl/dtps");
      }

      ::std::unique_ptr< ::prj::srl::dtps::DatumPlane >
      datumPlane (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "datumPlane" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/dtps")
        {
          ::std::unique_ptr< ::prj::srl::dtps::DatumPlane > r (
            ::xsd::cxx::tree::traits< ::prj::srl::dtps::DatumPlane, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "datumPlane",
          "http://www.cadseer.com/prj/srl/dtps");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace dtps
    {
      void
      operator<< (::xercesc::DOMElement& e, const DatumPlane& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // dpType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "dpType",
              e));

          s << i.dpType ();
        }

        // csys
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csys",
              e));

          s << i.csys ();
        }

        // flip
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "flip",
              e));

          s << i.flip ();
        }

        // autoSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "autoSize",
              e));

          s << i.autoSize ();
        }

        // size
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "size",
              e));

          s << i.size ();
        }

        // offset
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "offset",
              e));

          s << i.offset ();
        }

        // angle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "angle",
              e));

          s << i.angle ();
        }

        // picks
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "picks",
              e));

          s << i.picks ();
        }

        // csysDragger
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysDragger",
              e));

          s << i.csysDragger ();
        }

        // flipLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "flipLabel",
              e));

          s << i.flipLabel ();
        }

        // autoSizeLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "autoSizeLabel",
              e));

          s << i.autoSizeLabel ();
        }

        // angleLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "angleLabel",
              e));

          s << i.angleLabel ();
        }

        // sizeIP
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sizeIP",
              e));

          s << i.sizeIP ();
        }

        // offsetIP
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "offsetIP",
              e));

          s << i.offsetIP ();
        }
      }

      void
      datumPlane (::std::ostream& o,
                  const ::prj::srl::dtps::DatumPlane& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtps::datumPlane (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      datumPlane (::std::ostream& o,
                  const ::prj::srl::dtps::DatumPlane& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtps::datumPlane (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      datumPlane (::std::ostream& o,
                  const ::prj::srl::dtps::DatumPlane& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtps::datumPlane (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      datumPlane (::xercesc::XMLFormatTarget& t,
                  const ::prj::srl::dtps::DatumPlane& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtps::datumPlane (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      datumPlane (::xercesc::XMLFormatTarget& t,
                  const ::prj::srl::dtps::DatumPlane& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtps::datumPlane (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      datumPlane (::xercesc::XMLFormatTarget& t,
                  const ::prj::srl::dtps::DatumPlane& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtps::datumPlane (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      datumPlane (::xercesc::DOMDocument& d,
                  const ::prj::srl::dtps::DatumPlane& s,
                  ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "datumPlane" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/dtps")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "datumPlane",
            "http://www.cadseer.com/prj/srl/dtps");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      datumPlane (const ::prj::srl::dtps::DatumPlane& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "datumPlane",
            "http://www.cadseer.com/prj/srl/dtps",
            m, f));

        ::prj::srl::dtps::datumPlane (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

