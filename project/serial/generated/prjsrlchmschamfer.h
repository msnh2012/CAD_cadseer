// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_CHMS_PRJSRLCHMSCHAMFER_H
#define PRJ_SRL_CHMS_PRJSRLCHMSCHAMFER_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace chms
    {
      class Entry;
      class Chamfer;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace chms
    {
      class Entry: public ::xml_schema::Type
      {
        public:
        // style
        //
        typedef ::prj::srl::spt::Parameter StyleType;
        typedef ::xsd::cxx::tree::traits< StyleType, char > StyleTraits;

        const StyleType&
        style () const;

        StyleType&
        style ();

        void
        style (const StyleType& x);

        void
        style (::std::unique_ptr< StyleType > p);

        // edgePicks
        //
        typedef ::prj::srl::spt::Parameter EdgePicksType;
        typedef ::xsd::cxx::tree::traits< EdgePicksType, char > EdgePicksTraits;

        const EdgePicksType&
        edgePicks () const;

        EdgePicksType&
        edgePicks ();

        void
        edgePicks (const EdgePicksType& x);

        void
        edgePicks (::std::unique_ptr< EdgePicksType > p);

        // facePicks
        //
        typedef ::prj::srl::spt::Parameter FacePicksType;
        typedef ::xsd::cxx::tree::traits< FacePicksType, char > FacePicksTraits;

        const FacePicksType&
        facePicks () const;

        FacePicksType&
        facePicks ();

        void
        facePicks (const FacePicksType& x);

        void
        facePicks (::std::unique_ptr< FacePicksType > p);

        // distance
        //
        typedef ::prj::srl::spt::Parameter DistanceType;
        typedef ::xsd::cxx::tree::traits< DistanceType, char > DistanceTraits;

        const DistanceType&
        distance () const;

        DistanceType&
        distance ();

        void
        distance (const DistanceType& x);

        void
        distance (::std::unique_ptr< DistanceType > p);

        // dist2Angle
        //
        typedef ::prj::srl::spt::Parameter Dist2AngleType;
        typedef ::xsd::cxx::tree::traits< Dist2AngleType, char > Dist2AngleTraits;

        const Dist2AngleType&
        dist2Angle () const;

        Dist2AngleType&
        dist2Angle ();

        void
        dist2Angle (const Dist2AngleType& x);

        void
        dist2Angle (::std::unique_ptr< Dist2AngleType > p);

        // styleLabel
        //
        typedef ::prj::srl::spt::PLabel StyleLabelType;
        typedef ::xsd::cxx::tree::traits< StyleLabelType, char > StyleLabelTraits;

        const StyleLabelType&
        styleLabel () const;

        StyleLabelType&
        styleLabel ();

        void
        styleLabel (const StyleLabelType& x);

        void
        styleLabel (::std::unique_ptr< StyleLabelType > p);

        // distanceLabel
        //
        typedef ::prj::srl::spt::PLabel DistanceLabelType;
        typedef ::xsd::cxx::tree::traits< DistanceLabelType, char > DistanceLabelTraits;

        const DistanceLabelType&
        distanceLabel () const;

        DistanceLabelType&
        distanceLabel ();

        void
        distanceLabel (const DistanceLabelType& x);

        void
        distanceLabel (::std::unique_ptr< DistanceLabelType > p);

        // dist2AngleLabel
        //
        typedef ::prj::srl::spt::PLabel Dist2AngleLabelType;
        typedef ::xsd::cxx::tree::traits< Dist2AngleLabelType, char > Dist2AngleLabelTraits;

        const Dist2AngleLabelType&
        dist2AngleLabel () const;

        Dist2AngleLabelType&
        dist2AngleLabel ();

        void
        dist2AngleLabel (const Dist2AngleLabelType& x);

        void
        dist2AngleLabel (::std::unique_ptr< Dist2AngleLabelType > p);

        // Constructors.
        //
        Entry (const StyleType&,
               const EdgePicksType&,
               const FacePicksType&,
               const DistanceType&,
               const Dist2AngleType&,
               const StyleLabelType&,
               const DistanceLabelType&,
               const Dist2AngleLabelType&);

        Entry (::std::unique_ptr< StyleType >,
               ::std::unique_ptr< EdgePicksType >,
               ::std::unique_ptr< FacePicksType >,
               ::std::unique_ptr< DistanceType >,
               ::std::unique_ptr< Dist2AngleType >,
               ::std::unique_ptr< StyleLabelType >,
               ::std::unique_ptr< DistanceLabelType >,
               ::std::unique_ptr< Dist2AngleLabelType >);

        Entry (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        Entry (const Entry& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        virtual Entry*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Entry&
        operator= (const Entry& x);

        virtual 
        ~Entry ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< StyleType > style_;
        ::xsd::cxx::tree::one< EdgePicksType > edgePicks_;
        ::xsd::cxx::tree::one< FacePicksType > facePicks_;
        ::xsd::cxx::tree::one< DistanceType > distance_;
        ::xsd::cxx::tree::one< Dist2AngleType > dist2Angle_;
        ::xsd::cxx::tree::one< StyleLabelType > styleLabel_;
        ::xsd::cxx::tree::one< DistanceLabelType > distanceLabel_;
        ::xsd::cxx::tree::one< Dist2AngleLabelType > dist2AngleLabel_;
      };

      class Chamfer: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // mode
        //
        typedef ::prj::srl::spt::Parameter ModeType;
        typedef ::xsd::cxx::tree::traits< ModeType, char > ModeTraits;

        const ModeType&
        mode () const;

        ModeType&
        mode ();

        void
        mode (const ModeType& x);

        void
        mode (::std::unique_ptr< ModeType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // modeLabel
        //
        typedef ::prj::srl::spt::PLabel ModeLabelType;
        typedef ::xsd::cxx::tree::traits< ModeLabelType, char > ModeLabelTraits;

        const ModeLabelType&
        modeLabel () const;

        ModeLabelType&
        modeLabel ();

        void
        modeLabel (const ModeLabelType& x);

        void
        modeLabel (::std::unique_ptr< ModeLabelType > p);

        // shapeMap
        //
        typedef ::prj::srl::spt::EvolveRecord ShapeMapType;
        typedef ::xsd::cxx::tree::sequence< ShapeMapType > ShapeMapSequence;
        typedef ShapeMapSequence::iterator ShapeMapIterator;
        typedef ShapeMapSequence::const_iterator ShapeMapConstIterator;
        typedef ::xsd::cxx::tree::traits< ShapeMapType, char > ShapeMapTraits;

        const ShapeMapSequence&
        shapeMap () const;

        ShapeMapSequence&
        shapeMap ();

        void
        shapeMap (const ShapeMapSequence& s);

        // entries
        //
        typedef ::prj::srl::chms::Entry EntriesType;
        typedef ::xsd::cxx::tree::sequence< EntriesType > EntriesSequence;
        typedef EntriesSequence::iterator EntriesIterator;
        typedef EntriesSequence::const_iterator EntriesConstIterator;
        typedef ::xsd::cxx::tree::traits< EntriesType, char > EntriesTraits;

        const EntriesSequence&
        entries () const;

        EntriesSequence&
        entries ();

        void
        entries (const EntriesSequence& s);

        // Constructors.
        //
        Chamfer (const BaseType&,
                 const ModeType&,
                 const SeerShapeType&,
                 const ModeLabelType&);

        Chamfer (::std::unique_ptr< BaseType >,
                 ::std::unique_ptr< ModeType >,
                 ::std::unique_ptr< SeerShapeType >,
                 ::std::unique_ptr< ModeLabelType >);

        Chamfer (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        Chamfer (const Chamfer& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        virtual Chamfer*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Chamfer&
        operator= (const Chamfer& x);

        virtual 
        ~Chamfer ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< ModeType > mode_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< ModeLabelType > modeLabel_;
        ShapeMapSequence shapeMap_;
        EntriesSequence entries_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace chms
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::chms::Chamfer >
      chamfer (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace chms
    {
      void
      operator<< (::xercesc::DOMElement&, const Entry&);

      void
      operator<< (::xercesc::DOMElement&, const Chamfer&);

      // Serialize to std::ostream.
      //

      void
      chamfer (::std::ostream& os,
               const ::prj::srl::chms::Chamfer& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      chamfer (::std::ostream& os,
               const ::prj::srl::chms::Chamfer& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      chamfer (::std::ostream& os,
               const ::prj::srl::chms::Chamfer& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      chamfer (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::chms::Chamfer& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      chamfer (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::chms::Chamfer& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      chamfer (::xercesc::XMLFormatTarget& ft,
               const ::prj::srl::chms::Chamfer& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      chamfer (::xercesc::DOMDocument& d,
               const ::prj::srl::chms::Chamfer& x,
               ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      chamfer (const ::prj::srl::chms::Chamfer& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_CHMS_PRJSRLCHMSCHAMFER_H
