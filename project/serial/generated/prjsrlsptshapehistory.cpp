// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlsptshapehistory.h"

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      // HistoryVertex
      // 

      const HistoryVertex::FeatureIdType& HistoryVertex::
      featureId () const
      {
        return this->featureId_.get ();
      }

      HistoryVertex::FeatureIdType& HistoryVertex::
      featureId ()
      {
        return this->featureId_.get ();
      }

      void HistoryVertex::
      featureId (const FeatureIdType& x)
      {
        this->featureId_.set (x);
      }

      void HistoryVertex::
      featureId (::std::unique_ptr< FeatureIdType > x)
      {
        this->featureId_.set (std::move (x));
      }

      const HistoryVertex::FeatureIdType& HistoryVertex::
      featureId_default_value ()
      {
        return featureId_default_value_;
      }

      const HistoryVertex::ShapeIdType& HistoryVertex::
      shapeId () const
      {
        return this->shapeId_.get ();
      }

      HistoryVertex::ShapeIdType& HistoryVertex::
      shapeId ()
      {
        return this->shapeId_.get ();
      }

      void HistoryVertex::
      shapeId (const ShapeIdType& x)
      {
        this->shapeId_.set (x);
      }

      void HistoryVertex::
      shapeId (::std::unique_ptr< ShapeIdType > x)
      {
        this->shapeId_.set (std::move (x));
      }

      const HistoryVertex::ShapeIdType& HistoryVertex::
      shapeId_default_value ()
      {
        return shapeId_default_value_;
      }


      // HistoryEdge
      // 

      const HistoryEdge::SourceShapeIdType& HistoryEdge::
      sourceShapeId () const
      {
        return this->sourceShapeId_.get ();
      }

      HistoryEdge::SourceShapeIdType& HistoryEdge::
      sourceShapeId ()
      {
        return this->sourceShapeId_.get ();
      }

      void HistoryEdge::
      sourceShapeId (const SourceShapeIdType& x)
      {
        this->sourceShapeId_.set (x);
      }

      void HistoryEdge::
      sourceShapeId (::std::unique_ptr< SourceShapeIdType > x)
      {
        this->sourceShapeId_.set (std::move (x));
      }

      const HistoryEdge::SourceShapeIdType& HistoryEdge::
      sourceShapeId_default_value ()
      {
        return sourceShapeId_default_value_;
      }

      const HistoryEdge::TargetShapeIdType& HistoryEdge::
      targetShapeId () const
      {
        return this->targetShapeId_.get ();
      }

      HistoryEdge::TargetShapeIdType& HistoryEdge::
      targetShapeId ()
      {
        return this->targetShapeId_.get ();
      }

      void HistoryEdge::
      targetShapeId (const TargetShapeIdType& x)
      {
        this->targetShapeId_.set (x);
      }

      void HistoryEdge::
      targetShapeId (::std::unique_ptr< TargetShapeIdType > x)
      {
        this->targetShapeId_.set (std::move (x));
      }

      const HistoryEdge::TargetShapeIdType& HistoryEdge::
      targetShapeId_default_value ()
      {
        return targetShapeId_default_value_;
      }


      // ShapeHistory
      // 

      const ShapeHistory::VerticesSequence& ShapeHistory::
      vertices () const
      {
        return this->vertices_;
      }

      ShapeHistory::VerticesSequence& ShapeHistory::
      vertices ()
      {
        return this->vertices_;
      }

      void ShapeHistory::
      vertices (const VerticesSequence& s)
      {
        this->vertices_ = s;
      }

      const ShapeHistory::EdgesSequence& ShapeHistory::
      edges () const
      {
        return this->edges_;
      }

      ShapeHistory::EdgesSequence& ShapeHistory::
      edges ()
      {
        return this->edges_;
      }

      void ShapeHistory::
      edges (const EdgesSequence& s)
      {
        this->edges_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      // HistoryVertex
      //

      const HistoryVertex::FeatureIdType HistoryVertex::featureId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      const HistoryVertex::ShapeIdType HistoryVertex::shapeId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      HistoryVertex::
      HistoryVertex (const FeatureIdType& featureId,
                     const ShapeIdType& shapeId)
      : ::xml_schema::Type (),
        featureId_ (featureId, this),
        shapeId_ (shapeId, this)
      {
      }

      HistoryVertex::
      HistoryVertex (const HistoryVertex& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        featureId_ (x.featureId_, f, this),
        shapeId_ (x.shapeId_, f, this)
      {
      }

      HistoryVertex::
      HistoryVertex (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        featureId_ (this),
        shapeId_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void HistoryVertex::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // featureId
          //
          if (n.name () == "featureId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FeatureIdType > r (
              FeatureIdTraits::create (i, f, this));

            if (!featureId_.present ())
            {
              this->featureId_.set (::std::move (r));
              continue;
            }
          }

          // shapeId
          //
          if (n.name () == "shapeId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ShapeIdType > r (
              ShapeIdTraits::create (i, f, this));

            if (!shapeId_.present ())
            {
              this->shapeId_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!featureId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "featureId",
            "");
        }

        if (!shapeId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "shapeId",
            "");
        }
      }

      HistoryVertex* HistoryVertex::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class HistoryVertex (*this, f, c);
      }

      HistoryVertex& HistoryVertex::
      operator= (const HistoryVertex& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->featureId_ = x.featureId_;
          this->shapeId_ = x.shapeId_;
        }

        return *this;
      }

      HistoryVertex::
      ~HistoryVertex ()
      {
      }

      // HistoryEdge
      //

      const HistoryEdge::SourceShapeIdType HistoryEdge::sourceShapeId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      const HistoryEdge::TargetShapeIdType HistoryEdge::targetShapeId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      HistoryEdge::
      HistoryEdge (const SourceShapeIdType& sourceShapeId,
                   const TargetShapeIdType& targetShapeId)
      : ::xml_schema::Type (),
        sourceShapeId_ (sourceShapeId, this),
        targetShapeId_ (targetShapeId, this)
      {
      }

      HistoryEdge::
      HistoryEdge (const HistoryEdge& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        sourceShapeId_ (x.sourceShapeId_, f, this),
        targetShapeId_ (x.targetShapeId_, f, this)
      {
      }

      HistoryEdge::
      HistoryEdge (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        sourceShapeId_ (this),
        targetShapeId_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void HistoryEdge::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // sourceShapeId
          //
          if (n.name () == "sourceShapeId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SourceShapeIdType > r (
              SourceShapeIdTraits::create (i, f, this));

            if (!sourceShapeId_.present ())
            {
              this->sourceShapeId_.set (::std::move (r));
              continue;
            }
          }

          // targetShapeId
          //
          if (n.name () == "targetShapeId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TargetShapeIdType > r (
              TargetShapeIdTraits::create (i, f, this));

            if (!targetShapeId_.present ())
            {
              this->targetShapeId_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!sourceShapeId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sourceShapeId",
            "");
        }

        if (!targetShapeId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "targetShapeId",
            "");
        }
      }

      HistoryEdge* HistoryEdge::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class HistoryEdge (*this, f, c);
      }

      HistoryEdge& HistoryEdge::
      operator= (const HistoryEdge& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->sourceShapeId_ = x.sourceShapeId_;
          this->targetShapeId_ = x.targetShapeId_;
        }

        return *this;
      }

      HistoryEdge::
      ~HistoryEdge ()
      {
      }

      // ShapeHistory
      //

      ShapeHistory::
      ShapeHistory ()
      : ::xml_schema::Type (),
        vertices_ (this),
        edges_ (this)
      {
      }

      ShapeHistory::
      ShapeHistory (const ShapeHistory& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        vertices_ (x.vertices_, f, this),
        edges_ (x.edges_, f, this)
      {
      }

      ShapeHistory::
      ShapeHistory (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        vertices_ (this),
        edges_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void ShapeHistory::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // vertices
          //
          if (n.name () == "vertices" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< VerticesType > r (
              VerticesTraits::create (i, f, this));

            this->vertices_.push_back (::std::move (r));
            continue;
          }

          // edges
          //
          if (n.name () == "edges" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< EdgesType > r (
              EdgesTraits::create (i, f, this));

            this->edges_.push_back (::std::move (r));
            continue;
          }

          break;
        }
      }

      ShapeHistory* ShapeHistory::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class ShapeHistory (*this, f, c);
      }

      ShapeHistory& ShapeHistory::
      operator= (const ShapeHistory& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->vertices_ = x.vertices_;
          this->edges_ = x.edges_;
        }

        return *this;
      }

      ShapeHistory::
      ~ShapeHistory ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement& e, const HistoryVertex& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // featureId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "featureId",
              e));

          s << i.featureId ();
        }

        // shapeId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "shapeId",
              e));

          s << i.shapeId ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const HistoryEdge& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // sourceShapeId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sourceShapeId",
              e));

          s << i.sourceShapeId ();
        }

        // targetShapeId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "targetShapeId",
              e));

          s << i.targetShapeId ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ShapeHistory& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // vertices
        //
        for (ShapeHistory::VerticesConstIterator
             b (i.vertices ().begin ()), n (i.vertices ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "vertices",
              e));

          s << *b;
        }

        // edges
        //
        for (ShapeHistory::EdgesConstIterator
             b (i.edges ().begin ()), n (i.edges ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "edges",
              e));

          s << *b;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

