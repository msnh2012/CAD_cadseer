// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlrvlsrevolve.h"

namespace prj
{
  namespace srl
  {
    namespace rvls
    {
      // Revolve
      // 

      const Revolve::BaseType& Revolve::
      base () const
      {
        return this->base_.get ();
      }

      Revolve::BaseType& Revolve::
      base ()
      {
        return this->base_.get ();
      }

      void Revolve::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void Revolve::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const Revolve::AxisTypeType& Revolve::
      axisType () const
      {
        return this->axisType_.get ();
      }

      Revolve::AxisTypeType& Revolve::
      axisType ()
      {
        return this->axisType_.get ();
      }

      void Revolve::
      axisType (const AxisTypeType& x)
      {
        this->axisType_.set (x);
      }

      void Revolve::
      axisType (::std::unique_ptr< AxisTypeType > x)
      {
        this->axisType_.set (std::move (x));
      }

      const Revolve::ProfilePicksType& Revolve::
      profilePicks () const
      {
        return this->profilePicks_.get ();
      }

      Revolve::ProfilePicksType& Revolve::
      profilePicks ()
      {
        return this->profilePicks_.get ();
      }

      void Revolve::
      profilePicks (const ProfilePicksType& x)
      {
        this->profilePicks_.set (x);
      }

      void Revolve::
      profilePicks (::std::unique_ptr< ProfilePicksType > x)
      {
        this->profilePicks_.set (std::move (x));
      }

      const Revolve::AxisPicksType& Revolve::
      axisPicks () const
      {
        return this->axisPicks_.get ();
      }

      Revolve::AxisPicksType& Revolve::
      axisPicks ()
      {
        return this->axisPicks_.get ();
      }

      void Revolve::
      axisPicks (const AxisPicksType& x)
      {
        this->axisPicks_.set (x);
      }

      void Revolve::
      axisPicks (::std::unique_ptr< AxisPicksType > x)
      {
        this->axisPicks_.set (std::move (x));
      }

      const Revolve::AxisOriginType& Revolve::
      axisOrigin () const
      {
        return this->axisOrigin_.get ();
      }

      Revolve::AxisOriginType& Revolve::
      axisOrigin ()
      {
        return this->axisOrigin_.get ();
      }

      void Revolve::
      axisOrigin (const AxisOriginType& x)
      {
        this->axisOrigin_.set (x);
      }

      void Revolve::
      axisOrigin (::std::unique_ptr< AxisOriginType > x)
      {
        this->axisOrigin_.set (std::move (x));
      }

      const Revolve::AxisDirectionType& Revolve::
      axisDirection () const
      {
        return this->axisDirection_.get ();
      }

      Revolve::AxisDirectionType& Revolve::
      axisDirection ()
      {
        return this->axisDirection_.get ();
      }

      void Revolve::
      axisDirection (const AxisDirectionType& x)
      {
        this->axisDirection_.set (x);
      }

      void Revolve::
      axisDirection (::std::unique_ptr< AxisDirectionType > x)
      {
        this->axisDirection_.set (std::move (x));
      }

      const Revolve::AngleType& Revolve::
      angle () const
      {
        return this->angle_.get ();
      }

      Revolve::AngleType& Revolve::
      angle ()
      {
        return this->angle_.get ();
      }

      void Revolve::
      angle (const AngleType& x)
      {
        this->angle_.set (x);
      }

      void Revolve::
      angle (::std::unique_ptr< AngleType > x)
      {
        this->angle_.set (std::move (x));
      }

      const Revolve::SeerShapeType& Revolve::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      Revolve::SeerShapeType& Revolve::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void Revolve::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void Revolve::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const Revolve::AxisTypeLabelType& Revolve::
      axisTypeLabel () const
      {
        return this->axisTypeLabel_.get ();
      }

      Revolve::AxisTypeLabelType& Revolve::
      axisTypeLabel ()
      {
        return this->axisTypeLabel_.get ();
      }

      void Revolve::
      axisTypeLabel (const AxisTypeLabelType& x)
      {
        this->axisTypeLabel_.set (x);
      }

      void Revolve::
      axisTypeLabel (::std::unique_ptr< AxisTypeLabelType > x)
      {
        this->axisTypeLabel_.set (std::move (x));
      }

      const Revolve::AxisOriginLabelType& Revolve::
      axisOriginLabel () const
      {
        return this->axisOriginLabel_.get ();
      }

      Revolve::AxisOriginLabelType& Revolve::
      axisOriginLabel ()
      {
        return this->axisOriginLabel_.get ();
      }

      void Revolve::
      axisOriginLabel (const AxisOriginLabelType& x)
      {
        this->axisOriginLabel_.set (x);
      }

      void Revolve::
      axisOriginLabel (::std::unique_ptr< AxisOriginLabelType > x)
      {
        this->axisOriginLabel_.set (std::move (x));
      }

      const Revolve::AxisDirectionLabelType& Revolve::
      axisDirectionLabel () const
      {
        return this->axisDirectionLabel_.get ();
      }

      Revolve::AxisDirectionLabelType& Revolve::
      axisDirectionLabel ()
      {
        return this->axisDirectionLabel_.get ();
      }

      void Revolve::
      axisDirectionLabel (const AxisDirectionLabelType& x)
      {
        this->axisDirectionLabel_.set (x);
      }

      void Revolve::
      axisDirectionLabel (::std::unique_ptr< AxisDirectionLabelType > x)
      {
        this->axisDirectionLabel_.set (std::move (x));
      }

      const Revolve::AngleLabelType& Revolve::
      angleLabel () const
      {
        return this->angleLabel_.get ();
      }

      Revolve::AngleLabelType& Revolve::
      angleLabel ()
      {
        return this->angleLabel_.get ();
      }

      void Revolve::
      angleLabel (const AngleLabelType& x)
      {
        this->angleLabel_.set (x);
      }

      void Revolve::
      angleLabel (::std::unique_ptr< AngleLabelType > x)
      {
        this->angleLabel_.set (std::move (x));
      }

      const Revolve::GeneratedMapSequence& Revolve::
      generatedMap () const
      {
        return this->generatedMap_;
      }

      Revolve::GeneratedMapSequence& Revolve::
      generatedMap ()
      {
        return this->generatedMap_;
      }

      void Revolve::
      generatedMap (const GeneratedMapSequence& s)
      {
        this->generatedMap_ = s;
      }

      const Revolve::LastMapSequence& Revolve::
      lastMap () const
      {
        return this->lastMap_;
      }

      Revolve::LastMapSequence& Revolve::
      lastMap ()
      {
        return this->lastMap_;
      }

      void Revolve::
      lastMap (const LastMapSequence& s)
      {
        this->lastMap_ = s;
      }

      const Revolve::OWireMapSequence& Revolve::
      oWireMap () const
      {
        return this->oWireMap_;
      }

      Revolve::OWireMapSequence& Revolve::
      oWireMap ()
      {
        return this->oWireMap_;
      }

      void Revolve::
      oWireMap (const OWireMapSequence& s)
      {
        this->oWireMap_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace rvls
    {
      // Revolve
      //

      Revolve::
      Revolve (const BaseType& base,
               const AxisTypeType& axisType,
               const ProfilePicksType& profilePicks,
               const AxisPicksType& axisPicks,
               const AxisOriginType& axisOrigin,
               const AxisDirectionType& axisDirection,
               const AngleType& angle,
               const SeerShapeType& seerShape,
               const AxisTypeLabelType& axisTypeLabel,
               const AxisOriginLabelType& axisOriginLabel,
               const AxisDirectionLabelType& axisDirectionLabel,
               const AngleLabelType& angleLabel)
      : ::xml_schema::Type (),
        base_ (base, this),
        axisType_ (axisType, this),
        profilePicks_ (profilePicks, this),
        axisPicks_ (axisPicks, this),
        axisOrigin_ (axisOrigin, this),
        axisDirection_ (axisDirection, this),
        angle_ (angle, this),
        seerShape_ (seerShape, this),
        axisTypeLabel_ (axisTypeLabel, this),
        axisOriginLabel_ (axisOriginLabel, this),
        axisDirectionLabel_ (axisDirectionLabel, this),
        angleLabel_ (angleLabel, this),
        generatedMap_ (this),
        lastMap_ (this),
        oWireMap_ (this)
      {
      }

      Revolve::
      Revolve (::std::unique_ptr< BaseType > base,
               ::std::unique_ptr< AxisTypeType > axisType,
               ::std::unique_ptr< ProfilePicksType > profilePicks,
               ::std::unique_ptr< AxisPicksType > axisPicks,
               ::std::unique_ptr< AxisOriginType > axisOrigin,
               ::std::unique_ptr< AxisDirectionType > axisDirection,
               ::std::unique_ptr< AngleType > angle,
               ::std::unique_ptr< SeerShapeType > seerShape,
               ::std::unique_ptr< AxisTypeLabelType > axisTypeLabel,
               ::std::unique_ptr< AxisOriginLabelType > axisOriginLabel,
               ::std::unique_ptr< AxisDirectionLabelType > axisDirectionLabel,
               ::std::unique_ptr< AngleLabelType > angleLabel)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        axisType_ (std::move (axisType), this),
        profilePicks_ (std::move (profilePicks), this),
        axisPicks_ (std::move (axisPicks), this),
        axisOrigin_ (std::move (axisOrigin), this),
        axisDirection_ (std::move (axisDirection), this),
        angle_ (std::move (angle), this),
        seerShape_ (std::move (seerShape), this),
        axisTypeLabel_ (std::move (axisTypeLabel), this),
        axisOriginLabel_ (std::move (axisOriginLabel), this),
        axisDirectionLabel_ (std::move (axisDirectionLabel), this),
        angleLabel_ (std::move (angleLabel), this),
        generatedMap_ (this),
        lastMap_ (this),
        oWireMap_ (this)
      {
      }

      Revolve::
      Revolve (const Revolve& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        axisType_ (x.axisType_, f, this),
        profilePicks_ (x.profilePicks_, f, this),
        axisPicks_ (x.axisPicks_, f, this),
        axisOrigin_ (x.axisOrigin_, f, this),
        axisDirection_ (x.axisDirection_, f, this),
        angle_ (x.angle_, f, this),
        seerShape_ (x.seerShape_, f, this),
        axisTypeLabel_ (x.axisTypeLabel_, f, this),
        axisOriginLabel_ (x.axisOriginLabel_, f, this),
        axisDirectionLabel_ (x.axisDirectionLabel_, f, this),
        angleLabel_ (x.angleLabel_, f, this),
        generatedMap_ (x.generatedMap_, f, this),
        lastMap_ (x.lastMap_, f, this),
        oWireMap_ (x.oWireMap_, f, this)
      {
      }

      Revolve::
      Revolve (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        axisType_ (this),
        profilePicks_ (this),
        axisPicks_ (this),
        axisOrigin_ (this),
        axisDirection_ (this),
        angle_ (this),
        seerShape_ (this),
        axisTypeLabel_ (this),
        axisOriginLabel_ (this),
        axisDirectionLabel_ (this),
        angleLabel_ (this),
        generatedMap_ (this),
        lastMap_ (this),
        oWireMap_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Revolve::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // axisType
          //
          if (n.name () == "axisType" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisTypeType > r (
              AxisTypeTraits::create (i, f, this));

            if (!axisType_.present ())
            {
              this->axisType_.set (::std::move (r));
              continue;
            }
          }

          // profilePicks
          //
          if (n.name () == "profilePicks" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ProfilePicksType > r (
              ProfilePicksTraits::create (i, f, this));

            if (!profilePicks_.present ())
            {
              this->profilePicks_.set (::std::move (r));
              continue;
            }
          }

          // axisPicks
          //
          if (n.name () == "axisPicks" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisPicksType > r (
              AxisPicksTraits::create (i, f, this));

            if (!axisPicks_.present ())
            {
              this->axisPicks_.set (::std::move (r));
              continue;
            }
          }

          // axisOrigin
          //
          if (n.name () == "axisOrigin" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisOriginType > r (
              AxisOriginTraits::create (i, f, this));

            if (!axisOrigin_.present ())
            {
              this->axisOrigin_.set (::std::move (r));
              continue;
            }
          }

          // axisDirection
          //
          if (n.name () == "axisDirection" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisDirectionType > r (
              AxisDirectionTraits::create (i, f, this));

            if (!axisDirection_.present ())
            {
              this->axisDirection_.set (::std::move (r));
              continue;
            }
          }

          // angle
          //
          if (n.name () == "angle" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AngleType > r (
              AngleTraits::create (i, f, this));

            if (!angle_.present ())
            {
              this->angle_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // axisTypeLabel
          //
          if (n.name () == "axisTypeLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisTypeLabelType > r (
              AxisTypeLabelTraits::create (i, f, this));

            if (!axisTypeLabel_.present ())
            {
              this->axisTypeLabel_.set (::std::move (r));
              continue;
            }
          }

          // axisOriginLabel
          //
          if (n.name () == "axisOriginLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisOriginLabelType > r (
              AxisOriginLabelTraits::create (i, f, this));

            if (!axisOriginLabel_.present ())
            {
              this->axisOriginLabel_.set (::std::move (r));
              continue;
            }
          }

          // axisDirectionLabel
          //
          if (n.name () == "axisDirectionLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AxisDirectionLabelType > r (
              AxisDirectionLabelTraits::create (i, f, this));

            if (!axisDirectionLabel_.present ())
            {
              this->axisDirectionLabel_.set (::std::move (r));
              continue;
            }
          }

          // angleLabel
          //
          if (n.name () == "angleLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AngleLabelType > r (
              AngleLabelTraits::create (i, f, this));

            if (!angleLabel_.present ())
            {
              this->angleLabel_.set (::std::move (r));
              continue;
            }
          }

          // generatedMap
          //
          if (n.name () == "generatedMap" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< GeneratedMapType > r (
              GeneratedMapTraits::create (i, f, this));

            this->generatedMap_.push_back (::std::move (r));
            continue;
          }

          // lastMap
          //
          if (n.name () == "lastMap" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< LastMapType > r (
              LastMapTraits::create (i, f, this));

            this->lastMap_.push_back (::std::move (r));
            continue;
          }

          // oWireMap
          //
          if (n.name () == "oWireMap" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< OWireMapType > r (
              OWireMapTraits::create (i, f, this));

            this->oWireMap_.push_back (::std::move (r));
            continue;
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!axisType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisType",
            "");
        }

        if (!profilePicks_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "profilePicks",
            "");
        }

        if (!axisPicks_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisPicks",
            "");
        }

        if (!axisOrigin_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisOrigin",
            "");
        }

        if (!axisDirection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisDirection",
            "");
        }

        if (!angle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "angle",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!axisTypeLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisTypeLabel",
            "");
        }

        if (!axisOriginLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisOriginLabel",
            "");
        }

        if (!axisDirectionLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisDirectionLabel",
            "");
        }

        if (!angleLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "angleLabel",
            "");
        }
      }

      Revolve* Revolve::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Revolve (*this, f, c);
      }

      Revolve& Revolve::
      operator= (const Revolve& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->axisType_ = x.axisType_;
          this->profilePicks_ = x.profilePicks_;
          this->axisPicks_ = x.axisPicks_;
          this->axisOrigin_ = x.axisOrigin_;
          this->axisDirection_ = x.axisDirection_;
          this->angle_ = x.angle_;
          this->seerShape_ = x.seerShape_;
          this->axisTypeLabel_ = x.axisTypeLabel_;
          this->axisOriginLabel_ = x.axisOriginLabel_;
          this->axisDirectionLabel_ = x.axisDirectionLabel_;
          this->angleLabel_ = x.angleLabel_;
          this->generatedMap_ = x.generatedMap_;
          this->lastMap_ = x.lastMap_;
          this->oWireMap_ = x.oWireMap_;
        }

        return *this;
      }

      Revolve::
      ~Revolve ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace rvls
    {
      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::rvls::Revolve > (
          ::prj::srl::rvls::revolve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::rvls::Revolve > (
          ::prj::srl::rvls::revolve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::rvls::Revolve > (
          ::prj::srl::rvls::revolve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::rvls::revolve (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::rvls::revolve (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::rvls::revolve (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::rvls::revolve (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::rvls::revolve (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::rvls::revolve (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::rvls::Revolve > (
          ::prj::srl::rvls::revolve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::rvls::Revolve > (
          ::prj::srl::rvls::revolve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::rvls::Revolve > (
          ::prj::srl::rvls::revolve (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (const ::xercesc::DOMDocument& doc,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::rvls::Revolve > (
            ::prj::srl::rvls::revolve (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "revolve" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/rvls")
        {
          ::std::unique_ptr< ::prj::srl::rvls::Revolve > r (
            ::xsd::cxx::tree::traits< ::prj::srl::rvls::Revolve, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "revolve",
          "http://www.cadseer.com/prj/srl/rvls");
      }

      ::std::unique_ptr< ::prj::srl::rvls::Revolve >
      revolve (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "revolve" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/rvls")
        {
          ::std::unique_ptr< ::prj::srl::rvls::Revolve > r (
            ::xsd::cxx::tree::traits< ::prj::srl::rvls::Revolve, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "revolve",
          "http://www.cadseer.com/prj/srl/rvls");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace rvls
    {
      void
      operator<< (::xercesc::DOMElement& e, const Revolve& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // axisType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisType",
              e));

          s << i.axisType ();
        }

        // profilePicks
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "profilePicks",
              e));

          s << i.profilePicks ();
        }

        // axisPicks
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisPicks",
              e));

          s << i.axisPicks ();
        }

        // axisOrigin
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisOrigin",
              e));

          s << i.axisOrigin ();
        }

        // axisDirection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisDirection",
              e));

          s << i.axisDirection ();
        }

        // angle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "angle",
              e));

          s << i.angle ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // axisTypeLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisTypeLabel",
              e));

          s << i.axisTypeLabel ();
        }

        // axisOriginLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisOriginLabel",
              e));

          s << i.axisOriginLabel ();
        }

        // axisDirectionLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisDirectionLabel",
              e));

          s << i.axisDirectionLabel ();
        }

        // angleLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "angleLabel",
              e));

          s << i.angleLabel ();
        }

        // generatedMap
        //
        for (Revolve::GeneratedMapConstIterator
             b (i.generatedMap ().begin ()), n (i.generatedMap ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "generatedMap",
              e));

          s << *b;
        }

        // lastMap
        //
        for (Revolve::LastMapConstIterator
             b (i.lastMap ().begin ()), n (i.lastMap ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "lastMap",
              e));

          s << *b;
        }

        // oWireMap
        //
        for (Revolve::OWireMapConstIterator
             b (i.oWireMap ().begin ()), n (i.oWireMap ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "oWireMap",
              e));

          s << *b;
        }
      }

      void
      revolve (::std::ostream& o,
               const ::prj::srl::rvls::Revolve& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rvls::revolve (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      revolve (::std::ostream& o,
               const ::prj::srl::rvls::Revolve& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rvls::revolve (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      revolve (::std::ostream& o,
               const ::prj::srl::rvls::Revolve& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rvls::revolve (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      revolve (::xercesc::XMLFormatTarget& t,
               const ::prj::srl::rvls::Revolve& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rvls::revolve (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      revolve (::xercesc::XMLFormatTarget& t,
               const ::prj::srl::rvls::Revolve& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rvls::revolve (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      revolve (::xercesc::XMLFormatTarget& t,
               const ::prj::srl::rvls::Revolve& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rvls::revolve (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      revolve (::xercesc::DOMDocument& d,
               const ::prj::srl::rvls::Revolve& s,
               ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "revolve" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/rvls")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "revolve",
            "http://www.cadseer.com/prj/srl/rvls");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      revolve (const ::prj::srl::rvls::Revolve& s,
               const ::xml_schema::NamespaceInfomap& m,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "revolve",
            "http://www.cadseer.com/prj/srl/rvls",
            m, f));

        ::prj::srl::rvls::revolve (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

