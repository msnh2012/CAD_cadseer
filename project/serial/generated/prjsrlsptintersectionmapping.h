// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_SPT_PRJSRLSPTINTERSECTIONMAPPING_H
#define PRJ_SRL_SPT_PRJSRLSPTINTERSECTIONMAPPING_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class EdgeNode;
      class EdgeSplit;
      class IntersectionNode;
      class EdgeIntersection;
      class FaceNode;
      class FaceSplit;
      class SameDomain;
      class IntersectionMapper;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptshapehistory.h"

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class EdgeNode: public ::xml_schema::Type
      {
        public:
        // edgeId
        //
        typedef ::xml_schema::String EdgeIdType;
        typedef ::xsd::cxx::tree::traits< EdgeIdType, char > EdgeIdTraits;

        const EdgeIdType&
        edgeId () const;

        EdgeIdType&
        edgeId ();

        void
        edgeId (const EdgeIdType& x);

        void
        edgeId (::std::unique_ptr< EdgeIdType > p);

        static const EdgeIdType&
        edgeId_default_value ();

        // center
        //
        typedef ::xml_schema::Double CenterType;
        typedef ::xsd::cxx::tree::traits< CenterType, char, ::xsd::cxx::tree::schema_type::double_ > CenterTraits;

        const CenterType&
        center () const;

        CenterType&
        center ();

        void
        center (const CenterType& x);

        // alive
        //
        typedef ::xml_schema::Boolean AliveType;
        typedef ::xsd::cxx::tree::traits< AliveType, char > AliveTraits;

        const AliveType&
        alive () const;

        AliveType&
        alive ();

        void
        alive (const AliveType& x);

        // Constructors.
        //
        EdgeNode (const EdgeIdType&,
                  const CenterType&,
                  const AliveType&);

        EdgeNode (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        EdgeNode (const EdgeNode& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        virtual EdgeNode*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        EdgeNode&
        operator= (const EdgeNode& x);

        virtual 
        ~EdgeNode ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< EdgeIdType > edgeId_;
        static const EdgeIdType edgeId_default_value_;
        ::xsd::cxx::tree::one< CenterType > center_;
        ::xsd::cxx::tree::one< AliveType > alive_;
      };

      class EdgeSplit: public ::xml_schema::Type
      {
        public:
        // edgeHistory
        //
        typedef ::prj::srl::spt::ShapeHistory EdgeHistoryType;
        typedef ::xsd::cxx::tree::traits< EdgeHistoryType, char > EdgeHistoryTraits;

        const EdgeHistoryType&
        edgeHistory () const;

        EdgeHistoryType&
        edgeHistory ();

        void
        edgeHistory (const EdgeHistoryType& x);

        void
        edgeHistory (::std::unique_ptr< EdgeHistoryType > p);

        // nodes
        //
        typedef ::prj::srl::spt::EdgeNode NodesType;
        typedef ::xsd::cxx::tree::sequence< NodesType > NodesSequence;
        typedef NodesSequence::iterator NodesIterator;
        typedef NodesSequence::const_iterator NodesConstIterator;
        typedef ::xsd::cxx::tree::traits< NodesType, char > NodesTraits;

        const NodesSequence&
        nodes () const;

        NodesSequence&
        nodes ();

        void
        nodes (const NodesSequence& s);

        // Constructors.
        //
        EdgeSplit (const EdgeHistoryType&);

        EdgeSplit (::std::unique_ptr< EdgeHistoryType >);

        EdgeSplit (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        EdgeSplit (const EdgeSplit& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual EdgeSplit*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        EdgeSplit&
        operator= (const EdgeSplit& x);

        virtual 
        ~EdgeSplit ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< EdgeHistoryType > edgeHistory_;
        NodesSequence nodes_;
      };

      class IntersectionNode: public ::xml_schema::Type
      {
        public:
        // edgeId
        //
        typedef ::xml_schema::String EdgeIdType;
        typedef ::xsd::cxx::tree::traits< EdgeIdType, char > EdgeIdTraits;

        const EdgeIdType&
        edgeId () const;

        EdgeIdType&
        edgeId ();

        void
        edgeId (const EdgeIdType& x);

        void
        edgeId (::std::unique_ptr< EdgeIdType > p);

        static const EdgeIdType&
        edgeId_default_value ();

        // centerX
        //
        typedef ::xml_schema::Double CenterXType;
        typedef ::xsd::cxx::tree::traits< CenterXType, char, ::xsd::cxx::tree::schema_type::double_ > CenterXTraits;

        const CenterXType&
        centerX () const;

        CenterXType&
        centerX ();

        void
        centerX (const CenterXType& x);

        // centerY
        //
        typedef ::xml_schema::Double CenterYType;
        typedef ::xsd::cxx::tree::traits< CenterYType, char, ::xsd::cxx::tree::schema_type::double_ > CenterYTraits;

        const CenterYType&
        centerY () const;

        CenterYType&
        centerY ();

        void
        centerY (const CenterYType& x);

        // alive
        //
        typedef ::xml_schema::Boolean AliveType;
        typedef ::xsd::cxx::tree::traits< AliveType, char > AliveTraits;

        const AliveType&
        alive () const;

        AliveType&
        alive ();

        void
        alive (const AliveType& x);

        // Constructors.
        //
        IntersectionNode (const EdgeIdType&,
                          const CenterXType&,
                          const CenterYType&,
                          const AliveType&);

        IntersectionNode (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

        IntersectionNode (const IntersectionNode& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

        virtual IntersectionNode*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        IntersectionNode&
        operator= (const IntersectionNode& x);

        virtual 
        ~IntersectionNode ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< EdgeIdType > edgeId_;
        static const EdgeIdType edgeId_default_value_;
        ::xsd::cxx::tree::one< CenterXType > centerX_;
        ::xsd::cxx::tree::one< CenterYType > centerY_;
        ::xsd::cxx::tree::one< AliveType > alive_;
      };

      class EdgeIntersection: public ::xml_schema::Type
      {
        public:
        // faceHistory1
        //
        typedef ::prj::srl::spt::ShapeHistory FaceHistory1Type;
        typedef ::xsd::cxx::tree::traits< FaceHistory1Type, char > FaceHistory1Traits;

        const FaceHistory1Type&
        faceHistory1 () const;

        FaceHistory1Type&
        faceHistory1 ();

        void
        faceHistory1 (const FaceHistory1Type& x);

        void
        faceHistory1 (::std::unique_ptr< FaceHistory1Type > p);

        // faceHistory2
        //
        typedef ::prj::srl::spt::ShapeHistory FaceHistory2Type;
        typedef ::xsd::cxx::tree::traits< FaceHistory2Type, char > FaceHistory2Traits;

        const FaceHistory2Type&
        faceHistory2 () const;

        FaceHistory2Type&
        faceHistory2 ();

        void
        faceHistory2 (const FaceHistory2Type& x);

        void
        faceHistory2 (::std::unique_ptr< FaceHistory2Type > p);

        // nodes
        //
        typedef ::prj::srl::spt::IntersectionNode NodesType;
        typedef ::xsd::cxx::tree::sequence< NodesType > NodesSequence;
        typedef NodesSequence::iterator NodesIterator;
        typedef NodesSequence::const_iterator NodesConstIterator;
        typedef ::xsd::cxx::tree::traits< NodesType, char > NodesTraits;

        const NodesSequence&
        nodes () const;

        NodesSequence&
        nodes ();

        void
        nodes (const NodesSequence& s);

        // Constructors.
        //
        EdgeIntersection (const FaceHistory1Type&,
                          const FaceHistory2Type&);

        EdgeIntersection (::std::unique_ptr< FaceHistory1Type >,
                          ::std::unique_ptr< FaceHistory2Type >);

        EdgeIntersection (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

        EdgeIntersection (const EdgeIntersection& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

        virtual EdgeIntersection*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        EdgeIntersection&
        operator= (const EdgeIntersection& x);

        virtual 
        ~EdgeIntersection ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< FaceHistory1Type > faceHistory1_;
        ::xsd::cxx::tree::one< FaceHistory2Type > faceHistory2_;
        NodesSequence nodes_;
      };

      class FaceNode: public ::xml_schema::Type
      {
        public:
        // faceId
        //
        typedef ::xml_schema::String FaceIdType;
        typedef ::xsd::cxx::tree::traits< FaceIdType, char > FaceIdTraits;

        const FaceIdType&
        faceId () const;

        FaceIdType&
        faceId ();

        void
        faceId (const FaceIdType& x);

        void
        faceId (::std::unique_ptr< FaceIdType > p);

        static const FaceIdType&
        faceId_default_value ();

        // wireId
        //
        typedef ::xml_schema::String WireIdType;
        typedef ::xsd::cxx::tree::traits< WireIdType, char > WireIdTraits;

        const WireIdType&
        wireId () const;

        WireIdType&
        wireId ();

        void
        wireId (const WireIdType& x);

        void
        wireId (::std::unique_ptr< WireIdType > p);

        static const WireIdType&
        wireId_default_value ();

        // centerX
        //
        typedef ::xml_schema::Double CenterXType;
        typedef ::xsd::cxx::tree::traits< CenterXType, char, ::xsd::cxx::tree::schema_type::double_ > CenterXTraits;

        const CenterXType&
        centerX () const;

        CenterXType&
        centerX ();

        void
        centerX (const CenterXType& x);

        // centerY
        //
        typedef ::xml_schema::Double CenterYType;
        typedef ::xsd::cxx::tree::traits< CenterYType, char, ::xsd::cxx::tree::schema_type::double_ > CenterYTraits;

        const CenterYType&
        centerY () const;

        CenterYType&
        centerY ();

        void
        centerY (const CenterYType& x);

        // alive
        //
        typedef ::xml_schema::Boolean AliveType;
        typedef ::xsd::cxx::tree::traits< AliveType, char > AliveTraits;

        const AliveType&
        alive () const;

        AliveType&
        alive ();

        void
        alive (const AliveType& x);

        // Constructors.
        //
        FaceNode (const FaceIdType&,
                  const WireIdType&,
                  const CenterXType&,
                  const CenterYType&,
                  const AliveType&);

        FaceNode (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        FaceNode (const FaceNode& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        virtual FaceNode*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        FaceNode&
        operator= (const FaceNode& x);

        virtual 
        ~FaceNode ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< FaceIdType > faceId_;
        static const FaceIdType faceId_default_value_;
        ::xsd::cxx::tree::one< WireIdType > wireId_;
        static const WireIdType wireId_default_value_;
        ::xsd::cxx::tree::one< CenterXType > centerX_;
        ::xsd::cxx::tree::one< CenterYType > centerY_;
        ::xsd::cxx::tree::one< AliveType > alive_;
      };

      class FaceSplit: public ::xml_schema::Type
      {
        public:
        // faceHistory
        //
        typedef ::prj::srl::spt::ShapeHistory FaceHistoryType;
        typedef ::xsd::cxx::tree::traits< FaceHistoryType, char > FaceHistoryTraits;

        const FaceHistoryType&
        faceHistory () const;

        FaceHistoryType&
        faceHistory ();

        void
        faceHistory (const FaceHistoryType& x);

        void
        faceHistory (::std::unique_ptr< FaceHistoryType > p);

        // nodes
        //
        typedef ::prj::srl::spt::FaceNode NodesType;
        typedef ::xsd::cxx::tree::sequence< NodesType > NodesSequence;
        typedef NodesSequence::iterator NodesIterator;
        typedef NodesSequence::const_iterator NodesConstIterator;
        typedef ::xsd::cxx::tree::traits< NodesType, char > NodesTraits;

        const NodesSequence&
        nodes () const;

        NodesSequence&
        nodes ();

        void
        nodes (const NodesSequence& s);

        // Constructors.
        //
        FaceSplit (const FaceHistoryType&);

        FaceSplit (::std::unique_ptr< FaceHistoryType >);

        FaceSplit (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        FaceSplit (const FaceSplit& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual FaceSplit*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        FaceSplit&
        operator= (const FaceSplit& x);

        virtual 
        ~FaceSplit ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< FaceHistoryType > faceHistory_;
        NodesSequence nodes_;
      };

      class SameDomain: public ::xml_schema::Type
      {
        public:
        // id
        //
        typedef ::xml_schema::String IdType;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdType&
        id () const;

        IdType&
        id ();

        void
        id (const IdType& x);

        void
        id (::std::unique_ptr< IdType > p);

        static const IdType&
        id_default_value ();

        // histories
        //
        typedef ::prj::srl::spt::ShapeHistory HistoriesType;
        typedef ::xsd::cxx::tree::sequence< HistoriesType > HistoriesSequence;
        typedef HistoriesSequence::iterator HistoriesIterator;
        typedef HistoriesSequence::const_iterator HistoriesConstIterator;
        typedef ::xsd::cxx::tree::traits< HistoriesType, char > HistoriesTraits;

        const HistoriesSequence&
        histories () const;

        HistoriesSequence&
        histories ();

        void
        histories (const HistoriesSequence& s);

        // Constructors.
        //
        SameDomain (const IdType&);

        SameDomain (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

        SameDomain (const SameDomain& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

        virtual SameDomain*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        SameDomain&
        operator= (const SameDomain& x);

        virtual 
        ~SameDomain ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< IdType > id_;
        static const IdType id_default_value_;
        HistoriesSequence histories_;
      };

      class IntersectionMapper: public ::xml_schema::Type
      {
        public:
        // edgeIntersections
        //
        typedef ::prj::srl::spt::EdgeIntersection EdgeIntersectionsType;
        typedef ::xsd::cxx::tree::sequence< EdgeIntersectionsType > EdgeIntersectionsSequence;
        typedef EdgeIntersectionsSequence::iterator EdgeIntersectionsIterator;
        typedef EdgeIntersectionsSequence::const_iterator EdgeIntersectionsConstIterator;
        typedef ::xsd::cxx::tree::traits< EdgeIntersectionsType, char > EdgeIntersectionsTraits;

        const EdgeIntersectionsSequence&
        edgeIntersections () const;

        EdgeIntersectionsSequence&
        edgeIntersections ();

        void
        edgeIntersections (const EdgeIntersectionsSequence& s);

        // faceSplits
        //
        typedef ::prj::srl::spt::FaceSplit FaceSplitsType;
        typedef ::xsd::cxx::tree::sequence< FaceSplitsType > FaceSplitsSequence;
        typedef FaceSplitsSequence::iterator FaceSplitsIterator;
        typedef FaceSplitsSequence::const_iterator FaceSplitsConstIterator;
        typedef ::xsd::cxx::tree::traits< FaceSplitsType, char > FaceSplitsTraits;

        const FaceSplitsSequence&
        faceSplits () const;

        FaceSplitsSequence&
        faceSplits ();

        void
        faceSplits (const FaceSplitsSequence& s);

        // edgeSplits
        //
        typedef ::prj::srl::spt::EdgeSplit EdgeSplitsType;
        typedef ::xsd::cxx::tree::sequence< EdgeSplitsType > EdgeSplitsSequence;
        typedef EdgeSplitsSequence::iterator EdgeSplitsIterator;
        typedef EdgeSplitsSequence::const_iterator EdgeSplitsConstIterator;
        typedef ::xsd::cxx::tree::traits< EdgeSplitsType, char > EdgeSplitsTraits;

        const EdgeSplitsSequence&
        edgeSplits () const;

        EdgeSplitsSequence&
        edgeSplits ();

        void
        edgeSplits (const EdgeSplitsSequence& s);

        // sameDomains
        //
        typedef ::prj::srl::spt::SameDomain SameDomainsType;
        typedef ::xsd::cxx::tree::sequence< SameDomainsType > SameDomainsSequence;
        typedef SameDomainsSequence::iterator SameDomainsIterator;
        typedef SameDomainsSequence::const_iterator SameDomainsConstIterator;
        typedef ::xsd::cxx::tree::traits< SameDomainsType, char > SameDomainsTraits;

        const SameDomainsSequence&
        sameDomains () const;

        SameDomainsSequence&
        sameDomains ();

        void
        sameDomains (const SameDomainsSequence& s);

        // Constructors.
        //
        IntersectionMapper ();

        IntersectionMapper (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

        IntersectionMapper (const IntersectionMapper& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

        virtual IntersectionMapper*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        IntersectionMapper&
        operator= (const IntersectionMapper& x);

        virtual 
        ~IntersectionMapper ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        EdgeIntersectionsSequence edgeIntersections_;
        FaceSplitsSequence faceSplits_;
        EdgeSplitsSequence edgeSplits_;
        SameDomainsSequence sameDomains_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement&, const EdgeNode&);

      void
      operator<< (::xercesc::DOMElement&, const EdgeSplit&);

      void
      operator<< (::xercesc::DOMElement&, const IntersectionNode&);

      void
      operator<< (::xercesc::DOMElement&, const EdgeIntersection&);

      void
      operator<< (::xercesc::DOMElement&, const FaceNode&);

      void
      operator<< (::xercesc::DOMElement&, const FaceSplit&);

      void
      operator<< (::xercesc::DOMElement&, const SameDomain&);

      void
      operator<< (::xercesc::DOMElement&, const IntersectionMapper&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_SPT_PRJSRLSPTINTERSECTIONMAPPING_H
