// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_SKTS_PRJSRLSKTSSKETCH_H
#define PRJ_SRL_SKTS_PRJSRLSKTSSKETCH_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace skts
    {
      class SSParameter;
      class SSEntity;
      class SSConstraint;
      class Solver;
      class VisualMapRecord;
      class Visual;
      class HandleParameterPair;
      class Sketch;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptbase.h"

#include "prjsrlsptoverlay.h"

namespace prj
{
  namespace srl
  {
    namespace skts
    {
      class SSParameter: public ::xml_schema::Type
      {
        public:
        // handle
        //
        typedef ::xml_schema::UnsignedInt HandleType;
        typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

        const HandleType&
        handle () const;

        HandleType&
        handle ();

        void
        handle (const HandleType& x);

        // group
        //
        typedef ::xml_schema::UnsignedInt GroupType;
        typedef ::xsd::cxx::tree::traits< GroupType, char > GroupTraits;

        const GroupType&
        group () const;

        GroupType&
        group ();

        void
        group (const GroupType& x);

        // value
        //
        typedef ::xml_schema::Double ValueType;
        typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

        const ValueType&
        value () const;

        ValueType&
        value ();

        void
        value (const ValueType& x);

        // Constructors.
        //
        SSParameter (const HandleType&,
                     const GroupType&,
                     const ValueType&);

        SSParameter (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        SSParameter (const SSParameter& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        virtual SSParameter*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        SSParameter&
        operator= (const SSParameter& x);

        virtual 
        ~SSParameter ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< HandleType > handle_;
        ::xsd::cxx::tree::one< GroupType > group_;
        ::xsd::cxx::tree::one< ValueType > value_;
      };

      class SSEntity: public ::xml_schema::Type
      {
        public:
        // handle
        //
        typedef ::xml_schema::UnsignedInt HandleType;
        typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

        const HandleType&
        handle () const;

        HandleType&
        handle ();

        void
        handle (const HandleType& x);

        // group
        //
        typedef ::xml_schema::UnsignedInt GroupType;
        typedef ::xsd::cxx::tree::traits< GroupType, char > GroupTraits;

        const GroupType&
        group () const;

        GroupType&
        group ();

        void
        group (const GroupType& x);

        // type
        //
        typedef ::xml_schema::Int TypeType;
        typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

        const TypeType&
        type () const;

        TypeType&
        type ();

        void
        type (const TypeType& x);

        // workPlane
        //
        typedef ::xml_schema::UnsignedInt WorkPlaneType;
        typedef ::xsd::cxx::tree::traits< WorkPlaneType, char > WorkPlaneTraits;

        const WorkPlaneType&
        workPlane () const;

        WorkPlaneType&
        workPlane ();

        void
        workPlane (const WorkPlaneType& x);

        // points
        //
        typedef ::xml_schema::UnsignedInt PointsType;
        typedef ::xsd::cxx::tree::sequence< PointsType > PointsSequence;
        typedef PointsSequence::iterator PointsIterator;
        typedef PointsSequence::const_iterator PointsConstIterator;
        typedef ::xsd::cxx::tree::traits< PointsType, char > PointsTraits;

        const PointsSequence&
        points () const;

        PointsSequence&
        points ();

        void
        points (const PointsSequence& s);

        // normal
        //
        typedef ::xml_schema::UnsignedInt NormalType;
        typedef ::xsd::cxx::tree::traits< NormalType, char > NormalTraits;

        const NormalType&
        normal () const;

        NormalType&
        normal ();

        void
        normal (const NormalType& x);

        // distance
        //
        typedef ::xml_schema::UnsignedInt DistanceType;
        typedef ::xsd::cxx::tree::traits< DistanceType, char > DistanceTraits;

        const DistanceType&
        distance () const;

        DistanceType&
        distance ();

        void
        distance (const DistanceType& x);

        // parameters
        //
        typedef ::xml_schema::UnsignedInt ParametersType;
        typedef ::xsd::cxx::tree::sequence< ParametersType > ParametersSequence;
        typedef ParametersSequence::iterator ParametersIterator;
        typedef ParametersSequence::const_iterator ParametersConstIterator;
        typedef ::xsd::cxx::tree::traits< ParametersType, char > ParametersTraits;

        const ParametersSequence&
        parameters () const;

        ParametersSequence&
        parameters ();

        void
        parameters (const ParametersSequence& s);

        // Constructors.
        //
        SSEntity (const HandleType&,
                  const GroupType&,
                  const TypeType&,
                  const WorkPlaneType&,
                  const NormalType&,
                  const DistanceType&);

        SSEntity (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        SSEntity (const SSEntity& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        virtual SSEntity*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        SSEntity&
        operator= (const SSEntity& x);

        virtual 
        ~SSEntity ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< HandleType > handle_;
        ::xsd::cxx::tree::one< GroupType > group_;
        ::xsd::cxx::tree::one< TypeType > type_;
        ::xsd::cxx::tree::one< WorkPlaneType > workPlane_;
        PointsSequence points_;
        ::xsd::cxx::tree::one< NormalType > normal_;
        ::xsd::cxx::tree::one< DistanceType > distance_;
        ParametersSequence parameters_;
      };

      class SSConstraint: public ::xml_schema::Type
      {
        public:
        // handle
        //
        typedef ::xml_schema::UnsignedInt HandleType;
        typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

        const HandleType&
        handle () const;

        HandleType&
        handle ();

        void
        handle (const HandleType& x);

        // group
        //
        typedef ::xml_schema::UnsignedInt GroupType;
        typedef ::xsd::cxx::tree::traits< GroupType, char > GroupTraits;

        const GroupType&
        group () const;

        GroupType&
        group ();

        void
        group (const GroupType& x);

        // type
        //
        typedef ::xml_schema::Int TypeType;
        typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

        const TypeType&
        type () const;

        TypeType&
        type ();

        void
        type (const TypeType& x);

        // workPlane
        //
        typedef ::xml_schema::UnsignedInt WorkPlaneType;
        typedef ::xsd::cxx::tree::traits< WorkPlaneType, char > WorkPlaneTraits;

        const WorkPlaneType&
        workPlane () const;

        WorkPlaneType&
        workPlane ();

        void
        workPlane (const WorkPlaneType& x);

        // value
        //
        typedef ::xml_schema::Double ValueType;
        typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

        const ValueType&
        value () const;

        ValueType&
        value ();

        void
        value (const ValueType& x);

        // pointA
        //
        typedef ::xml_schema::UnsignedInt PointAType;
        typedef ::xsd::cxx::tree::traits< PointAType, char > PointATraits;

        const PointAType&
        pointA () const;

        PointAType&
        pointA ();

        void
        pointA (const PointAType& x);

        // pointB
        //
        typedef ::xml_schema::UnsignedInt PointBType;
        typedef ::xsd::cxx::tree::traits< PointBType, char > PointBTraits;

        const PointBType&
        pointB () const;

        PointBType&
        pointB ();

        void
        pointB (const PointBType& x);

        // entityA
        //
        typedef ::xml_schema::UnsignedInt EntityAType;
        typedef ::xsd::cxx::tree::traits< EntityAType, char > EntityATraits;

        const EntityAType&
        entityA () const;

        EntityAType&
        entityA ();

        void
        entityA (const EntityAType& x);

        // entityB
        //
        typedef ::xml_schema::UnsignedInt EntityBType;
        typedef ::xsd::cxx::tree::traits< EntityBType, char > EntityBTraits;

        const EntityBType&
        entityB () const;

        EntityBType&
        entityB ();

        void
        entityB (const EntityBType& x);

        // entityC
        //
        typedef ::xml_schema::UnsignedInt EntityCType;
        typedef ::xsd::cxx::tree::traits< EntityCType, char > EntityCTraits;

        const EntityCType&
        entityC () const;

        EntityCType&
        entityC ();

        void
        entityC (const EntityCType& x);

        // entityD
        //
        typedef ::xml_schema::UnsignedInt EntityDType;
        typedef ::xsd::cxx::tree::traits< EntityDType, char > EntityDTraits;

        const EntityDType&
        entityD () const;

        EntityDType&
        entityD ();

        void
        entityD (const EntityDType& x);

        // other
        //
        typedef ::xml_schema::Int OtherType;
        typedef ::xsd::cxx::tree::traits< OtherType, char > OtherTraits;

        const OtherType&
        other () const;

        OtherType&
        other ();

        void
        other (const OtherType& x);

        // other2
        //
        typedef ::xml_schema::Int Other2Type;
        typedef ::xsd::cxx::tree::traits< Other2Type, char > Other2Traits;

        const Other2Type&
        other2 () const;

        Other2Type&
        other2 ();

        void
        other2 (const Other2Type& x);

        // Constructors.
        //
        SSConstraint (const HandleType&,
                      const GroupType&,
                      const TypeType&,
                      const WorkPlaneType&,
                      const ValueType&,
                      const PointAType&,
                      const PointBType&,
                      const EntityAType&,
                      const EntityBType&,
                      const EntityCType&,
                      const EntityDType&,
                      const OtherType&,
                      const Other2Type&);

        SSConstraint (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

        SSConstraint (const SSConstraint& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

        virtual SSConstraint*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        SSConstraint&
        operator= (const SSConstraint& x);

        virtual 
        ~SSConstraint ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< HandleType > handle_;
        ::xsd::cxx::tree::one< GroupType > group_;
        ::xsd::cxx::tree::one< TypeType > type_;
        ::xsd::cxx::tree::one< WorkPlaneType > workPlane_;
        ::xsd::cxx::tree::one< ValueType > value_;
        ::xsd::cxx::tree::one< PointAType > pointA_;
        ::xsd::cxx::tree::one< PointBType > pointB_;
        ::xsd::cxx::tree::one< EntityAType > entityA_;
        ::xsd::cxx::tree::one< EntityBType > entityB_;
        ::xsd::cxx::tree::one< EntityCType > entityC_;
        ::xsd::cxx::tree::one< EntityDType > entityD_;
        ::xsd::cxx::tree::one< OtherType > other_;
        ::xsd::cxx::tree::one< Other2Type > other2_;
      };

      class Solver: public ::xml_schema::Type
      {
        public:
        // parameters
        //
        typedef ::prj::srl::skts::SSParameter ParametersType;
        typedef ::xsd::cxx::tree::sequence< ParametersType > ParametersSequence;
        typedef ParametersSequence::iterator ParametersIterator;
        typedef ParametersSequence::const_iterator ParametersConstIterator;
        typedef ::xsd::cxx::tree::traits< ParametersType, char > ParametersTraits;

        const ParametersSequence&
        parameters () const;

        ParametersSequence&
        parameters ();

        void
        parameters (const ParametersSequence& s);

        // entities
        //
        typedef ::prj::srl::skts::SSEntity EntitiesType;
        typedef ::xsd::cxx::tree::sequence< EntitiesType > EntitiesSequence;
        typedef EntitiesSequence::iterator EntitiesIterator;
        typedef EntitiesSequence::const_iterator EntitiesConstIterator;
        typedef ::xsd::cxx::tree::traits< EntitiesType, char > EntitiesTraits;

        const EntitiesSequence&
        entities () const;

        EntitiesSequence&
        entities ();

        void
        entities (const EntitiesSequence& s);

        // constraints
        //
        typedef ::prj::srl::skts::SSConstraint ConstraintsType;
        typedef ::xsd::cxx::tree::sequence< ConstraintsType > ConstraintsSequence;
        typedef ConstraintsSequence::iterator ConstraintsIterator;
        typedef ConstraintsSequence::const_iterator ConstraintsConstIterator;
        typedef ::xsd::cxx::tree::traits< ConstraintsType, char > ConstraintsTraits;

        const ConstraintsSequence&
        constraints () const;

        ConstraintsSequence&
        constraints ();

        void
        constraints (const ConstraintsSequence& s);

        // nextParameterHandle
        //
        typedef ::xml_schema::UnsignedInt NextParameterHandleType;
        typedef ::xsd::cxx::tree::traits< NextParameterHandleType, char > NextParameterHandleTraits;

        const NextParameterHandleType&
        nextParameterHandle () const;

        NextParameterHandleType&
        nextParameterHandle ();

        void
        nextParameterHandle (const NextParameterHandleType& x);

        // nextEntityHandle
        //
        typedef ::xml_schema::UnsignedInt NextEntityHandleType;
        typedef ::xsd::cxx::tree::traits< NextEntityHandleType, char > NextEntityHandleTraits;

        const NextEntityHandleType&
        nextEntityHandle () const;

        NextEntityHandleType&
        nextEntityHandle ();

        void
        nextEntityHandle (const NextEntityHandleType& x);

        // nextConstraintHandle
        //
        typedef ::xml_schema::UnsignedInt NextConstraintHandleType;
        typedef ::xsd::cxx::tree::traits< NextConstraintHandleType, char > NextConstraintHandleTraits;

        const NextConstraintHandleType&
        nextConstraintHandle () const;

        NextConstraintHandleType&
        nextConstraintHandle ();

        void
        nextConstraintHandle (const NextConstraintHandleType& x);

        // currentGroup
        //
        typedef ::xml_schema::UnsignedInt CurrentGroupType;
        typedef ::xsd::cxx::tree::traits< CurrentGroupType, char > CurrentGroupTraits;

        const CurrentGroupType&
        currentGroup () const;

        CurrentGroupType&
        currentGroup ();

        void
        currentGroup (const CurrentGroupType& x);

        // currentWorkPlane
        //
        typedef ::xml_schema::UnsignedInt CurrentWorkPlaneType;
        typedef ::xsd::cxx::tree::traits< CurrentWorkPlaneType, char > CurrentWorkPlaneTraits;

        const CurrentWorkPlaneType&
        currentWorkPlane () const;

        CurrentWorkPlaneType&
        currentWorkPlane ();

        void
        currentWorkPlane (const CurrentWorkPlaneType& x);

        // currentXAxis
        //
        typedef ::xml_schema::UnsignedInt CurrentXAxisType;
        typedef ::xsd::cxx::tree::traits< CurrentXAxisType, char > CurrentXAxisTraits;

        const CurrentXAxisType&
        currentXAxis () const;

        CurrentXAxisType&
        currentXAxis ();

        void
        currentXAxis (const CurrentXAxisType& x);

        // currentYAxis
        //
        typedef ::xml_schema::UnsignedInt CurrentYAxisType;
        typedef ::xsd::cxx::tree::traits< CurrentYAxisType, char > CurrentYAxisTraits;

        const CurrentYAxisType&
        currentYAxis () const;

        CurrentYAxisType&
        currentYAxis ();

        void
        currentYAxis (const CurrentYAxisType& x);

        // Constructors.
        //
        Solver (const NextParameterHandleType&,
                const NextEntityHandleType&,
                const NextConstraintHandleType&,
                const CurrentGroupType&,
                const CurrentWorkPlaneType&,
                const CurrentXAxisType&,
                const CurrentYAxisType&);

        Solver (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        Solver (const Solver& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual Solver*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Solver&
        operator= (const Solver& x);

        virtual 
        ~Solver ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ParametersSequence parameters_;
        EntitiesSequence entities_;
        ConstraintsSequence constraints_;
        ::xsd::cxx::tree::one< NextParameterHandleType > nextParameterHandle_;
        ::xsd::cxx::tree::one< NextEntityHandleType > nextEntityHandle_;
        ::xsd::cxx::tree::one< NextConstraintHandleType > nextConstraintHandle_;
        ::xsd::cxx::tree::one< CurrentGroupType > currentGroup_;
        ::xsd::cxx::tree::one< CurrentWorkPlaneType > currentWorkPlane_;
        ::xsd::cxx::tree::one< CurrentXAxisType > currentXAxis_;
        ::xsd::cxx::tree::one< CurrentYAxisType > currentYAxis_;
      };

      class VisualMapRecord: public ::xml_schema::Type
      {
        public:
        // handle
        //
        typedef ::xml_schema::UnsignedInt HandleType;
        typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

        const HandleType&
        handle () const;

        HandleType&
        handle ();

        void
        handle (const HandleType& x);

        // id
        //
        typedef ::xml_schema::String IdType;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdType&
        id () const;

        IdType&
        id ();

        void
        id (const IdType& x);

        void
        id (::std::unique_ptr< IdType > p);

        // location
        //
        typedef ::prj::srl::spt::Vec3d LocationType;
        typedef ::xsd::cxx::tree::traits< LocationType, char > LocationTraits;

        const LocationType&
        location () const;

        LocationType&
        location ();

        void
        location (const LocationType& x);

        void
        location (::std::unique_ptr< LocationType > p);

        // construction
        //
        typedef ::xml_schema::Boolean ConstructionType;
        typedef ::xsd::cxx::tree::traits< ConstructionType, char > ConstructionTraits;

        const ConstructionType&
        construction () const;

        ConstructionType&
        construction ();

        void
        construction (const ConstructionType& x);

        // Constructors.
        //
        VisualMapRecord (const HandleType&,
                         const IdType&,
                         const LocationType&,
                         const ConstructionType&);

        VisualMapRecord (const HandleType&,
                         const IdType&,
                         ::std::unique_ptr< LocationType >,
                         const ConstructionType&);

        VisualMapRecord (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

        VisualMapRecord (const VisualMapRecord& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

        virtual VisualMapRecord*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        VisualMapRecord&
        operator= (const VisualMapRecord& x);

        virtual 
        ~VisualMapRecord ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< HandleType > handle_;
        ::xsd::cxx::tree::one< IdType > id_;
        ::xsd::cxx::tree::one< LocationType > location_;
        ::xsd::cxx::tree::one< ConstructionType > construction_;
      };

      class Visual: public ::xml_schema::Type
      {
        public:
        // autoSize
        //
        typedef ::xml_schema::Boolean AutoSizeType;
        typedef ::xsd::cxx::tree::traits< AutoSizeType, char > AutoSizeTraits;

        const AutoSizeType&
        autoSize () const;

        AutoSizeType&
        autoSize ();

        void
        autoSize (const AutoSizeType& x);

        // size
        //
        typedef ::xml_schema::Double SizeType;
        typedef ::xsd::cxx::tree::traits< SizeType, char, ::xsd::cxx::tree::schema_type::double_ > SizeTraits;

        const SizeType&
        size () const;

        SizeType&
        size ();

        void
        size (const SizeType& x);

        // entityMap
        //
        typedef ::prj::srl::skts::VisualMapRecord EntityMapType;
        typedef ::xsd::cxx::tree::sequence< EntityMapType > EntityMapSequence;
        typedef EntityMapSequence::iterator EntityMapIterator;
        typedef EntityMapSequence::const_iterator EntityMapConstIterator;
        typedef ::xsd::cxx::tree::traits< EntityMapType, char > EntityMapTraits;

        const EntityMapSequence&
        entityMap () const;

        EntityMapSequence&
        entityMap ();

        void
        entityMap (const EntityMapSequence& s);

        // constraintMap
        //
        typedef ::prj::srl::skts::VisualMapRecord ConstraintMapType;
        typedef ::xsd::cxx::tree::sequence< ConstraintMapType > ConstraintMapSequence;
        typedef ConstraintMapSequence::iterator ConstraintMapIterator;
        typedef ConstraintMapSequence::const_iterator ConstraintMapConstIterator;
        typedef ::xsd::cxx::tree::traits< ConstraintMapType, char > ConstraintMapTraits;

        const ConstraintMapSequence&
        constraintMap () const;

        ConstraintMapSequence&
        constraintMap ();

        void
        constraintMap (const ConstraintMapSequence& s);

        // Constructors.
        //
        Visual (const AutoSizeType&,
                const SizeType&);

        Visual (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        Visual (const Visual& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual Visual*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Visual&
        operator= (const Visual& x);

        virtual 
        ~Visual ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< AutoSizeType > autoSize_;
        ::xsd::cxx::tree::one< SizeType > size_;
        EntityMapSequence entityMap_;
        ConstraintMapSequence constraintMap_;
      };

      class HandleParameterPair: public ::xml_schema::Type
      {
        public:
        // handle
        //
        typedef ::xml_schema::UnsignedInt HandleType;
        typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

        const HandleType&
        handle () const;

        HandleType&
        handle ();

        void
        handle (const HandleType& x);

        // parameter
        //
        typedef ::prj::srl::spt::Parameter ParameterType;
        typedef ::xsd::cxx::tree::traits< ParameterType, char > ParameterTraits;

        const ParameterType&
        parameter () const;

        ParameterType&
        parameter ();

        void
        parameter (const ParameterType& x);

        void
        parameter (::std::unique_ptr< ParameterType > p);

        // Constructors.
        //
        HandleParameterPair (const HandleType&,
                             const ParameterType&);

        HandleParameterPair (const HandleType&,
                             ::std::unique_ptr< ParameterType >);

        HandleParameterPair (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

        HandleParameterPair (const HandleParameterPair& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

        virtual HandleParameterPair*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        HandleParameterPair&
        operator= (const HandleParameterPair& x);

        virtual 
        ~HandleParameterPair ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< HandleType > handle_;
        ::xsd::cxx::tree::one< ParameterType > parameter_;
      };

      class Sketch: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // solver
        //
        typedef ::prj::srl::skts::Solver SolverType;
        typedef ::xsd::cxx::tree::traits< SolverType, char > SolverTraits;

        const SolverType&
        solver () const;

        SolverType&
        solver ();

        void
        solver (const SolverType& x);

        void
        solver (::std::unique_ptr< SolverType > p);

        // visual
        //
        typedef ::prj::srl::skts::Visual VisualType;
        typedef ::xsd::cxx::tree::traits< VisualType, char > VisualTraits;

        const VisualType&
        visual () const;

        VisualType&
        visual ();

        void
        visual (const VisualType& x);

        void
        visual (::std::unique_ptr< VisualType > p);

        // csys
        //
        typedef ::prj::srl::spt::Parameter CsysType;
        typedef ::xsd::cxx::tree::traits< CsysType, char > CsysTraits;

        const CsysType&
        csys () const;

        CsysType&
        csys ();

        void
        csys (const CsysType& x);

        void
        csys (::std::unique_ptr< CsysType > p);

        // csysDragger
        //
        typedef ::prj::srl::spt::CSysDragger CsysDraggerType;
        typedef ::xsd::cxx::tree::traits< CsysDraggerType, char > CsysDraggerTraits;

        const CsysDraggerType&
        csysDragger () const;

        CsysDraggerType&
        csysDragger ();

        void
        csysDragger (const CsysDraggerType& x);

        void
        csysDragger (::std::unique_ptr< CsysDraggerType > p);

        // wireIds
        //
        typedef ::xml_schema::String WireIdsType;
        typedef ::xsd::cxx::tree::sequence< WireIdsType > WireIdsSequence;
        typedef WireIdsSequence::iterator WireIdsIterator;
        typedef WireIdsSequence::const_iterator WireIdsConstIterator;
        typedef ::xsd::cxx::tree::traits< WireIdsType, char > WireIdsTraits;

        const WireIdsSequence&
        wireIds () const;

        WireIdsSequence&
        wireIds ();

        void
        wireIds (const WireIdsSequence& s);

        // handleParameterPairs
        //
        typedef ::prj::srl::skts::HandleParameterPair HandleParameterPairsType;
        typedef ::xsd::cxx::tree::sequence< HandleParameterPairsType > HandleParameterPairsSequence;
        typedef HandleParameterPairsSequence::iterator HandleParameterPairsIterator;
        typedef HandleParameterPairsSequence::const_iterator HandleParameterPairsConstIterator;
        typedef ::xsd::cxx::tree::traits< HandleParameterPairsType, char > HandleParameterPairsTraits;

        const HandleParameterPairsSequence&
        handleParameterPairs () const;

        HandleParameterPairsSequence&
        handleParameterPairs ();

        void
        handleParameterPairs (const HandleParameterPairsSequence& s);

        // Constructors.
        //
        Sketch (const BaseType&,
                const SeerShapeType&,
                const SolverType&,
                const VisualType&,
                const CsysType&,
                const CsysDraggerType&);

        Sketch (::std::unique_ptr< BaseType >,
                ::std::unique_ptr< SeerShapeType >,
                ::std::unique_ptr< SolverType >,
                ::std::unique_ptr< VisualType >,
                ::std::unique_ptr< CsysType >,
                ::std::unique_ptr< CsysDraggerType >);

        Sketch (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        Sketch (const Sketch& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual Sketch*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Sketch&
        operator= (const Sketch& x);

        virtual 
        ~Sketch ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< SolverType > solver_;
        ::xsd::cxx::tree::one< VisualType > visual_;
        ::xsd::cxx::tree::one< CsysType > csys_;
        ::xsd::cxx::tree::one< CsysDraggerType > csysDragger_;
        WireIdsSequence wireIds_;
        HandleParameterPairsSequence handleParameterPairs_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace skts
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::skts::Sketch >
      sketch (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace skts
    {
      void
      operator<< (::xercesc::DOMElement&, const SSParameter&);

      void
      operator<< (::xercesc::DOMElement&, const SSEntity&);

      void
      operator<< (::xercesc::DOMElement&, const SSConstraint&);

      void
      operator<< (::xercesc::DOMElement&, const Solver&);

      void
      operator<< (::xercesc::DOMElement&, const VisualMapRecord&);

      void
      operator<< (::xercesc::DOMElement&, const Visual&);

      void
      operator<< (::xercesc::DOMElement&, const HandleParameterPair&);

      void
      operator<< (::xercesc::DOMElement&, const Sketch&);

      // Serialize to std::ostream.
      //

      void
      sketch (::std::ostream& os,
              const ::prj::srl::skts::Sketch& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      sketch (::std::ostream& os,
              const ::prj::srl::skts::Sketch& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      sketch (::std::ostream& os,
              const ::prj::srl::skts::Sketch& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      sketch (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::skts::Sketch& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      sketch (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::skts::Sketch& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      sketch (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::skts::Sketch& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      sketch (::xercesc::DOMDocument& d,
              const ::prj::srl::skts::Sketch& x,
              ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      sketch (const ::prj::srl::skts::Sketch& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_SKTS_PRJSRLSKTSSKETCH_H
