// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_FLS_PRJSRLFLSFILL_H
#define PRJ_SRL_FLS_PRJSRLFLSFILL_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace fls
    {
      class Boundary;
      class Fill;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptpick.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace fls
    {
      class Boundary: public ::xml_schema::Type
      {
        public:
        // edgePick
        //
        typedef ::prj::srl::spt::Parameter EdgePickType;
        typedef ::xsd::cxx::tree::traits< EdgePickType, char > EdgePickTraits;

        const EdgePickType&
        edgePick () const;

        EdgePickType&
        edgePick ();

        void
        edgePick (const EdgePickType& x);

        void
        edgePick (::std::unique_ptr< EdgePickType > p);

        // facePick
        //
        typedef ::prj::srl::spt::Parameter FacePickType;
        typedef ::xsd::cxx::tree::traits< FacePickType, char > FacePickTraits;

        const FacePickType&
        facePick () const;

        FacePickType&
        facePick ();

        void
        facePick (const FacePickType& x);

        void
        facePick (::std::unique_ptr< FacePickType > p);

        // continuity
        //
        typedef ::prj::srl::spt::Parameter ContinuityType;
        typedef ::xsd::cxx::tree::traits< ContinuityType, char > ContinuityTraits;

        const ContinuityType&
        continuity () const;

        ContinuityType&
        continuity ();

        void
        continuity (const ContinuityType& x);

        void
        continuity (::std::unique_ptr< ContinuityType > p);

        // continuityLabel
        //
        typedef ::prj::srl::spt::PLabel ContinuityLabelType;
        typedef ::xsd::cxx::tree::traits< ContinuityLabelType, char > ContinuityLabelTraits;

        const ContinuityLabelType&
        continuityLabel () const;

        ContinuityLabelType&
        continuityLabel ();

        void
        continuityLabel (const ContinuityLabelType& x);

        void
        continuityLabel (::std::unique_ptr< ContinuityLabelType > p);

        // Constructors.
        //
        Boundary (const EdgePickType&,
                  const FacePickType&,
                  const ContinuityType&,
                  const ContinuityLabelType&);

        Boundary (::std::unique_ptr< EdgePickType >,
                  ::std::unique_ptr< FacePickType >,
                  ::std::unique_ptr< ContinuityType >,
                  ::std::unique_ptr< ContinuityLabelType >);

        Boundary (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        Boundary (const Boundary& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        virtual Boundary*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Boundary&
        operator= (const Boundary& x);

        virtual 
        ~Boundary ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< EdgePickType > edgePick_;
        ::xsd::cxx::tree::one< FacePickType > facePick_;
        ::xsd::cxx::tree::one< ContinuityType > continuity_;
        ::xsd::cxx::tree::one< ContinuityLabelType > continuityLabel_;
      };

      class Fill: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // initialPick
        //
        typedef ::prj::srl::spt::Parameter InitialPickType;
        typedef ::xsd::cxx::tree::traits< InitialPickType, char > InitialPickTraits;

        const InitialPickType&
        initialPick () const;

        InitialPickType&
        initialPick ();

        void
        initialPick (const InitialPickType& x);

        void
        initialPick (::std::unique_ptr< InitialPickType > p);

        // internalPicks
        //
        typedef ::prj::srl::spt::Parameter InternalPicksType;
        typedef ::xsd::cxx::tree::traits< InternalPicksType, char > InternalPicksTraits;

        const InternalPicksType&
        internalPicks () const;

        InternalPicksType&
        internalPicks ();

        void
        internalPicks (const InternalPicksType& x);

        void
        internalPicks (::std::unique_ptr< InternalPicksType > p);

        // boundaries
        //
        typedef ::prj::srl::fls::Boundary BoundariesType;
        typedef ::xsd::cxx::tree::sequence< BoundariesType > BoundariesSequence;
        typedef BoundariesSequence::iterator BoundariesIterator;
        typedef BoundariesSequence::const_iterator BoundariesConstIterator;
        typedef ::xsd::cxx::tree::traits< BoundariesType, char > BoundariesTraits;

        const BoundariesSequence&
        boundaries () const;

        BoundariesSequence&
        boundaries ();

        void
        boundaries (const BoundariesSequence& s);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // wireId
        //
        typedef ::xml_schema::String WireIdType;
        typedef ::xsd::cxx::tree::traits< WireIdType, char > WireIdTraits;

        const WireIdType&
        wireId () const;

        WireIdType&
        wireId ();

        void
        wireId (const WireIdType& x);

        void
        wireId (::std::unique_ptr< WireIdType > p);

        // faceId
        //
        typedef ::xml_schema::String FaceIdType;
        typedef ::xsd::cxx::tree::traits< FaceIdType, char > FaceIdTraits;

        const FaceIdType&
        faceId () const;

        FaceIdType&
        faceId ();

        void
        faceId (const FaceIdType& x);

        void
        faceId (::std::unique_ptr< FaceIdType > p);

        // Constructors.
        //
        Fill (const BaseType&,
              const InitialPickType&,
              const InternalPicksType&,
              const SeerShapeType&,
              const WireIdType&,
              const FaceIdType&);

        Fill (::std::unique_ptr< BaseType >,
              ::std::unique_ptr< InitialPickType >,
              ::std::unique_ptr< InternalPicksType >,
              ::std::unique_ptr< SeerShapeType >,
              const WireIdType&,
              const FaceIdType&);

        Fill (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        Fill (const Fill& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        virtual Fill*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Fill&
        operator= (const Fill& x);

        virtual 
        ~Fill ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< InitialPickType > initialPick_;
        ::xsd::cxx::tree::one< InternalPicksType > internalPicks_;
        BoundariesSequence boundaries_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< WireIdType > wireId_;
        ::xsd::cxx::tree::one< FaceIdType > faceId_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace fls
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::fls::Fill >
      fill (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace fls
    {
      void
      operator<< (::xercesc::DOMElement&, const Boundary&);

      void
      operator<< (::xercesc::DOMElement&, const Fill&);

      // Serialize to std::ostream.
      //

      void
      fill (::std::ostream& os,
            const ::prj::srl::fls::Fill& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      void
      fill (::std::ostream& os,
            const ::prj::srl::fls::Fill& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      void
      fill (::std::ostream& os,
            const ::prj::srl::fls::Fill& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      fill (::xercesc::XMLFormatTarget& ft,
            const ::prj::srl::fls::Fill& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      void
      fill (::xercesc::XMLFormatTarget& ft,
            const ::prj::srl::fls::Fill& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      void
      fill (::xercesc::XMLFormatTarget& ft,
            const ::prj::srl::fls::Fill& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      fill (::xercesc::DOMDocument& d,
            const ::prj::srl::fls::Fill& x,
            ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      fill (const ::prj::srl::fls::Fill& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_FLS_PRJSRLFLSFILL_H
