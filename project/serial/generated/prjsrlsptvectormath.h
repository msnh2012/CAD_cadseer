// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_SPT_PRJSRLSPTVECTORMATH_H
#define PRJ_SRL_SPT_PRJSRLSPTVECTORMATH_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class Vec3d;
      class Quat;
      class Matrixd;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class Vec3d: public ::xml_schema::Type
      {
        public:
        // x
        //
        typedef ::xml_schema::Double XType;
        typedef ::xsd::cxx::tree::traits< XType, char, ::xsd::cxx::tree::schema_type::double_ > XTraits;

        const XType&
        x () const;

        XType&
        x ();

        void
        x (const XType& x);

        static XType
        x_default_value ();

        // y
        //
        typedef ::xml_schema::Double YType;
        typedef ::xsd::cxx::tree::traits< YType, char, ::xsd::cxx::tree::schema_type::double_ > YTraits;

        const YType&
        y () const;

        YType&
        y ();

        void
        y (const YType& x);

        static YType
        y_default_value ();

        // z
        //
        typedef ::xml_schema::Double ZType;
        typedef ::xsd::cxx::tree::traits< ZType, char, ::xsd::cxx::tree::schema_type::double_ > ZTraits;

        const ZType&
        z () const;

        ZType&
        z ();

        void
        z (const ZType& x);

        static ZType
        z_default_value ();

        // Constructors.
        //
        Vec3d (const XType&,
               const YType&,
               const ZType&);

        Vec3d (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        Vec3d (const Vec3d& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        virtual Vec3d*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Vec3d&
        operator= (const Vec3d& x);

        virtual 
        ~Vec3d ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< XType > x_;
        ::xsd::cxx::tree::one< YType > y_;
        ::xsd::cxx::tree::one< ZType > z_;
      };

      class Quat: public ::xml_schema::Type
      {
        public:
        // x
        //
        typedef ::xml_schema::Double XType;
        typedef ::xsd::cxx::tree::traits< XType, char, ::xsd::cxx::tree::schema_type::double_ > XTraits;

        const XType&
        x () const;

        XType&
        x ();

        void
        x (const XType& x);

        static XType
        x_default_value ();

        // y
        //
        typedef ::xml_schema::Double YType;
        typedef ::xsd::cxx::tree::traits< YType, char, ::xsd::cxx::tree::schema_type::double_ > YTraits;

        const YType&
        y () const;

        YType&
        y ();

        void
        y (const YType& x);

        static YType
        y_default_value ();

        // z
        //
        typedef ::xml_schema::Double ZType;
        typedef ::xsd::cxx::tree::traits< ZType, char, ::xsd::cxx::tree::schema_type::double_ > ZTraits;

        const ZType&
        z () const;

        ZType&
        z ();

        void
        z (const ZType& x);

        static ZType
        z_default_value ();

        // w
        //
        typedef ::xml_schema::Double WType;
        typedef ::xsd::cxx::tree::traits< WType, char, ::xsd::cxx::tree::schema_type::double_ > WTraits;

        const WType&
        w () const;

        WType&
        w ();

        void
        w (const WType& x);

        static WType
        w_default_value ();

        // Constructors.
        //
        Quat (const XType&,
              const YType&,
              const ZType&,
              const WType&);

        Quat (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        Quat (const Quat& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        virtual Quat*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Quat&
        operator= (const Quat& x);

        virtual 
        ~Quat ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< XType > x_;
        ::xsd::cxx::tree::one< YType > y_;
        ::xsd::cxx::tree::one< ZType > z_;
        ::xsd::cxx::tree::one< WType > w_;
      };

      class Matrixd: public ::xml_schema::Type
      {
        public:
        // i0j0
        //
        typedef ::xml_schema::Double I0j0Type;
        typedef ::xsd::cxx::tree::traits< I0j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j0Traits;

        const I0j0Type&
        i0j0 () const;

        I0j0Type&
        i0j0 ();

        void
        i0j0 (const I0j0Type& x);

        static I0j0Type
        i0j0_default_value ();

        // i0j1
        //
        typedef ::xml_schema::Double I0j1Type;
        typedef ::xsd::cxx::tree::traits< I0j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j1Traits;

        const I0j1Type&
        i0j1 () const;

        I0j1Type&
        i0j1 ();

        void
        i0j1 (const I0j1Type& x);

        static I0j1Type
        i0j1_default_value ();

        // i0j2
        //
        typedef ::xml_schema::Double I0j2Type;
        typedef ::xsd::cxx::tree::traits< I0j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j2Traits;

        const I0j2Type&
        i0j2 () const;

        I0j2Type&
        i0j2 ();

        void
        i0j2 (const I0j2Type& x);

        static I0j2Type
        i0j2_default_value ();

        // i0j3
        //
        typedef ::xml_schema::Double I0j3Type;
        typedef ::xsd::cxx::tree::traits< I0j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j3Traits;

        const I0j3Type&
        i0j3 () const;

        I0j3Type&
        i0j3 ();

        void
        i0j3 (const I0j3Type& x);

        static I0j3Type
        i0j3_default_value ();

        // i1j0
        //
        typedef ::xml_schema::Double I1j0Type;
        typedef ::xsd::cxx::tree::traits< I1j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j0Traits;

        const I1j0Type&
        i1j0 () const;

        I1j0Type&
        i1j0 ();

        void
        i1j0 (const I1j0Type& x);

        static I1j0Type
        i1j0_default_value ();

        // i1j1
        //
        typedef ::xml_schema::Double I1j1Type;
        typedef ::xsd::cxx::tree::traits< I1j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j1Traits;

        const I1j1Type&
        i1j1 () const;

        I1j1Type&
        i1j1 ();

        void
        i1j1 (const I1j1Type& x);

        static I1j1Type
        i1j1_default_value ();

        // i1j2
        //
        typedef ::xml_schema::Double I1j2Type;
        typedef ::xsd::cxx::tree::traits< I1j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j2Traits;

        const I1j2Type&
        i1j2 () const;

        I1j2Type&
        i1j2 ();

        void
        i1j2 (const I1j2Type& x);

        static I1j2Type
        i1j2_default_value ();

        // i1j3
        //
        typedef ::xml_schema::Double I1j3Type;
        typedef ::xsd::cxx::tree::traits< I1j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j3Traits;

        const I1j3Type&
        i1j3 () const;

        I1j3Type&
        i1j3 ();

        void
        i1j3 (const I1j3Type& x);

        static I1j3Type
        i1j3_default_value ();

        // i2j0
        //
        typedef ::xml_schema::Double I2j0Type;
        typedef ::xsd::cxx::tree::traits< I2j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j0Traits;

        const I2j0Type&
        i2j0 () const;

        I2j0Type&
        i2j0 ();

        void
        i2j0 (const I2j0Type& x);

        static I2j0Type
        i2j0_default_value ();

        // i2j1
        //
        typedef ::xml_schema::Double I2j1Type;
        typedef ::xsd::cxx::tree::traits< I2j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j1Traits;

        const I2j1Type&
        i2j1 () const;

        I2j1Type&
        i2j1 ();

        void
        i2j1 (const I2j1Type& x);

        static I2j1Type
        i2j1_default_value ();

        // i2j2
        //
        typedef ::xml_schema::Double I2j2Type;
        typedef ::xsd::cxx::tree::traits< I2j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j2Traits;

        const I2j2Type&
        i2j2 () const;

        I2j2Type&
        i2j2 ();

        void
        i2j2 (const I2j2Type& x);

        static I2j2Type
        i2j2_default_value ();

        // i2j3
        //
        typedef ::xml_schema::Double I2j3Type;
        typedef ::xsd::cxx::tree::traits< I2j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j3Traits;

        const I2j3Type&
        i2j3 () const;

        I2j3Type&
        i2j3 ();

        void
        i2j3 (const I2j3Type& x);

        static I2j3Type
        i2j3_default_value ();

        // i3j0
        //
        typedef ::xml_schema::Double I3j0Type;
        typedef ::xsd::cxx::tree::traits< I3j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j0Traits;

        const I3j0Type&
        i3j0 () const;

        I3j0Type&
        i3j0 ();

        void
        i3j0 (const I3j0Type& x);

        static I3j0Type
        i3j0_default_value ();

        // i3j1
        //
        typedef ::xml_schema::Double I3j1Type;
        typedef ::xsd::cxx::tree::traits< I3j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j1Traits;

        const I3j1Type&
        i3j1 () const;

        I3j1Type&
        i3j1 ();

        void
        i3j1 (const I3j1Type& x);

        static I3j1Type
        i3j1_default_value ();

        // i3j2
        //
        typedef ::xml_schema::Double I3j2Type;
        typedef ::xsd::cxx::tree::traits< I3j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j2Traits;

        const I3j2Type&
        i3j2 () const;

        I3j2Type&
        i3j2 ();

        void
        i3j2 (const I3j2Type& x);

        static I3j2Type
        i3j2_default_value ();

        // i3j3
        //
        typedef ::xml_schema::Double I3j3Type;
        typedef ::xsd::cxx::tree::traits< I3j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j3Traits;

        const I3j3Type&
        i3j3 () const;

        I3j3Type&
        i3j3 ();

        void
        i3j3 (const I3j3Type& x);

        static I3j3Type
        i3j3_default_value ();

        // Constructors.
        //
        Matrixd (const I0j0Type&,
                 const I0j1Type&,
                 const I0j2Type&,
                 const I0j3Type&,
                 const I1j0Type&,
                 const I1j1Type&,
                 const I1j2Type&,
                 const I1j3Type&,
                 const I2j0Type&,
                 const I2j1Type&,
                 const I2j2Type&,
                 const I2j3Type&,
                 const I3j0Type&,
                 const I3j1Type&,
                 const I3j2Type&,
                 const I3j3Type&);

        Matrixd (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        Matrixd (const Matrixd& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

        virtual Matrixd*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Matrixd&
        operator= (const Matrixd& x);

        virtual 
        ~Matrixd ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< I0j0Type > i0j0_;
        ::xsd::cxx::tree::one< I0j1Type > i0j1_;
        ::xsd::cxx::tree::one< I0j2Type > i0j2_;
        ::xsd::cxx::tree::one< I0j3Type > i0j3_;
        ::xsd::cxx::tree::one< I1j0Type > i1j0_;
        ::xsd::cxx::tree::one< I1j1Type > i1j1_;
        ::xsd::cxx::tree::one< I1j2Type > i1j2_;
        ::xsd::cxx::tree::one< I1j3Type > i1j3_;
        ::xsd::cxx::tree::one< I2j0Type > i2j0_;
        ::xsd::cxx::tree::one< I2j1Type > i2j1_;
        ::xsd::cxx::tree::one< I2j2Type > i2j2_;
        ::xsd::cxx::tree::one< I2j3Type > i2j3_;
        ::xsd::cxx::tree::one< I3j0Type > i3j0_;
        ::xsd::cxx::tree::one< I3j1Type > i3j1_;
        ::xsd::cxx::tree::one< I3j2Type > i3j2_;
        ::xsd::cxx::tree::one< I3j3Type > i3j3_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement&, const Vec3d&);

      void
      operator<< (::xercesc::DOMElement&, const Quat&);

      void
      operator<< (::xercesc::DOMElement&, const Matrixd&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_SPT_PRJSRLSPTVECTORMATH_H
