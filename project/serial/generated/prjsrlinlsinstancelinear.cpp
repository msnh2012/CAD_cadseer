// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlinlsinstancelinear.h"

namespace prj
{
  namespace srl
  {
    namespace inls
    {
      // InstanceLinear
      // 

      const InstanceLinear::BaseType& InstanceLinear::
      base () const
      {
        return this->base_.get ();
      }

      InstanceLinear::BaseType& InstanceLinear::
      base ()
      {
        return this->base_.get ();
      }

      void InstanceLinear::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void InstanceLinear::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const InstanceLinear::SourceType& InstanceLinear::
      source () const
      {
        return this->source_.get ();
      }

      InstanceLinear::SourceType& InstanceLinear::
      source ()
      {
        return this->source_.get ();
      }

      void InstanceLinear::
      source (const SourceType& x)
      {
        this->source_.set (x);
      }

      void InstanceLinear::
      source (::std::unique_ptr< SourceType > x)
      {
        this->source_.set (std::move (x));
      }

      const InstanceLinear::CsysType& InstanceLinear::
      csys () const
      {
        return this->csys_.get ();
      }

      InstanceLinear::CsysType& InstanceLinear::
      csys ()
      {
        return this->csys_.get ();
      }

      void InstanceLinear::
      csys (const CsysType& x)
      {
        this->csys_.set (x);
      }

      void InstanceLinear::
      csys (::std::unique_ptr< CsysType > x)
      {
        this->csys_.set (std::move (x));
      }

      const InstanceLinear::XOffsetType& InstanceLinear::
      xOffset () const
      {
        return this->xOffset_.get ();
      }

      InstanceLinear::XOffsetType& InstanceLinear::
      xOffset ()
      {
        return this->xOffset_.get ();
      }

      void InstanceLinear::
      xOffset (const XOffsetType& x)
      {
        this->xOffset_.set (x);
      }

      void InstanceLinear::
      xOffset (::std::unique_ptr< XOffsetType > x)
      {
        this->xOffset_.set (std::move (x));
      }

      const InstanceLinear::YOffsetType& InstanceLinear::
      yOffset () const
      {
        return this->yOffset_.get ();
      }

      InstanceLinear::YOffsetType& InstanceLinear::
      yOffset ()
      {
        return this->yOffset_.get ();
      }

      void InstanceLinear::
      yOffset (const YOffsetType& x)
      {
        this->yOffset_.set (x);
      }

      void InstanceLinear::
      yOffset (::std::unique_ptr< YOffsetType > x)
      {
        this->yOffset_.set (std::move (x));
      }

      const InstanceLinear::ZOffsetType& InstanceLinear::
      zOffset () const
      {
        return this->zOffset_.get ();
      }

      InstanceLinear::ZOffsetType& InstanceLinear::
      zOffset ()
      {
        return this->zOffset_.get ();
      }

      void InstanceLinear::
      zOffset (const ZOffsetType& x)
      {
        this->zOffset_.set (x);
      }

      void InstanceLinear::
      zOffset (::std::unique_ptr< ZOffsetType > x)
      {
        this->zOffset_.set (std::move (x));
      }

      const InstanceLinear::XCountType& InstanceLinear::
      xCount () const
      {
        return this->xCount_.get ();
      }

      InstanceLinear::XCountType& InstanceLinear::
      xCount ()
      {
        return this->xCount_.get ();
      }

      void InstanceLinear::
      xCount (const XCountType& x)
      {
        this->xCount_.set (x);
      }

      void InstanceLinear::
      xCount (::std::unique_ptr< XCountType > x)
      {
        this->xCount_.set (std::move (x));
      }

      const InstanceLinear::YCountType& InstanceLinear::
      yCount () const
      {
        return this->yCount_.get ();
      }

      InstanceLinear::YCountType& InstanceLinear::
      yCount ()
      {
        return this->yCount_.get ();
      }

      void InstanceLinear::
      yCount (const YCountType& x)
      {
        this->yCount_.set (x);
      }

      void InstanceLinear::
      yCount (::std::unique_ptr< YCountType > x)
      {
        this->yCount_.set (std::move (x));
      }

      const InstanceLinear::ZCountType& InstanceLinear::
      zCount () const
      {
        return this->zCount_.get ();
      }

      InstanceLinear::ZCountType& InstanceLinear::
      zCount ()
      {
        return this->zCount_.get ();
      }

      void InstanceLinear::
      zCount (const ZCountType& x)
      {
        this->zCount_.set (x);
      }

      void InstanceLinear::
      zCount (::std::unique_ptr< ZCountType > x)
      {
        this->zCount_.set (std::move (x));
      }

      const InstanceLinear::IncludeSourceType& InstanceLinear::
      includeSource () const
      {
        return this->includeSource_.get ();
      }

      InstanceLinear::IncludeSourceType& InstanceLinear::
      includeSource ()
      {
        return this->includeSource_.get ();
      }

      void InstanceLinear::
      includeSource (const IncludeSourceType& x)
      {
        this->includeSource_.set (x);
      }

      void InstanceLinear::
      includeSource (::std::unique_ptr< IncludeSourceType > x)
      {
        this->includeSource_.set (std::move (x));
      }

      const InstanceLinear::SeerShapeType& InstanceLinear::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      InstanceLinear::SeerShapeType& InstanceLinear::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void InstanceLinear::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void InstanceLinear::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const InstanceLinear::InstanceMapsType& InstanceLinear::
      instanceMaps () const
      {
        return this->instanceMaps_.get ();
      }

      InstanceLinear::InstanceMapsType& InstanceLinear::
      instanceMaps ()
      {
        return this->instanceMaps_.get ();
      }

      void InstanceLinear::
      instanceMaps (const InstanceMapsType& x)
      {
        this->instanceMaps_.set (x);
      }

      void InstanceLinear::
      instanceMaps (::std::unique_ptr< InstanceMapsType > x)
      {
        this->instanceMaps_.set (std::move (x));
      }

      const InstanceLinear::CsysDraggerType& InstanceLinear::
      csysDragger () const
      {
        return this->csysDragger_.get ();
      }

      InstanceLinear::CsysDraggerType& InstanceLinear::
      csysDragger ()
      {
        return this->csysDragger_.get ();
      }

      void InstanceLinear::
      csysDragger (const CsysDraggerType& x)
      {
        this->csysDragger_.set (x);
      }

      void InstanceLinear::
      csysDragger (::std::unique_ptr< CsysDraggerType > x)
      {
        this->csysDragger_.set (std::move (x));
      }

      const InstanceLinear::XOffsetLabelType& InstanceLinear::
      xOffsetLabel () const
      {
        return this->xOffsetLabel_.get ();
      }

      InstanceLinear::XOffsetLabelType& InstanceLinear::
      xOffsetLabel ()
      {
        return this->xOffsetLabel_.get ();
      }

      void InstanceLinear::
      xOffsetLabel (const XOffsetLabelType& x)
      {
        this->xOffsetLabel_.set (x);
      }

      void InstanceLinear::
      xOffsetLabel (::std::unique_ptr< XOffsetLabelType > x)
      {
        this->xOffsetLabel_.set (std::move (x));
      }

      const InstanceLinear::YOffsetLabelType& InstanceLinear::
      yOffsetLabel () const
      {
        return this->yOffsetLabel_.get ();
      }

      InstanceLinear::YOffsetLabelType& InstanceLinear::
      yOffsetLabel ()
      {
        return this->yOffsetLabel_.get ();
      }

      void InstanceLinear::
      yOffsetLabel (const YOffsetLabelType& x)
      {
        this->yOffsetLabel_.set (x);
      }

      void InstanceLinear::
      yOffsetLabel (::std::unique_ptr< YOffsetLabelType > x)
      {
        this->yOffsetLabel_.set (std::move (x));
      }

      const InstanceLinear::ZOffsetLabelType& InstanceLinear::
      zOffsetLabel () const
      {
        return this->zOffsetLabel_.get ();
      }

      InstanceLinear::ZOffsetLabelType& InstanceLinear::
      zOffsetLabel ()
      {
        return this->zOffsetLabel_.get ();
      }

      void InstanceLinear::
      zOffsetLabel (const ZOffsetLabelType& x)
      {
        this->zOffsetLabel_.set (x);
      }

      void InstanceLinear::
      zOffsetLabel (::std::unique_ptr< ZOffsetLabelType > x)
      {
        this->zOffsetLabel_.set (std::move (x));
      }

      const InstanceLinear::XCountLabelType& InstanceLinear::
      xCountLabel () const
      {
        return this->xCountLabel_.get ();
      }

      InstanceLinear::XCountLabelType& InstanceLinear::
      xCountLabel ()
      {
        return this->xCountLabel_.get ();
      }

      void InstanceLinear::
      xCountLabel (const XCountLabelType& x)
      {
        this->xCountLabel_.set (x);
      }

      void InstanceLinear::
      xCountLabel (::std::unique_ptr< XCountLabelType > x)
      {
        this->xCountLabel_.set (std::move (x));
      }

      const InstanceLinear::YCountLabelType& InstanceLinear::
      yCountLabel () const
      {
        return this->yCountLabel_.get ();
      }

      InstanceLinear::YCountLabelType& InstanceLinear::
      yCountLabel ()
      {
        return this->yCountLabel_.get ();
      }

      void InstanceLinear::
      yCountLabel (const YCountLabelType& x)
      {
        this->yCountLabel_.set (x);
      }

      void InstanceLinear::
      yCountLabel (::std::unique_ptr< YCountLabelType > x)
      {
        this->yCountLabel_.set (std::move (x));
      }

      const InstanceLinear::ZCountLabelType& InstanceLinear::
      zCountLabel () const
      {
        return this->zCountLabel_.get ();
      }

      InstanceLinear::ZCountLabelType& InstanceLinear::
      zCountLabel ()
      {
        return this->zCountLabel_.get ();
      }

      void InstanceLinear::
      zCountLabel (const ZCountLabelType& x)
      {
        this->zCountLabel_.set (x);
      }

      void InstanceLinear::
      zCountLabel (::std::unique_ptr< ZCountLabelType > x)
      {
        this->zCountLabel_.set (std::move (x));
      }

      const InstanceLinear::IncludeSourceLabelType& InstanceLinear::
      includeSourceLabel () const
      {
        return this->includeSourceLabel_.get ();
      }

      InstanceLinear::IncludeSourceLabelType& InstanceLinear::
      includeSourceLabel ()
      {
        return this->includeSourceLabel_.get ();
      }

      void InstanceLinear::
      includeSourceLabel (const IncludeSourceLabelType& x)
      {
        this->includeSourceLabel_.set (x);
      }

      void InstanceLinear::
      includeSourceLabel (::std::unique_ptr< IncludeSourceLabelType > x)
      {
        this->includeSourceLabel_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace inls
    {
      // InstanceLinear
      //

      InstanceLinear::
      InstanceLinear (const BaseType& base,
                      const SourceType& source,
                      const CsysType& csys,
                      const XOffsetType& xOffset,
                      const YOffsetType& yOffset,
                      const ZOffsetType& zOffset,
                      const XCountType& xCount,
                      const YCountType& yCount,
                      const ZCountType& zCount,
                      const IncludeSourceType& includeSource,
                      const SeerShapeType& seerShape,
                      const InstanceMapsType& instanceMaps,
                      const CsysDraggerType& csysDragger,
                      const XOffsetLabelType& xOffsetLabel,
                      const YOffsetLabelType& yOffsetLabel,
                      const ZOffsetLabelType& zOffsetLabel,
                      const XCountLabelType& xCountLabel,
                      const YCountLabelType& yCountLabel,
                      const ZCountLabelType& zCountLabel,
                      const IncludeSourceLabelType& includeSourceLabel)
      : ::xml_schema::Type (),
        base_ (base, this),
        source_ (source, this),
        csys_ (csys, this),
        xOffset_ (xOffset, this),
        yOffset_ (yOffset, this),
        zOffset_ (zOffset, this),
        xCount_ (xCount, this),
        yCount_ (yCount, this),
        zCount_ (zCount, this),
        includeSource_ (includeSource, this),
        seerShape_ (seerShape, this),
        instanceMaps_ (instanceMaps, this),
        csysDragger_ (csysDragger, this),
        xOffsetLabel_ (xOffsetLabel, this),
        yOffsetLabel_ (yOffsetLabel, this),
        zOffsetLabel_ (zOffsetLabel, this),
        xCountLabel_ (xCountLabel, this),
        yCountLabel_ (yCountLabel, this),
        zCountLabel_ (zCountLabel, this),
        includeSourceLabel_ (includeSourceLabel, this)
      {
      }

      InstanceLinear::
      InstanceLinear (::std::unique_ptr< BaseType > base,
                      ::std::unique_ptr< SourceType > source,
                      ::std::unique_ptr< CsysType > csys,
                      ::std::unique_ptr< XOffsetType > xOffset,
                      ::std::unique_ptr< YOffsetType > yOffset,
                      ::std::unique_ptr< ZOffsetType > zOffset,
                      ::std::unique_ptr< XCountType > xCount,
                      ::std::unique_ptr< YCountType > yCount,
                      ::std::unique_ptr< ZCountType > zCount,
                      ::std::unique_ptr< IncludeSourceType > includeSource,
                      ::std::unique_ptr< SeerShapeType > seerShape,
                      ::std::unique_ptr< InstanceMapsType > instanceMaps,
                      ::std::unique_ptr< CsysDraggerType > csysDragger,
                      ::std::unique_ptr< XOffsetLabelType > xOffsetLabel,
                      ::std::unique_ptr< YOffsetLabelType > yOffsetLabel,
                      ::std::unique_ptr< ZOffsetLabelType > zOffsetLabel,
                      ::std::unique_ptr< XCountLabelType > xCountLabel,
                      ::std::unique_ptr< YCountLabelType > yCountLabel,
                      ::std::unique_ptr< ZCountLabelType > zCountLabel,
                      ::std::unique_ptr< IncludeSourceLabelType > includeSourceLabel)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        source_ (std::move (source), this),
        csys_ (std::move (csys), this),
        xOffset_ (std::move (xOffset), this),
        yOffset_ (std::move (yOffset), this),
        zOffset_ (std::move (zOffset), this),
        xCount_ (std::move (xCount), this),
        yCount_ (std::move (yCount), this),
        zCount_ (std::move (zCount), this),
        includeSource_ (std::move (includeSource), this),
        seerShape_ (std::move (seerShape), this),
        instanceMaps_ (std::move (instanceMaps), this),
        csysDragger_ (std::move (csysDragger), this),
        xOffsetLabel_ (std::move (xOffsetLabel), this),
        yOffsetLabel_ (std::move (yOffsetLabel), this),
        zOffsetLabel_ (std::move (zOffsetLabel), this),
        xCountLabel_ (std::move (xCountLabel), this),
        yCountLabel_ (std::move (yCountLabel), this),
        zCountLabel_ (std::move (zCountLabel), this),
        includeSourceLabel_ (std::move (includeSourceLabel), this)
      {
      }

      InstanceLinear::
      InstanceLinear (const InstanceLinear& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        source_ (x.source_, f, this),
        csys_ (x.csys_, f, this),
        xOffset_ (x.xOffset_, f, this),
        yOffset_ (x.yOffset_, f, this),
        zOffset_ (x.zOffset_, f, this),
        xCount_ (x.xCount_, f, this),
        yCount_ (x.yCount_, f, this),
        zCount_ (x.zCount_, f, this),
        includeSource_ (x.includeSource_, f, this),
        seerShape_ (x.seerShape_, f, this),
        instanceMaps_ (x.instanceMaps_, f, this),
        csysDragger_ (x.csysDragger_, f, this),
        xOffsetLabel_ (x.xOffsetLabel_, f, this),
        yOffsetLabel_ (x.yOffsetLabel_, f, this),
        zOffsetLabel_ (x.zOffsetLabel_, f, this),
        xCountLabel_ (x.xCountLabel_, f, this),
        yCountLabel_ (x.yCountLabel_, f, this),
        zCountLabel_ (x.zCountLabel_, f, this),
        includeSourceLabel_ (x.includeSourceLabel_, f, this)
      {
      }

      InstanceLinear::
      InstanceLinear (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        source_ (this),
        csys_ (this),
        xOffset_ (this),
        yOffset_ (this),
        zOffset_ (this),
        xCount_ (this),
        yCount_ (this),
        zCount_ (this),
        includeSource_ (this),
        seerShape_ (this),
        instanceMaps_ (this),
        csysDragger_ (this),
        xOffsetLabel_ (this),
        yOffsetLabel_ (this),
        zOffsetLabel_ (this),
        xCountLabel_ (this),
        yCountLabel_ (this),
        zCountLabel_ (this),
        includeSourceLabel_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void InstanceLinear::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // source
          //
          if (n.name () == "source" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SourceType > r (
              SourceTraits::create (i, f, this));

            if (!source_.present ())
            {
              this->source_.set (::std::move (r));
              continue;
            }
          }

          // csys
          //
          if (n.name () == "csys" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysType > r (
              CsysTraits::create (i, f, this));

            if (!csys_.present ())
            {
              this->csys_.set (::std::move (r));
              continue;
            }
          }

          // xOffset
          //
          if (n.name () == "xOffset" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< XOffsetType > r (
              XOffsetTraits::create (i, f, this));

            if (!xOffset_.present ())
            {
              this->xOffset_.set (::std::move (r));
              continue;
            }
          }

          // yOffset
          //
          if (n.name () == "yOffset" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< YOffsetType > r (
              YOffsetTraits::create (i, f, this));

            if (!yOffset_.present ())
            {
              this->yOffset_.set (::std::move (r));
              continue;
            }
          }

          // zOffset
          //
          if (n.name () == "zOffset" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ZOffsetType > r (
              ZOffsetTraits::create (i, f, this));

            if (!zOffset_.present ())
            {
              this->zOffset_.set (::std::move (r));
              continue;
            }
          }

          // xCount
          //
          if (n.name () == "xCount" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< XCountType > r (
              XCountTraits::create (i, f, this));

            if (!xCount_.present ())
            {
              this->xCount_.set (::std::move (r));
              continue;
            }
          }

          // yCount
          //
          if (n.name () == "yCount" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< YCountType > r (
              YCountTraits::create (i, f, this));

            if (!yCount_.present ())
            {
              this->yCount_.set (::std::move (r));
              continue;
            }
          }

          // zCount
          //
          if (n.name () == "zCount" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ZCountType > r (
              ZCountTraits::create (i, f, this));

            if (!zCount_.present ())
            {
              this->zCount_.set (::std::move (r));
              continue;
            }
          }

          // includeSource
          //
          if (n.name () == "includeSource" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IncludeSourceType > r (
              IncludeSourceTraits::create (i, f, this));

            if (!includeSource_.present ())
            {
              this->includeSource_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // instanceMaps
          //
          if (n.name () == "instanceMaps" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< InstanceMapsType > r (
              InstanceMapsTraits::create (i, f, this));

            if (!instanceMaps_.present ())
            {
              this->instanceMaps_.set (::std::move (r));
              continue;
            }
          }

          // csysDragger
          //
          if (n.name () == "csysDragger" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysDraggerType > r (
              CsysDraggerTraits::create (i, f, this));

            if (!csysDragger_.present ())
            {
              this->csysDragger_.set (::std::move (r));
              continue;
            }
          }

          // xOffsetLabel
          //
          if (n.name () == "xOffsetLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< XOffsetLabelType > r (
              XOffsetLabelTraits::create (i, f, this));

            if (!xOffsetLabel_.present ())
            {
              this->xOffsetLabel_.set (::std::move (r));
              continue;
            }
          }

          // yOffsetLabel
          //
          if (n.name () == "yOffsetLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< YOffsetLabelType > r (
              YOffsetLabelTraits::create (i, f, this));

            if (!yOffsetLabel_.present ())
            {
              this->yOffsetLabel_.set (::std::move (r));
              continue;
            }
          }

          // zOffsetLabel
          //
          if (n.name () == "zOffsetLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ZOffsetLabelType > r (
              ZOffsetLabelTraits::create (i, f, this));

            if (!zOffsetLabel_.present ())
            {
              this->zOffsetLabel_.set (::std::move (r));
              continue;
            }
          }

          // xCountLabel
          //
          if (n.name () == "xCountLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< XCountLabelType > r (
              XCountLabelTraits::create (i, f, this));

            if (!xCountLabel_.present ())
            {
              this->xCountLabel_.set (::std::move (r));
              continue;
            }
          }

          // yCountLabel
          //
          if (n.name () == "yCountLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< YCountLabelType > r (
              YCountLabelTraits::create (i, f, this));

            if (!yCountLabel_.present ())
            {
              this->yCountLabel_.set (::std::move (r));
              continue;
            }
          }

          // zCountLabel
          //
          if (n.name () == "zCountLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ZCountLabelType > r (
              ZCountLabelTraits::create (i, f, this));

            if (!zCountLabel_.present ())
            {
              this->zCountLabel_.set (::std::move (r));
              continue;
            }
          }

          // includeSourceLabel
          //
          if (n.name () == "includeSourceLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< IncludeSourceLabelType > r (
              IncludeSourceLabelTraits::create (i, f, this));

            if (!includeSourceLabel_.present ())
            {
              this->includeSourceLabel_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!source_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "source",
            "");
        }

        if (!csys_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csys",
            "");
        }

        if (!xOffset_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "xOffset",
            "");
        }

        if (!yOffset_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "yOffset",
            "");
        }

        if (!zOffset_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "zOffset",
            "");
        }

        if (!xCount_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "xCount",
            "");
        }

        if (!yCount_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "yCount",
            "");
        }

        if (!zCount_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "zCount",
            "");
        }

        if (!includeSource_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "includeSource",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!instanceMaps_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "instanceMaps",
            "");
        }

        if (!csysDragger_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysDragger",
            "");
        }

        if (!xOffsetLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "xOffsetLabel",
            "");
        }

        if (!yOffsetLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "yOffsetLabel",
            "");
        }

        if (!zOffsetLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "zOffsetLabel",
            "");
        }

        if (!xCountLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "xCountLabel",
            "");
        }

        if (!yCountLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "yCountLabel",
            "");
        }

        if (!zCountLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "zCountLabel",
            "");
        }

        if (!includeSourceLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "includeSourceLabel",
            "");
        }
      }

      InstanceLinear* InstanceLinear::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class InstanceLinear (*this, f, c);
      }

      InstanceLinear& InstanceLinear::
      operator= (const InstanceLinear& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->source_ = x.source_;
          this->csys_ = x.csys_;
          this->xOffset_ = x.xOffset_;
          this->yOffset_ = x.yOffset_;
          this->zOffset_ = x.zOffset_;
          this->xCount_ = x.xCount_;
          this->yCount_ = x.yCount_;
          this->zCount_ = x.zCount_;
          this->includeSource_ = x.includeSource_;
          this->seerShape_ = x.seerShape_;
          this->instanceMaps_ = x.instanceMaps_;
          this->csysDragger_ = x.csysDragger_;
          this->xOffsetLabel_ = x.xOffsetLabel_;
          this->yOffsetLabel_ = x.yOffsetLabel_;
          this->zOffsetLabel_ = x.zOffsetLabel_;
          this->xCountLabel_ = x.xCountLabel_;
          this->yCountLabel_ = x.yCountLabel_;
          this->zCountLabel_ = x.zCountLabel_;
          this->includeSourceLabel_ = x.includeSourceLabel_;
        }

        return *this;
      }

      InstanceLinear::
      ~InstanceLinear ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace inls
    {
      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (const ::std::string& u,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > (
          ::prj::srl::inls::instanceLinear (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (const ::std::string& u,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > (
          ::prj::srl::inls::instanceLinear (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > (
          ::prj::srl::inls::instanceLinear (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inls::instanceLinear (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inls::instanceLinear (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::inls::instanceLinear (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inls::instanceLinear (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inls::instanceLinear (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::inls::instanceLinear (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::xercesc::InputSource& i,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > (
          ::prj::srl::inls::instanceLinear (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::xercesc::InputSource& i,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > (
          ::prj::srl::inls::instanceLinear (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > (
          ::prj::srl::inls::instanceLinear (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > (
            ::prj::srl::inls::instanceLinear (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "instanceLinear" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inls")
        {
          ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > r (
            ::xsd::cxx::tree::traits< ::prj::srl::inls::InstanceLinear, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "instanceLinear",
          "http://www.cadseer.com/prj/srl/inls");
      }

      ::std::unique_ptr< ::prj::srl::inls::InstanceLinear >
      instanceLinear (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "instanceLinear" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inls")
        {
          ::std::unique_ptr< ::prj::srl::inls::InstanceLinear > r (
            ::xsd::cxx::tree::traits< ::prj::srl::inls::InstanceLinear, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "instanceLinear",
          "http://www.cadseer.com/prj/srl/inls");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace inls
    {
      void
      operator<< (::xercesc::DOMElement& e, const InstanceLinear& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // source
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "source",
              e));

          s << i.source ();
        }

        // csys
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csys",
              e));

          s << i.csys ();
        }

        // xOffset
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "xOffset",
              e));

          s << i.xOffset ();
        }

        // yOffset
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "yOffset",
              e));

          s << i.yOffset ();
        }

        // zOffset
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "zOffset",
              e));

          s << i.zOffset ();
        }

        // xCount
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "xCount",
              e));

          s << i.xCount ();
        }

        // yCount
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "yCount",
              e));

          s << i.yCount ();
        }

        // zCount
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "zCount",
              e));

          s << i.zCount ();
        }

        // includeSource
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "includeSource",
              e));

          s << i.includeSource ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // instanceMaps
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "instanceMaps",
              e));

          s << i.instanceMaps ();
        }

        // csysDragger
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysDragger",
              e));

          s << i.csysDragger ();
        }

        // xOffsetLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "xOffsetLabel",
              e));

          s << i.xOffsetLabel ();
        }

        // yOffsetLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "yOffsetLabel",
              e));

          s << i.yOffsetLabel ();
        }

        // zOffsetLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "zOffsetLabel",
              e));

          s << i.zOffsetLabel ();
        }

        // xCountLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "xCountLabel",
              e));

          s << i.xCountLabel ();
        }

        // yCountLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "yCountLabel",
              e));

          s << i.yCountLabel ();
        }

        // zCountLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "zCountLabel",
              e));

          s << i.zCountLabel ();
        }

        // includeSourceLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "includeSourceLabel",
              e));

          s << i.includeSourceLabel ();
        }
      }

      void
      instanceLinear (::std::ostream& o,
                      const ::prj::srl::inls::InstanceLinear& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inls::instanceLinear (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      instanceLinear (::std::ostream& o,
                      const ::prj::srl::inls::InstanceLinear& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inls::instanceLinear (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instanceLinear (::std::ostream& o,
                      const ::prj::srl::inls::InstanceLinear& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inls::instanceLinear (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instanceLinear (::xercesc::XMLFormatTarget& t,
                      const ::prj::srl::inls::InstanceLinear& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inls::instanceLinear (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      instanceLinear (::xercesc::XMLFormatTarget& t,
                      const ::prj::srl::inls::InstanceLinear& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inls::instanceLinear (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instanceLinear (::xercesc::XMLFormatTarget& t,
                      const ::prj::srl::inls::InstanceLinear& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::inls::instanceLinear (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      instanceLinear (::xercesc::DOMDocument& d,
                      const ::prj::srl::inls::InstanceLinear& s,
                      ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "instanceLinear" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/inls")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "instanceLinear",
            "http://www.cadseer.com/prj/srl/inls");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      instanceLinear (const ::prj::srl::inls::InstanceLinear& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "instanceLinear",
            "http://www.cadseer.com/prj/srl/inls",
            m, f));

        ::prj::srl::inls::instanceLinear (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

