// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_UND_PRJSRLUNDUNDERCUT_H
#define PRJ_SRL_UND_PRJSRLUNDUNDERCUT_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace und
    {
      class UnderCut;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptvectormath.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace und
    {
      class UnderCut: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // sourcePick
        //
        typedef ::prj::srl::spt::Parameter SourcePickType;
        typedef ::xsd::cxx::tree::traits< SourcePickType, char > SourcePickTraits;

        const SourcePickType&
        sourcePick () const;

        SourcePickType&
        sourcePick ();

        void
        sourcePick (const SourcePickType& x);

        void
        sourcePick (::std::unique_ptr< SourcePickType > p);

        // directionType
        //
        typedef ::prj::srl::spt::Parameter DirectionTypeType;
        typedef ::xsd::cxx::tree::traits< DirectionTypeType, char > DirectionTypeTraits;

        const DirectionTypeType&
        directionType () const;

        DirectionTypeType&
        directionType ();

        void
        directionType (const DirectionTypeType& x);

        void
        directionType (::std::unique_ptr< DirectionTypeType > p);

        // directionPicks
        //
        typedef ::prj::srl::spt::Parameter DirectionPicksType;
        typedef ::xsd::cxx::tree::traits< DirectionPicksType, char > DirectionPicksTraits;

        const DirectionPicksType&
        directionPicks () const;

        DirectionPicksType&
        directionPicks ();

        void
        directionPicks (const DirectionPicksType& x);

        void
        directionPicks (::std::unique_ptr< DirectionPicksType > p);

        // direction
        //
        typedef ::prj::srl::spt::Parameter DirectionType;
        typedef ::xsd::cxx::tree::traits< DirectionType, char > DirectionTraits;

        const DirectionType&
        direction () const;

        DirectionType&
        direction ();

        void
        direction (const DirectionType& x);

        void
        direction (::std::unique_ptr< DirectionType > p);

        // subdivision
        //
        typedef ::prj::srl::spt::Parameter SubdivisionType;
        typedef ::xsd::cxx::tree::traits< SubdivisionType, char > SubdivisionTraits;

        const SubdivisionType&
        subdivision () const;

        SubdivisionType&
        subdivision ();

        void
        subdivision (const SubdivisionType& x);

        void
        subdivision (::std::unique_ptr< SubdivisionType > p);

        // directionTypeLabel
        //
        typedef ::prj::srl::spt::PLabel DirectionTypeLabelType;
        typedef ::xsd::cxx::tree::traits< DirectionTypeLabelType, char > DirectionTypeLabelTraits;

        const DirectionTypeLabelType&
        directionTypeLabel () const;

        DirectionTypeLabelType&
        directionTypeLabel ();

        void
        directionTypeLabel (const DirectionTypeLabelType& x);

        void
        directionTypeLabel (::std::unique_ptr< DirectionTypeLabelType > p);

        // directionLabel
        //
        typedef ::prj::srl::spt::PLabel DirectionLabelType;
        typedef ::xsd::cxx::tree::traits< DirectionLabelType, char > DirectionLabelTraits;

        const DirectionLabelType&
        directionLabel () const;

        DirectionLabelType&
        directionLabel ();

        void
        directionLabel (const DirectionLabelType& x);

        void
        directionLabel (::std::unique_ptr< DirectionLabelType > p);

        // subdivisionLabel
        //
        typedef ::prj::srl::spt::PLabel SubdivisionLabelType;
        typedef ::xsd::cxx::tree::traits< SubdivisionLabelType, char > SubdivisionLabelTraits;

        const SubdivisionLabelType&
        subdivisionLabel () const;

        SubdivisionLabelType&
        subdivisionLabel ();

        void
        subdivisionLabel (const SubdivisionLabelType& x);

        void
        subdivisionLabel (::std::unique_ptr< SubdivisionLabelType > p);

        // intersectionPoints
        //
        typedef ::prj::srl::spt::Vec3d IntersectionPointsType;
        typedef ::xsd::cxx::tree::sequence< IntersectionPointsType > IntersectionPointsSequence;
        typedef IntersectionPointsSequence::iterator IntersectionPointsIterator;
        typedef IntersectionPointsSequence::const_iterator IntersectionPointsConstIterator;
        typedef ::xsd::cxx::tree::traits< IntersectionPointsType, char > IntersectionPointsTraits;

        const IntersectionPointsSequence&
        intersectionPoints () const;

        IntersectionPointsSequence&
        intersectionPoints ();

        void
        intersectionPoints (const IntersectionPointsSequence& s);

        // Constructors.
        //
        UnderCut (const BaseType&,
                  const SourcePickType&,
                  const DirectionTypeType&,
                  const DirectionPicksType&,
                  const DirectionType&,
                  const SubdivisionType&,
                  const DirectionTypeLabelType&,
                  const DirectionLabelType&,
                  const SubdivisionLabelType&);

        UnderCut (::std::unique_ptr< BaseType >,
                  ::std::unique_ptr< SourcePickType >,
                  ::std::unique_ptr< DirectionTypeType >,
                  ::std::unique_ptr< DirectionPicksType >,
                  ::std::unique_ptr< DirectionType >,
                  ::std::unique_ptr< SubdivisionType >,
                  ::std::unique_ptr< DirectionTypeLabelType >,
                  ::std::unique_ptr< DirectionLabelType >,
                  ::std::unique_ptr< SubdivisionLabelType >);

        UnderCut (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        UnderCut (const UnderCut& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        virtual UnderCut*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        UnderCut&
        operator= (const UnderCut& x);

        virtual 
        ~UnderCut ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< SourcePickType > sourcePick_;
        ::xsd::cxx::tree::one< DirectionTypeType > directionType_;
        ::xsd::cxx::tree::one< DirectionPicksType > directionPicks_;
        ::xsd::cxx::tree::one< DirectionType > direction_;
        ::xsd::cxx::tree::one< SubdivisionType > subdivision_;
        ::xsd::cxx::tree::one< DirectionTypeLabelType > directionTypeLabel_;
        ::xsd::cxx::tree::one< DirectionLabelType > directionLabel_;
        ::xsd::cxx::tree::one< SubdivisionLabelType > subdivisionLabel_;
        IntersectionPointsSequence intersectionPoints_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace und
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::und::UnderCut >
      undercut (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace und
    {
      void
      operator<< (::xercesc::DOMElement&, const UnderCut&);

      // Serialize to std::ostream.
      //

      void
      undercut (::std::ostream& os,
                const ::prj::srl::und::UnderCut& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      void
      undercut (::std::ostream& os,
                const ::prj::srl::und::UnderCut& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      void
      undercut (::std::ostream& os,
                const ::prj::srl::und::UnderCut& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      undercut (::xercesc::XMLFormatTarget& ft,
                const ::prj::srl::und::UnderCut& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      void
      undercut (::xercesc::XMLFormatTarget& ft,
                const ::prj::srl::und::UnderCut& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      void
      undercut (::xercesc::XMLFormatTarget& ft,
                const ::prj::srl::und::UnderCut& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      undercut (::xercesc::DOMDocument& d,
                const ::prj::srl::und::UnderCut& x,
                ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      undercut (const ::prj::srl::und::UnderCut& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_UND_PRJSRLUNDUNDERCUT_H
