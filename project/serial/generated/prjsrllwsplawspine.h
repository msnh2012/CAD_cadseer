// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_LWSP_PRJSRLLWSPLAWSPINE_H
#define PRJ_SRL_LWSP_PRJSRLLWSPLAWSPINE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace lwsp
    {
      class GraphNode;
      class GraphEdge;
      class Graph;
      class Vessel;
      class LawSpine;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace lwsp
    {
      class GraphNode: public ::xml_schema::Type
      {
        public:
        // parameter
        //
        typedef ::prj::srl::spt::Parameter ParameterType;
        typedef ::xsd::cxx::tree::traits< ParameterType, char > ParameterTraits;

        const ParameterType&
        parameter () const;

        ParameterType&
        parameter ();

        void
        parameter (const ParameterType& x);

        void
        parameter (::std::unique_ptr< ParameterType > p);

        // pLabel
        //
        typedef ::prj::srl::spt::PLabel PLabelType;
        typedef ::xsd::cxx::tree::optional< PLabelType > PLabelOptional;
        typedef ::xsd::cxx::tree::traits< PLabelType, char > PLabelTraits;

        const PLabelOptional&
        pLabel () const;

        PLabelOptional&
        pLabel ();

        void
        pLabel (const PLabelType& x);

        void
        pLabel (const PLabelOptional& x);

        void
        pLabel (::std::unique_ptr< PLabelType > p);

        // location
        //
        typedef ::prj::srl::spt::Vec3d LocationType;
        typedef ::xsd::cxx::tree::optional< LocationType > LocationOptional;
        typedef ::xsd::cxx::tree::traits< LocationType, char > LocationTraits;

        const LocationOptional&
        location () const;

        LocationOptional&
        location ();

        void
        location (const LocationType& x);

        void
        location (const LocationOptional& x);

        void
        location (::std::unique_ptr< LocationType > p);

        // Constructors.
        //
        GraphNode (const ParameterType&);

        GraphNode (::std::unique_ptr< ParameterType >);

        GraphNode (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        GraphNode (const GraphNode& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual GraphNode*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        GraphNode&
        operator= (const GraphNode& x);

        virtual 
        ~GraphNode ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< ParameterType > parameter_;
        PLabelOptional pLabel_;
        LocationOptional location_;
      };

      class GraphEdge: public ::xml_schema::Type
      {
        public:
        // source
        //
        typedef ::xml_schema::Int SourceType;
        typedef ::xsd::cxx::tree::traits< SourceType, char > SourceTraits;

        const SourceType&
        source () const;

        SourceType&
        source ();

        void
        source (const SourceType& x);

        // target
        //
        typedef ::xml_schema::Int TargetType;
        typedef ::xsd::cxx::tree::traits< TargetType, char > TargetTraits;

        const TargetType&
        target () const;

        TargetType&
        target ();

        void
        target (const TargetType& x);

        // mask
        //
        typedef ::xml_schema::Int MaskType;
        typedef ::xsd::cxx::tree::traits< MaskType, char > MaskTraits;

        const MaskType&
        mask () const;

        MaskType&
        mask ();

        void
        mask (const MaskType& x);

        // Constructors.
        //
        GraphEdge (const SourceType&,
                   const TargetType&,
                   const MaskType&);

        GraphEdge (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        GraphEdge (const GraphEdge& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual GraphEdge*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        GraphEdge&
        operator= (const GraphEdge& x);

        virtual 
        ~GraphEdge ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< SourceType > source_;
        ::xsd::cxx::tree::one< TargetType > target_;
        ::xsd::cxx::tree::one< MaskType > mask_;
      };

      class Graph: public ::xml_schema::Type
      {
        public:
        // nodes
        //
        typedef ::prj::srl::lwsp::GraphNode NodesType;
        typedef ::xsd::cxx::tree::sequence< NodesType > NodesSequence;
        typedef NodesSequence::iterator NodesIterator;
        typedef NodesSequence::const_iterator NodesConstIterator;
        typedef ::xsd::cxx::tree::traits< NodesType, char > NodesTraits;

        const NodesSequence&
        nodes () const;

        NodesSequence&
        nodes ();

        void
        nodes (const NodesSequence& s);

        // edges
        //
        typedef ::prj::srl::lwsp::GraphEdge EdgesType;
        typedef ::xsd::cxx::tree::sequence< EdgesType > EdgesSequence;
        typedef EdgesSequence::iterator EdgesIterator;
        typedef EdgesSequence::const_iterator EdgesConstIterator;
        typedef ::xsd::cxx::tree::traits< EdgesType, char > EdgesTraits;

        const EdgesSequence&
        edges () const;

        EdgesSequence&
        edges ();

        void
        edges (const EdgesSequence& s);

        // Constructors.
        //
        Graph ();

        Graph (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        Graph (const Graph& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

        virtual Graph*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Graph&
        operator= (const Graph& x);

        virtual 
        ~Graph ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        NodesSequence nodes_;
        EdgesSequence edges_;
      };

      class Vessel: public ::xml_schema::Type
      {
        public:
        // periodic
        //
        typedef ::xml_schema::Boolean PeriodicType;
        typedef ::xsd::cxx::tree::traits< PeriodicType, char > PeriodicTraits;

        const PeriodicType&
        periodic () const;

        PeriodicType&
        periodic ();

        void
        periodic (const PeriodicType& x);

        // state
        //
        typedef ::xml_schema::Int StateType;
        typedef ::xsd::cxx::tree::traits< StateType, char > StateTraits;

        const StateType&
        state () const;

        StateType&
        state ();

        void
        state (const StateType& x);

        // graph
        //
        typedef ::prj::srl::lwsp::Graph GraphType;
        typedef ::xsd::cxx::tree::traits< GraphType, char > GraphTraits;

        const GraphType&
        graph () const;

        GraphType&
        graph ();

        void
        graph (const GraphType& x);

        void
        graph (::std::unique_ptr< GraphType > p);

        // laws
        //
        typedef ::xml_schema::Int LawsType;
        typedef ::xsd::cxx::tree::sequence< LawsType > LawsSequence;
        typedef LawsSequence::iterator LawsIterator;
        typedef LawsSequence::const_iterator LawsConstIterator;
        typedef ::xsd::cxx::tree::traits< LawsType, char > LawsTraits;

        const LawsSequence&
        laws () const;

        LawsSequence&
        laws ();

        void
        laws (const LawsSequence& s);

        // Constructors.
        //
        Vessel (const PeriodicType&,
                const StateType&,
                const GraphType&);

        Vessel (const PeriodicType&,
                const StateType&,
                ::std::unique_ptr< GraphType >);

        Vessel (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        Vessel (const Vessel& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual Vessel*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Vessel&
        operator= (const Vessel& x);

        virtual 
        ~Vessel ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< PeriodicType > periodic_;
        ::xsd::cxx::tree::one< StateType > state_;
        ::xsd::cxx::tree::one< GraphType > graph_;
        LawsSequence laws_;
      };

      class LawSpine: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // spinePick
        //
        typedef ::prj::srl::spt::Parameter SpinePickType;
        typedef ::xsd::cxx::tree::traits< SpinePickType, char > SpinePickTraits;

        const SpinePickType&
        spinePick () const;

        SpinePickType&
        spinePick ();

        void
        spinePick (const SpinePickType& x);

        void
        spinePick (::std::unique_ptr< SpinePickType > p);

        // vessel
        //
        typedef ::prj::srl::lwsp::Vessel VesselType;
        typedef ::xsd::cxx::tree::traits< VesselType, char > VesselTraits;

        const VesselType&
        vessel () const;

        VesselType&
        vessel ();

        void
        vessel (const VesselType& x);

        void
        vessel (::std::unique_ptr< VesselType > p);

        // Constructors.
        //
        LawSpine (const BaseType&,
                  const SeerShapeType&,
                  const SpinePickType&,
                  const VesselType&);

        LawSpine (::std::unique_ptr< BaseType >,
                  ::std::unique_ptr< SeerShapeType >,
                  ::std::unique_ptr< SpinePickType >,
                  ::std::unique_ptr< VesselType >);

        LawSpine (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        LawSpine (const LawSpine& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        virtual LawSpine*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        LawSpine&
        operator= (const LawSpine& x);

        virtual 
        ~LawSpine ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< SpinePickType > spinePick_;
        ::xsd::cxx::tree::one< VesselType > vessel_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace lwsp
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::lwsp::LawSpine >
      lawspine (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace lwsp
    {
      void
      operator<< (::xercesc::DOMElement&, const GraphNode&);

      void
      operator<< (::xercesc::DOMElement&, const GraphEdge&);

      void
      operator<< (::xercesc::DOMElement&, const Graph&);

      void
      operator<< (::xercesc::DOMElement&, const Vessel&);

      void
      operator<< (::xercesc::DOMElement&, const LawSpine&);

      // Serialize to std::ostream.
      //

      void
      lawspine (::std::ostream& os,
                const ::prj::srl::lwsp::LawSpine& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      void
      lawspine (::std::ostream& os,
                const ::prj::srl::lwsp::LawSpine& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      void
      lawspine (::std::ostream& os,
                const ::prj::srl::lwsp::LawSpine& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      lawspine (::xercesc::XMLFormatTarget& ft,
                const ::prj::srl::lwsp::LawSpine& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      void
      lawspine (::xercesc::XMLFormatTarget& ft,
                const ::prj::srl::lwsp::LawSpine& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      void
      lawspine (::xercesc::XMLFormatTarget& ft,
                const ::prj::srl::lwsp::LawSpine& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      lawspine (::xercesc::DOMDocument& d,
                const ::prj::srl::lwsp::LawSpine& x,
                ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      lawspine (const ::prj::srl::lwsp::LawSpine& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_LWSP_PRJSRLLWSPLAWSPINE_H
