// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlstpsstrip.h"

namespace prj
{
  namespace srl
  {
    namespace stps
    {
      // Station
      // 

      const Station::TextType& Station::
      text () const
      {
        return this->text_.get ();
      }

      Station::TextType& Station::
      text ()
      {
        return this->text_.get ();
      }

      void Station::
      text (const TextType& x)
      {
        this->text_.set (x);
      }

      void Station::
      text (::std::unique_ptr< TextType > x)
      {
        this->text_.set (std::move (x));
      }

      const Station::MatrixType& Station::
      matrix () const
      {
        return this->matrix_.get ();
      }

      Station::MatrixType& Station::
      matrix ()
      {
        return this->matrix_.get ();
      }

      void Station::
      matrix (const MatrixType& x)
      {
        this->matrix_.set (x);
      }

      void Station::
      matrix (::std::unique_ptr< MatrixType > x)
      {
        this->matrix_.set (std::move (x));
      }


      // Strip
      // 

      const Strip::BaseType& Strip::
      base () const
      {
        return this->base_.get ();
      }

      Strip::BaseType& Strip::
      base ()
      {
        return this->base_.get ();
      }

      void Strip::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void Strip::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const Strip::SeerShapeType& Strip::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      Strip::SeerShapeType& Strip::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void Strip::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void Strip::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const Strip::FeedDirectionType& Strip::
      feedDirection () const
      {
        return this->feedDirection_.get ();
      }

      Strip::FeedDirectionType& Strip::
      feedDirection ()
      {
        return this->feedDirection_.get ();
      }

      void Strip::
      feedDirection (const FeedDirectionType& x)
      {
        this->feedDirection_.set (x);
      }

      void Strip::
      feedDirection (::std::unique_ptr< FeedDirectionType > x)
      {
        this->feedDirection_.set (std::move (x));
      }

      const Strip::PitchType& Strip::
      pitch () const
      {
        return this->pitch_.get ();
      }

      Strip::PitchType& Strip::
      pitch ()
      {
        return this->pitch_.get ();
      }

      void Strip::
      pitch (const PitchType& x)
      {
        this->pitch_.set (x);
      }

      void Strip::
      pitch (::std::unique_ptr< PitchType > x)
      {
        this->pitch_.set (std::move (x));
      }

      const Strip::WidthType& Strip::
      width () const
      {
        return this->width_.get ();
      }

      Strip::WidthType& Strip::
      width ()
      {
        return this->width_.get ();
      }

      void Strip::
      width (const WidthType& x)
      {
        this->width_.set (x);
      }

      void Strip::
      width (::std::unique_ptr< WidthType > x)
      {
        this->width_.set (std::move (x));
      }

      const Strip::WidthOffsetType& Strip::
      widthOffset () const
      {
        return this->widthOffset_.get ();
      }

      Strip::WidthOffsetType& Strip::
      widthOffset ()
      {
        return this->widthOffset_.get ();
      }

      void Strip::
      widthOffset (const WidthOffsetType& x)
      {
        this->widthOffset_.set (x);
      }

      void Strip::
      widthOffset (::std::unique_ptr< WidthOffsetType > x)
      {
        this->widthOffset_.set (std::move (x));
      }

      const Strip::GapType& Strip::
      gap () const
      {
        return this->gap_.get ();
      }

      Strip::GapType& Strip::
      gap ()
      {
        return this->gap_.get ();
      }

      void Strip::
      gap (const GapType& x)
      {
        this->gap_.set (x);
      }

      void Strip::
      gap (::std::unique_ptr< GapType > x)
      {
        this->gap_.set (std::move (x));
      }

      const Strip::AutoCalcType& Strip::
      autoCalc () const
      {
        return this->autoCalc_.get ();
      }

      Strip::AutoCalcType& Strip::
      autoCalc ()
      {
        return this->autoCalc_.get ();
      }

      void Strip::
      autoCalc (const AutoCalcType& x)
      {
        this->autoCalc_.set (x);
      }

      void Strip::
      autoCalc (::std::unique_ptr< AutoCalcType > x)
      {
        this->autoCalc_.set (std::move (x));
      }

      const Strip::StripHeightType& Strip::
      stripHeight () const
      {
        return this->stripHeight_.get ();
      }

      Strip::StripHeightType& Strip::
      stripHeight ()
      {
        return this->stripHeight_.get ();
      }

      void Strip::
      stripHeight (const StripHeightType& x)
      {
        this->stripHeight_.set (x);
      }

      const Strip::FeedDirectionLabelType& Strip::
      feedDirectionLabel () const
      {
        return this->feedDirectionLabel_.get ();
      }

      Strip::FeedDirectionLabelType& Strip::
      feedDirectionLabel ()
      {
        return this->feedDirectionLabel_.get ();
      }

      void Strip::
      feedDirectionLabel (const FeedDirectionLabelType& x)
      {
        this->feedDirectionLabel_.set (x);
      }

      void Strip::
      feedDirectionLabel (::std::unique_ptr< FeedDirectionLabelType > x)
      {
        this->feedDirectionLabel_.set (std::move (x));
      }

      const Strip::PitchLabelType& Strip::
      pitchLabel () const
      {
        return this->pitchLabel_.get ();
      }

      Strip::PitchLabelType& Strip::
      pitchLabel ()
      {
        return this->pitchLabel_.get ();
      }

      void Strip::
      pitchLabel (const PitchLabelType& x)
      {
        this->pitchLabel_.set (x);
      }

      void Strip::
      pitchLabel (::std::unique_ptr< PitchLabelType > x)
      {
        this->pitchLabel_.set (std::move (x));
      }

      const Strip::WidthLabelType& Strip::
      widthLabel () const
      {
        return this->widthLabel_.get ();
      }

      Strip::WidthLabelType& Strip::
      widthLabel ()
      {
        return this->widthLabel_.get ();
      }

      void Strip::
      widthLabel (const WidthLabelType& x)
      {
        this->widthLabel_.set (x);
      }

      void Strip::
      widthLabel (::std::unique_ptr< WidthLabelType > x)
      {
        this->widthLabel_.set (std::move (x));
      }

      const Strip::WidthOffsetLabelType& Strip::
      widthOffsetLabel () const
      {
        return this->widthOffsetLabel_.get ();
      }

      Strip::WidthOffsetLabelType& Strip::
      widthOffsetLabel ()
      {
        return this->widthOffsetLabel_.get ();
      }

      void Strip::
      widthOffsetLabel (const WidthOffsetLabelType& x)
      {
        this->widthOffsetLabel_.set (x);
      }

      void Strip::
      widthOffsetLabel (::std::unique_ptr< WidthOffsetLabelType > x)
      {
        this->widthOffsetLabel_.set (std::move (x));
      }

      const Strip::GapLabelType& Strip::
      gapLabel () const
      {
        return this->gapLabel_.get ();
      }

      Strip::GapLabelType& Strip::
      gapLabel ()
      {
        return this->gapLabel_.get ();
      }

      void Strip::
      gapLabel (const GapLabelType& x)
      {
        this->gapLabel_.set (x);
      }

      void Strip::
      gapLabel (::std::unique_ptr< GapLabelType > x)
      {
        this->gapLabel_.set (std::move (x));
      }

      const Strip::AutoCalcLabelType& Strip::
      autoCalcLabel () const
      {
        return this->autoCalcLabel_.get ();
      }

      Strip::AutoCalcLabelType& Strip::
      autoCalcLabel ()
      {
        return this->autoCalcLabel_.get ();
      }

      void Strip::
      autoCalcLabel (const AutoCalcLabelType& x)
      {
        this->autoCalcLabel_.set (x);
      }

      void Strip::
      autoCalcLabel (::std::unique_ptr< AutoCalcLabelType > x)
      {
        this->autoCalcLabel_.set (std::move (x));
      }

      const Strip::StationsSequence& Strip::
      stations () const
      {
        return this->stations_;
      }

      Strip::StationsSequence& Strip::
      stations ()
      {
        return this->stations_;
      }

      void Strip::
      stations (const StationsSequence& s)
      {
        this->stations_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace stps
    {
      // Station
      //

      Station::
      Station (const TextType& text,
               const MatrixType& matrix)
      : ::xml_schema::Type (),
        text_ (text, this),
        matrix_ (matrix, this)
      {
      }

      Station::
      Station (const TextType& text,
               ::std::unique_ptr< MatrixType > matrix)
      : ::xml_schema::Type (),
        text_ (text, this),
        matrix_ (std::move (matrix), this)
      {
      }

      Station::
      Station (const Station& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        text_ (x.text_, f, this),
        matrix_ (x.matrix_, f, this)
      {
      }

      Station::
      Station (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        text_ (this),
        matrix_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Station::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // text
          //
          if (n.name () == "text" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TextType > r (
              TextTraits::create (i, f, this));

            if (!text_.present ())
            {
              this->text_.set (::std::move (r));
              continue;
            }
          }

          // matrix
          //
          if (n.name () == "matrix" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< MatrixType > r (
              MatrixTraits::create (i, f, this));

            if (!matrix_.present ())
            {
              this->matrix_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!text_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "text",
            "");
        }

        if (!matrix_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "matrix",
            "");
        }
      }

      Station* Station::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Station (*this, f, c);
      }

      Station& Station::
      operator= (const Station& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->text_ = x.text_;
          this->matrix_ = x.matrix_;
        }

        return *this;
      }

      Station::
      ~Station ()
      {
      }

      // Strip
      //

      Strip::
      Strip (const BaseType& base,
             const SeerShapeType& seerShape,
             const FeedDirectionType& feedDirection,
             const PitchType& pitch,
             const WidthType& width,
             const WidthOffsetType& widthOffset,
             const GapType& gap,
             const AutoCalcType& autoCalc,
             const StripHeightType& stripHeight,
             const FeedDirectionLabelType& feedDirectionLabel,
             const PitchLabelType& pitchLabel,
             const WidthLabelType& widthLabel,
             const WidthOffsetLabelType& widthOffsetLabel,
             const GapLabelType& gapLabel,
             const AutoCalcLabelType& autoCalcLabel)
      : ::xml_schema::Type (),
        base_ (base, this),
        seerShape_ (seerShape, this),
        feedDirection_ (feedDirection, this),
        pitch_ (pitch, this),
        width_ (width, this),
        widthOffset_ (widthOffset, this),
        gap_ (gap, this),
        autoCalc_ (autoCalc, this),
        stripHeight_ (stripHeight, this),
        feedDirectionLabel_ (feedDirectionLabel, this),
        pitchLabel_ (pitchLabel, this),
        widthLabel_ (widthLabel, this),
        widthOffsetLabel_ (widthOffsetLabel, this),
        gapLabel_ (gapLabel, this),
        autoCalcLabel_ (autoCalcLabel, this),
        stations_ (this)
      {
      }

      Strip::
      Strip (::std::unique_ptr< BaseType > base,
             ::std::unique_ptr< SeerShapeType > seerShape,
             ::std::unique_ptr< FeedDirectionType > feedDirection,
             ::std::unique_ptr< PitchType > pitch,
             ::std::unique_ptr< WidthType > width,
             ::std::unique_ptr< WidthOffsetType > widthOffset,
             ::std::unique_ptr< GapType > gap,
             ::std::unique_ptr< AutoCalcType > autoCalc,
             const StripHeightType& stripHeight,
             ::std::unique_ptr< FeedDirectionLabelType > feedDirectionLabel,
             ::std::unique_ptr< PitchLabelType > pitchLabel,
             ::std::unique_ptr< WidthLabelType > widthLabel,
             ::std::unique_ptr< WidthOffsetLabelType > widthOffsetLabel,
             ::std::unique_ptr< GapLabelType > gapLabel,
             ::std::unique_ptr< AutoCalcLabelType > autoCalcLabel)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        seerShape_ (std::move (seerShape), this),
        feedDirection_ (std::move (feedDirection), this),
        pitch_ (std::move (pitch), this),
        width_ (std::move (width), this),
        widthOffset_ (std::move (widthOffset), this),
        gap_ (std::move (gap), this),
        autoCalc_ (std::move (autoCalc), this),
        stripHeight_ (stripHeight, this),
        feedDirectionLabel_ (std::move (feedDirectionLabel), this),
        pitchLabel_ (std::move (pitchLabel), this),
        widthLabel_ (std::move (widthLabel), this),
        widthOffsetLabel_ (std::move (widthOffsetLabel), this),
        gapLabel_ (std::move (gapLabel), this),
        autoCalcLabel_ (std::move (autoCalcLabel), this),
        stations_ (this)
      {
      }

      Strip::
      Strip (const Strip& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        seerShape_ (x.seerShape_, f, this),
        feedDirection_ (x.feedDirection_, f, this),
        pitch_ (x.pitch_, f, this),
        width_ (x.width_, f, this),
        widthOffset_ (x.widthOffset_, f, this),
        gap_ (x.gap_, f, this),
        autoCalc_ (x.autoCalc_, f, this),
        stripHeight_ (x.stripHeight_, f, this),
        feedDirectionLabel_ (x.feedDirectionLabel_, f, this),
        pitchLabel_ (x.pitchLabel_, f, this),
        widthLabel_ (x.widthLabel_, f, this),
        widthOffsetLabel_ (x.widthOffsetLabel_, f, this),
        gapLabel_ (x.gapLabel_, f, this),
        autoCalcLabel_ (x.autoCalcLabel_, f, this),
        stations_ (x.stations_, f, this)
      {
      }

      Strip::
      Strip (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        seerShape_ (this),
        feedDirection_ (this),
        pitch_ (this),
        width_ (this),
        widthOffset_ (this),
        gap_ (this),
        autoCalc_ (this),
        stripHeight_ (this),
        feedDirectionLabel_ (this),
        pitchLabel_ (this),
        widthLabel_ (this),
        widthOffsetLabel_ (this),
        gapLabel_ (this),
        autoCalcLabel_ (this),
        stations_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Strip::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // feedDirection
          //
          if (n.name () == "feedDirection" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FeedDirectionType > r (
              FeedDirectionTraits::create (i, f, this));

            if (!feedDirection_.present ())
            {
              this->feedDirection_.set (::std::move (r));
              continue;
            }
          }

          // pitch
          //
          if (n.name () == "pitch" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PitchType > r (
              PitchTraits::create (i, f, this));

            if (!pitch_.present ())
            {
              this->pitch_.set (::std::move (r));
              continue;
            }
          }

          // width
          //
          if (n.name () == "width" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< WidthType > r (
              WidthTraits::create (i, f, this));

            if (!width_.present ())
            {
              this->width_.set (::std::move (r));
              continue;
            }
          }

          // widthOffset
          //
          if (n.name () == "widthOffset" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< WidthOffsetType > r (
              WidthOffsetTraits::create (i, f, this));

            if (!widthOffset_.present ())
            {
              this->widthOffset_.set (::std::move (r));
              continue;
            }
          }

          // gap
          //
          if (n.name () == "gap" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< GapType > r (
              GapTraits::create (i, f, this));

            if (!gap_.present ())
            {
              this->gap_.set (::std::move (r));
              continue;
            }
          }

          // autoCalc
          //
          if (n.name () == "autoCalc" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AutoCalcType > r (
              AutoCalcTraits::create (i, f, this));

            if (!autoCalc_.present ())
            {
              this->autoCalc_.set (::std::move (r));
              continue;
            }
          }

          // stripHeight
          //
          if (n.name () == "stripHeight" && n.namespace_ ().empty ())
          {
            if (!stripHeight_.present ())
            {
              this->stripHeight_.set (StripHeightTraits::create (i, f, this));
              continue;
            }
          }

          // feedDirectionLabel
          //
          if (n.name () == "feedDirectionLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FeedDirectionLabelType > r (
              FeedDirectionLabelTraits::create (i, f, this));

            if (!feedDirectionLabel_.present ())
            {
              this->feedDirectionLabel_.set (::std::move (r));
              continue;
            }
          }

          // pitchLabel
          //
          if (n.name () == "pitchLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PitchLabelType > r (
              PitchLabelTraits::create (i, f, this));

            if (!pitchLabel_.present ())
            {
              this->pitchLabel_.set (::std::move (r));
              continue;
            }
          }

          // widthLabel
          //
          if (n.name () == "widthLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< WidthLabelType > r (
              WidthLabelTraits::create (i, f, this));

            if (!widthLabel_.present ())
            {
              this->widthLabel_.set (::std::move (r));
              continue;
            }
          }

          // widthOffsetLabel
          //
          if (n.name () == "widthOffsetLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< WidthOffsetLabelType > r (
              WidthOffsetLabelTraits::create (i, f, this));

            if (!widthOffsetLabel_.present ())
            {
              this->widthOffsetLabel_.set (::std::move (r));
              continue;
            }
          }

          // gapLabel
          //
          if (n.name () == "gapLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< GapLabelType > r (
              GapLabelTraits::create (i, f, this));

            if (!gapLabel_.present ())
            {
              this->gapLabel_.set (::std::move (r));
              continue;
            }
          }

          // autoCalcLabel
          //
          if (n.name () == "autoCalcLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AutoCalcLabelType > r (
              AutoCalcLabelTraits::create (i, f, this));

            if (!autoCalcLabel_.present ())
            {
              this->autoCalcLabel_.set (::std::move (r));
              continue;
            }
          }

          // stations
          //
          if (n.name () == "stations" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< StationsType > r (
              StationsTraits::create (i, f, this));

            this->stations_.push_back (::std::move (r));
            continue;
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!feedDirection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "feedDirection",
            "");
        }

        if (!pitch_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pitch",
            "");
        }

        if (!width_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "width",
            "");
        }

        if (!widthOffset_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "widthOffset",
            "");
        }

        if (!gap_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "gap",
            "");
        }

        if (!autoCalc_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "autoCalc",
            "");
        }

        if (!stripHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "stripHeight",
            "");
        }

        if (!feedDirectionLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "feedDirectionLabel",
            "");
        }

        if (!pitchLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pitchLabel",
            "");
        }

        if (!widthLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "widthLabel",
            "");
        }

        if (!widthOffsetLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "widthOffsetLabel",
            "");
        }

        if (!gapLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "gapLabel",
            "");
        }

        if (!autoCalcLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "autoCalcLabel",
            "");
        }
      }

      Strip* Strip::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Strip (*this, f, c);
      }

      Strip& Strip::
      operator= (const Strip& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->seerShape_ = x.seerShape_;
          this->feedDirection_ = x.feedDirection_;
          this->pitch_ = x.pitch_;
          this->width_ = x.width_;
          this->widthOffset_ = x.widthOffset_;
          this->gap_ = x.gap_;
          this->autoCalc_ = x.autoCalc_;
          this->stripHeight_ = x.stripHeight_;
          this->feedDirectionLabel_ = x.feedDirectionLabel_;
          this->pitchLabel_ = x.pitchLabel_;
          this->widthLabel_ = x.widthLabel_;
          this->widthOffsetLabel_ = x.widthOffsetLabel_;
          this->gapLabel_ = x.gapLabel_;
          this->autoCalcLabel_ = x.autoCalcLabel_;
          this->stations_ = x.stations_;
        }

        return *this;
      }

      Strip::
      ~Strip ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace stps
    {
      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::stps::Strip > (
          ::prj::srl::stps::strip (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::stps::Strip > (
          ::prj::srl::stps::strip (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::stps::Strip > (
          ::prj::srl::stps::strip (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::stps::strip (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::stps::strip (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::stps::strip (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::stps::strip (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::stps::strip (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::stps::strip (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::stps::Strip > (
          ::prj::srl::stps::strip (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::stps::Strip > (
          ::prj::srl::stps::strip (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::stps::Strip > (
          ::prj::srl::stps::strip (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::stps::Strip > (
            ::prj::srl::stps::strip (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "strip" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/stps")
        {
          ::std::unique_ptr< ::prj::srl::stps::Strip > r (
            ::xsd::cxx::tree::traits< ::prj::srl::stps::Strip, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "strip",
          "http://www.cadseer.com/prj/srl/stps");
      }

      ::std::unique_ptr< ::prj::srl::stps::Strip >
      strip (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "strip" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/stps")
        {
          ::std::unique_ptr< ::prj::srl::stps::Strip > r (
            ::xsd::cxx::tree::traits< ::prj::srl::stps::Strip, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "strip",
          "http://www.cadseer.com/prj/srl/stps");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace stps
    {
      void
      operator<< (::xercesc::DOMElement& e, const Station& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // text
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "text",
              e));

          s << i.text ();
        }

        // matrix
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "matrix",
              e));

          s << i.matrix ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const Strip& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // feedDirection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "feedDirection",
              e));

          s << i.feedDirection ();
        }

        // pitch
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pitch",
              e));

          s << i.pitch ();
        }

        // width
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "width",
              e));

          s << i.width ();
        }

        // widthOffset
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "widthOffset",
              e));

          s << i.widthOffset ();
        }

        // gap
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "gap",
              e));

          s << i.gap ();
        }

        // autoCalc
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "autoCalc",
              e));

          s << i.autoCalc ();
        }

        // stripHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "stripHeight",
              e));

          s << ::xml_schema::AsDouble(i.stripHeight ());
        }

        // feedDirectionLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "feedDirectionLabel",
              e));

          s << i.feedDirectionLabel ();
        }

        // pitchLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pitchLabel",
              e));

          s << i.pitchLabel ();
        }

        // widthLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "widthLabel",
              e));

          s << i.widthLabel ();
        }

        // widthOffsetLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "widthOffsetLabel",
              e));

          s << i.widthOffsetLabel ();
        }

        // gapLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "gapLabel",
              e));

          s << i.gapLabel ();
        }

        // autoCalcLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "autoCalcLabel",
              e));

          s << i.autoCalcLabel ();
        }

        // stations
        //
        for (Strip::StationsConstIterator
             b (i.stations ().begin ()), n (i.stations ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "stations",
              e));

          s << *b;
        }
      }

      void
      strip (::std::ostream& o,
             const ::prj::srl::stps::Strip& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::stps::strip (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      strip (::std::ostream& o,
             const ::prj::srl::stps::Strip& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::stps::strip (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      strip (::std::ostream& o,
             const ::prj::srl::stps::Strip& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::stps::strip (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      strip (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::stps::Strip& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::stps::strip (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      strip (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::stps::Strip& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::stps::strip (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      strip (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::stps::Strip& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::stps::strip (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      strip (::xercesc::DOMDocument& d,
             const ::prj::srl::stps::Strip& s,
             ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "strip" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/stps")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "strip",
            "http://www.cadseer.com/prj/srl/stps");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      strip (const ::prj::srl::stps::Strip& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "strip",
            "http://www.cadseer.com/prj/srl/stps",
            m, f));

        ::prj::srl::stps::strip (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

