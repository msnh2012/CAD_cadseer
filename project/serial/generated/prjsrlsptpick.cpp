// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlsptpick.h"

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      // Pick
      // 

      const Pick::UType& Pick::
      u () const
      {
        return this->u_.get ();
      }

      Pick::UType& Pick::
      u ()
      {
        return this->u_.get ();
      }

      void Pick::
      u (const UType& x)
      {
        this->u_.set (x);
      }

      Pick::UType Pick::
      u_default_value ()
      {
        return UType (.0);
      }

      const Pick::VType& Pick::
      v () const
      {
        return this->v_.get ();
      }

      Pick::VType& Pick::
      v ()
      {
        return this->v_.get ();
      }

      void Pick::
      v (const VType& x)
      {
        this->v_.set (x);
      }

      Pick::VType Pick::
      v_default_value ()
      {
        return VType (.0);
      }

      const Pick::HistoryType& Pick::
      history () const
      {
        return this->history_.get ();
      }

      Pick::HistoryType& Pick::
      history ()
      {
        return this->history_.get ();
      }

      void Pick::
      history (const HistoryType& x)
      {
        this->history_.set (x);
      }

      void Pick::
      history (::std::unique_ptr< HistoryType > x)
      {
        this->history_.set (std::move (x));
      }

      const Pick::SelectionTypeType& Pick::
      selectionType () const
      {
        return this->selectionType_.get ();
      }

      Pick::SelectionTypeType& Pick::
      selectionType ()
      {
        return this->selectionType_.get ();
      }

      void Pick::
      selectionType (const SelectionTypeType& x)
      {
        this->selectionType_.set (x);
      }

      const Pick::TagType& Pick::
      tag () const
      {
        return this->tag_.get ();
      }

      Pick::TagType& Pick::
      tag ()
      {
        return this->tag_.get ();
      }

      void Pick::
      tag (const TagType& x)
      {
        this->tag_.set (x);
      }

      void Pick::
      tag (::std::unique_ptr< TagType > x)
      {
        this->tag_.set (std::move (x));
      }

      const Pick::AccrueType& Pick::
      accrue () const
      {
        return this->accrue_.get ();
      }

      Pick::AccrueType& Pick::
      accrue ()
      {
        return this->accrue_.get ();
      }

      void Pick::
      accrue (const AccrueType& x)
      {
        this->accrue_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      // Pick
      //

      Pick::
      Pick (const UType& u,
            const VType& v,
            const HistoryType& history,
            const SelectionTypeType& selectionType,
            const TagType& tag,
            const AccrueType& accrue)
      : ::xml_schema::Type (),
        u_ (u, this),
        v_ (v, this),
        history_ (history, this),
        selectionType_ (selectionType, this),
        tag_ (tag, this),
        accrue_ (accrue, this)
      {
      }

      Pick::
      Pick (const UType& u,
            const VType& v,
            ::std::unique_ptr< HistoryType > history,
            const SelectionTypeType& selectionType,
            const TagType& tag,
            const AccrueType& accrue)
      : ::xml_schema::Type (),
        u_ (u, this),
        v_ (v, this),
        history_ (std::move (history), this),
        selectionType_ (selectionType, this),
        tag_ (tag, this),
        accrue_ (accrue, this)
      {
      }

      Pick::
      Pick (const Pick& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        u_ (x.u_, f, this),
        v_ (x.v_, f, this),
        history_ (x.history_, f, this),
        selectionType_ (x.selectionType_, f, this),
        tag_ (x.tag_, f, this),
        accrue_ (x.accrue_, f, this)
      {
      }

      Pick::
      Pick (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        u_ (this),
        v_ (this),
        history_ (this),
        selectionType_ (this),
        tag_ (this),
        accrue_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Pick::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // u
          //
          if (n.name () == "u" && n.namespace_ ().empty ())
          {
            if (!u_.present ())
            {
              this->u_.set (UTraits::create (i, f, this));
              continue;
            }
          }

          // v
          //
          if (n.name () == "v" && n.namespace_ ().empty ())
          {
            if (!v_.present ())
            {
              this->v_.set (VTraits::create (i, f, this));
              continue;
            }
          }

          // history
          //
          if (n.name () == "history" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< HistoryType > r (
              HistoryTraits::create (i, f, this));

            if (!history_.present ())
            {
              this->history_.set (::std::move (r));
              continue;
            }
          }

          // selectionType
          //
          if (n.name () == "selectionType" && n.namespace_ ().empty ())
          {
            if (!selectionType_.present ())
            {
              this->selectionType_.set (SelectionTypeTraits::create (i, f, this));
              continue;
            }
          }

          // tag
          //
          if (n.name () == "tag" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TagType > r (
              TagTraits::create (i, f, this));

            if (!tag_.present ())
            {
              this->tag_.set (::std::move (r));
              continue;
            }
          }

          // accrue
          //
          if (n.name () == "accrue" && n.namespace_ ().empty ())
          {
            if (!accrue_.present ())
            {
              this->accrue_.set (AccrueTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!u_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "u",
            "");
        }

        if (!v_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "v",
            "");
        }

        if (!history_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "history",
            "");
        }

        if (!selectionType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "selectionType",
            "");
        }

        if (!tag_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tag",
            "");
        }

        if (!accrue_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "accrue",
            "");
        }
      }

      Pick* Pick::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Pick (*this, f, c);
      }

      Pick& Pick::
      operator= (const Pick& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->u_ = x.u_;
          this->v_ = x.v_;
          this->history_ = x.history_;
          this->selectionType_ = x.selectionType_;
          this->tag_ = x.tag_;
          this->accrue_ = x.accrue_;
        }

        return *this;
      }

      Pick::
      ~Pick ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement& e, const Pick& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // u
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "u",
              e));

          s << ::xml_schema::AsDouble(i.u ());
        }

        // v
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "v",
              e));

          s << ::xml_schema::AsDouble(i.v ());
        }

        // history
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "history",
              e));

          s << i.history ();
        }

        // selectionType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "selectionType",
              e));

          s << i.selectionType ();
        }

        // tag
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tag",
              e));

          s << i.tag ();
        }

        // accrue
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "accrue",
              e));

          s << i.accrue ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

