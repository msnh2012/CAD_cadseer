// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlutruntrim.h"

namespace prj
{
  namespace srl
  {
    namespace utr
    {
      // EdgeToCap
      // 

      const EdgeToCap::KeyIdType& EdgeToCap::
      keyId () const
      {
        return this->keyId_.get ();
      }

      EdgeToCap::KeyIdType& EdgeToCap::
      keyId ()
      {
        return this->keyId_.get ();
      }

      void EdgeToCap::
      keyId (const KeyIdType& x)
      {
        this->keyId_.set (x);
      }

      void EdgeToCap::
      keyId (::std::unique_ptr< KeyIdType > x)
      {
        this->keyId_.set (std::move (x));
      }

      const EdgeToCap::KeyIdType& EdgeToCap::
      keyId_default_value ()
      {
        return keyId_default_value_;
      }

      const EdgeToCap::FaceIdType& EdgeToCap::
      faceId () const
      {
        return this->faceId_.get ();
      }

      EdgeToCap::FaceIdType& EdgeToCap::
      faceId ()
      {
        return this->faceId_.get ();
      }

      void EdgeToCap::
      faceId (const FaceIdType& x)
      {
        this->faceId_.set (x);
      }

      void EdgeToCap::
      faceId (::std::unique_ptr< FaceIdType > x)
      {
        this->faceId_.set (std::move (x));
      }

      const EdgeToCap::FaceIdType& EdgeToCap::
      faceId_default_value ()
      {
        return faceId_default_value_;
      }

      const EdgeToCap::WireIdType& EdgeToCap::
      wireId () const
      {
        return this->wireId_.get ();
      }

      EdgeToCap::WireIdType& EdgeToCap::
      wireId ()
      {
        return this->wireId_.get ();
      }

      void EdgeToCap::
      wireId (const WireIdType& x)
      {
        this->wireId_.set (x);
      }

      void EdgeToCap::
      wireId (::std::unique_ptr< WireIdType > x)
      {
        this->wireId_.set (std::move (x));
      }

      const EdgeToCap::WireIdType& EdgeToCap::
      wireId_default_value ()
      {
        return wireId_default_value_;
      }


      // Untrim
      // 

      const Untrim::BaseType& Untrim::
      base () const
      {
        return this->base_.get ();
      }

      Untrim::BaseType& Untrim::
      base ()
      {
        return this->base_.get ();
      }

      void Untrim::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void Untrim::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const Untrim::SeerShapeType& Untrim::
      seerShape () const
      {
        return this->seerShape_.get ();
      }

      Untrim::SeerShapeType& Untrim::
      seerShape ()
      {
        return this->seerShape_.get ();
      }

      void Untrim::
      seerShape (const SeerShapeType& x)
      {
        this->seerShape_.set (x);
      }

      void Untrim::
      seerShape (::std::unique_ptr< SeerShapeType > x)
      {
        this->seerShape_.set (std::move (x));
      }

      const Untrim::PickType& Untrim::
      pick () const
      {
        return this->pick_.get ();
      }

      Untrim::PickType& Untrim::
      pick ()
      {
        return this->pick_.get ();
      }

      void Untrim::
      pick (const PickType& x)
      {
        this->pick_.set (x);
      }

      void Untrim::
      pick (::std::unique_ptr< PickType > x)
      {
        this->pick_.set (std::move (x));
      }

      const Untrim::OffsetType& Untrim::
      offset () const
      {
        return this->offset_.get ();
      }

      Untrim::OffsetType& Untrim::
      offset ()
      {
        return this->offset_.get ();
      }

      void Untrim::
      offset (const OffsetType& x)
      {
        this->offset_.set (x);
      }

      void Untrim::
      offset (::std::unique_ptr< OffsetType > x)
      {
        this->offset_.set (std::move (x));
      }

      const Untrim::CloseUType& Untrim::
      closeU () const
      {
        return this->closeU_.get ();
      }

      Untrim::CloseUType& Untrim::
      closeU ()
      {
        return this->closeU_.get ();
      }

      void Untrim::
      closeU (const CloseUType& x)
      {
        this->closeU_.set (x);
      }

      void Untrim::
      closeU (::std::unique_ptr< CloseUType > x)
      {
        this->closeU_.set (std::move (x));
      }

      const Untrim::CloseVType& Untrim::
      closeV () const
      {
        return this->closeV_.get ();
      }

      Untrim::CloseVType& Untrim::
      closeV ()
      {
        return this->closeV_.get ();
      }

      void Untrim::
      closeV (const CloseVType& x)
      {
        this->closeV_.set (x);
      }

      void Untrim::
      closeV (::std::unique_ptr< CloseVType > x)
      {
        this->closeV_.set (std::move (x));
      }

      const Untrim::MakeSolidType& Untrim::
      makeSolid () const
      {
        return this->makeSolid_.get ();
      }

      Untrim::MakeSolidType& Untrim::
      makeSolid ()
      {
        return this->makeSolid_.get ();
      }

      void Untrim::
      makeSolid (const MakeSolidType& x)
      {
        this->makeSolid_.set (x);
      }

      void Untrim::
      makeSolid (::std::unique_ptr< MakeSolidType > x)
      {
        this->makeSolid_.set (std::move (x));
      }

      const Untrim::OffsetLabelType& Untrim::
      offsetLabel () const
      {
        return this->offsetLabel_.get ();
      }

      Untrim::OffsetLabelType& Untrim::
      offsetLabel ()
      {
        return this->offsetLabel_.get ();
      }

      void Untrim::
      offsetLabel (const OffsetLabelType& x)
      {
        this->offsetLabel_.set (x);
      }

      void Untrim::
      offsetLabel (::std::unique_ptr< OffsetLabelType > x)
      {
        this->offsetLabel_.set (std::move (x));
      }

      const Untrim::CloseULabelType& Untrim::
      closeULabel () const
      {
        return this->closeULabel_.get ();
      }

      Untrim::CloseULabelType& Untrim::
      closeULabel ()
      {
        return this->closeULabel_.get ();
      }

      void Untrim::
      closeULabel (const CloseULabelType& x)
      {
        this->closeULabel_.set (x);
      }

      void Untrim::
      closeULabel (::std::unique_ptr< CloseULabelType > x)
      {
        this->closeULabel_.set (std::move (x));
      }

      const Untrim::CloseVLabelType& Untrim::
      closeVLabel () const
      {
        return this->closeVLabel_.get ();
      }

      Untrim::CloseVLabelType& Untrim::
      closeVLabel ()
      {
        return this->closeVLabel_.get ();
      }

      void Untrim::
      closeVLabel (const CloseVLabelType& x)
      {
        this->closeVLabel_.set (x);
      }

      void Untrim::
      closeVLabel (::std::unique_ptr< CloseVLabelType > x)
      {
        this->closeVLabel_.set (std::move (x));
      }

      const Untrim::MakeSolidLabelType& Untrim::
      makeSolidLabel () const
      {
        return this->makeSolidLabel_.get ();
      }

      Untrim::MakeSolidLabelType& Untrim::
      makeSolidLabel ()
      {
        return this->makeSolidLabel_.get ();
      }

      void Untrim::
      makeSolidLabel (const MakeSolidLabelType& x)
      {
        this->makeSolidLabel_.set (x);
      }

      void Untrim::
      makeSolidLabel (::std::unique_ptr< MakeSolidLabelType > x)
      {
        this->makeSolidLabel_.set (std::move (x));
      }

      const Untrim::SolidIdType& Untrim::
      solidId () const
      {
        return this->solidId_.get ();
      }

      Untrim::SolidIdType& Untrim::
      solidId ()
      {
        return this->solidId_.get ();
      }

      void Untrim::
      solidId (const SolidIdType& x)
      {
        this->solidId_.set (x);
      }

      void Untrim::
      solidId (::std::unique_ptr< SolidIdType > x)
      {
        this->solidId_.set (std::move (x));
      }

      const Untrim::ShellIdType& Untrim::
      shellId () const
      {
        return this->shellId_.get ();
      }

      Untrim::ShellIdType& Untrim::
      shellId ()
      {
        return this->shellId_.get ();
      }

      void Untrim::
      shellId (const ShellIdType& x)
      {
        this->shellId_.set (x);
      }

      void Untrim::
      shellId (::std::unique_ptr< ShellIdType > x)
      {
        this->shellId_.set (std::move (x));
      }

      const Untrim::UvEdgeIdsSequence& Untrim::
      uvEdgeIds () const
      {
        return this->uvEdgeIds_;
      }

      Untrim::UvEdgeIdsSequence& Untrim::
      uvEdgeIds ()
      {
        return this->uvEdgeIds_;
      }

      void Untrim::
      uvEdgeIds (const UvEdgeIdsSequence& s)
      {
        this->uvEdgeIds_ = s;
      }

      const Untrim::EdgeToCapSequence& Untrim::
      edgeToCap () const
      {
        return this->edgeToCap_;
      }

      Untrim::EdgeToCapSequence& Untrim::
      edgeToCap ()
      {
        return this->edgeToCap_;
      }

      void Untrim::
      edgeToCap (const EdgeToCapSequence& s)
      {
        this->edgeToCap_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace utr
    {
      // EdgeToCap
      //

      const EdgeToCap::KeyIdType EdgeToCap::keyId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      const EdgeToCap::FaceIdType EdgeToCap::faceId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      const EdgeToCap::WireIdType EdgeToCap::wireId_default_value_ (
        "00000000-0000-0000-0000-000000000000");

      EdgeToCap::
      EdgeToCap (const KeyIdType& keyId,
                 const FaceIdType& faceId,
                 const WireIdType& wireId)
      : ::xml_schema::Type (),
        keyId_ (keyId, this),
        faceId_ (faceId, this),
        wireId_ (wireId, this)
      {
      }

      EdgeToCap::
      EdgeToCap (const EdgeToCap& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        keyId_ (x.keyId_, f, this),
        faceId_ (x.faceId_, f, this),
        wireId_ (x.wireId_, f, this)
      {
      }

      EdgeToCap::
      EdgeToCap (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        keyId_ (this),
        faceId_ (this),
        wireId_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void EdgeToCap::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // keyId
          //
          if (n.name () == "keyId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< KeyIdType > r (
              KeyIdTraits::create (i, f, this));

            if (!keyId_.present ())
            {
              this->keyId_.set (::std::move (r));
              continue;
            }
          }

          // faceId
          //
          if (n.name () == "faceId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< FaceIdType > r (
              FaceIdTraits::create (i, f, this));

            if (!faceId_.present ())
            {
              this->faceId_.set (::std::move (r));
              continue;
            }
          }

          // wireId
          //
          if (n.name () == "wireId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< WireIdType > r (
              WireIdTraits::create (i, f, this));

            if (!wireId_.present ())
            {
              this->wireId_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!keyId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "keyId",
            "");
        }

        if (!faceId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "faceId",
            "");
        }

        if (!wireId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "wireId",
            "");
        }
      }

      EdgeToCap* EdgeToCap::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class EdgeToCap (*this, f, c);
      }

      EdgeToCap& EdgeToCap::
      operator= (const EdgeToCap& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->keyId_ = x.keyId_;
          this->faceId_ = x.faceId_;
          this->wireId_ = x.wireId_;
        }

        return *this;
      }

      EdgeToCap::
      ~EdgeToCap ()
      {
      }

      // Untrim
      //

      Untrim::
      Untrim (const BaseType& base,
              const SeerShapeType& seerShape,
              const PickType& pick,
              const OffsetType& offset,
              const CloseUType& closeU,
              const CloseVType& closeV,
              const MakeSolidType& makeSolid,
              const OffsetLabelType& offsetLabel,
              const CloseULabelType& closeULabel,
              const CloseVLabelType& closeVLabel,
              const MakeSolidLabelType& makeSolidLabel,
              const SolidIdType& solidId,
              const ShellIdType& shellId)
      : ::xml_schema::Type (),
        base_ (base, this),
        seerShape_ (seerShape, this),
        pick_ (pick, this),
        offset_ (offset, this),
        closeU_ (closeU, this),
        closeV_ (closeV, this),
        makeSolid_ (makeSolid, this),
        offsetLabel_ (offsetLabel, this),
        closeULabel_ (closeULabel, this),
        closeVLabel_ (closeVLabel, this),
        makeSolidLabel_ (makeSolidLabel, this),
        solidId_ (solidId, this),
        shellId_ (shellId, this),
        uvEdgeIds_ (this),
        edgeToCap_ (this)
      {
      }

      Untrim::
      Untrim (::std::unique_ptr< BaseType > base,
              ::std::unique_ptr< SeerShapeType > seerShape,
              ::std::unique_ptr< PickType > pick,
              ::std::unique_ptr< OffsetType > offset,
              ::std::unique_ptr< CloseUType > closeU,
              ::std::unique_ptr< CloseVType > closeV,
              ::std::unique_ptr< MakeSolidType > makeSolid,
              ::std::unique_ptr< OffsetLabelType > offsetLabel,
              ::std::unique_ptr< CloseULabelType > closeULabel,
              ::std::unique_ptr< CloseVLabelType > closeVLabel,
              ::std::unique_ptr< MakeSolidLabelType > makeSolidLabel,
              const SolidIdType& solidId,
              const ShellIdType& shellId)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        seerShape_ (std::move (seerShape), this),
        pick_ (std::move (pick), this),
        offset_ (std::move (offset), this),
        closeU_ (std::move (closeU), this),
        closeV_ (std::move (closeV), this),
        makeSolid_ (std::move (makeSolid), this),
        offsetLabel_ (std::move (offsetLabel), this),
        closeULabel_ (std::move (closeULabel), this),
        closeVLabel_ (std::move (closeVLabel), this),
        makeSolidLabel_ (std::move (makeSolidLabel), this),
        solidId_ (solidId, this),
        shellId_ (shellId, this),
        uvEdgeIds_ (this),
        edgeToCap_ (this)
      {
      }

      Untrim::
      Untrim (const Untrim& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        seerShape_ (x.seerShape_, f, this),
        pick_ (x.pick_, f, this),
        offset_ (x.offset_, f, this),
        closeU_ (x.closeU_, f, this),
        closeV_ (x.closeV_, f, this),
        makeSolid_ (x.makeSolid_, f, this),
        offsetLabel_ (x.offsetLabel_, f, this),
        closeULabel_ (x.closeULabel_, f, this),
        closeVLabel_ (x.closeVLabel_, f, this),
        makeSolidLabel_ (x.makeSolidLabel_, f, this),
        solidId_ (x.solidId_, f, this),
        shellId_ (x.shellId_, f, this),
        uvEdgeIds_ (x.uvEdgeIds_, f, this),
        edgeToCap_ (x.edgeToCap_, f, this)
      {
      }

      Untrim::
      Untrim (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        seerShape_ (this),
        pick_ (this),
        offset_ (this),
        closeU_ (this),
        closeV_ (this),
        makeSolid_ (this),
        offsetLabel_ (this),
        closeULabel_ (this),
        closeVLabel_ (this),
        makeSolidLabel_ (this),
        solidId_ (this),
        shellId_ (this),
        uvEdgeIds_ (this),
        edgeToCap_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Untrim::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // seerShape
          //
          if (n.name () == "seerShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SeerShapeType > r (
              SeerShapeTraits::create (i, f, this));

            if (!seerShape_.present ())
            {
              this->seerShape_.set (::std::move (r));
              continue;
            }
          }

          // pick
          //
          if (n.name () == "pick" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PickType > r (
              PickTraits::create (i, f, this));

            if (!pick_.present ())
            {
              this->pick_.set (::std::move (r));
              continue;
            }
          }

          // offset
          //
          if (n.name () == "offset" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< OffsetType > r (
              OffsetTraits::create (i, f, this));

            if (!offset_.present ())
            {
              this->offset_.set (::std::move (r));
              continue;
            }
          }

          // closeU
          //
          if (n.name () == "closeU" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CloseUType > r (
              CloseUTraits::create (i, f, this));

            if (!closeU_.present ())
            {
              this->closeU_.set (::std::move (r));
              continue;
            }
          }

          // closeV
          //
          if (n.name () == "closeV" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CloseVType > r (
              CloseVTraits::create (i, f, this));

            if (!closeV_.present ())
            {
              this->closeV_.set (::std::move (r));
              continue;
            }
          }

          // makeSolid
          //
          if (n.name () == "makeSolid" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< MakeSolidType > r (
              MakeSolidTraits::create (i, f, this));

            if (!makeSolid_.present ())
            {
              this->makeSolid_.set (::std::move (r));
              continue;
            }
          }

          // offsetLabel
          //
          if (n.name () == "offsetLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< OffsetLabelType > r (
              OffsetLabelTraits::create (i, f, this));

            if (!offsetLabel_.present ())
            {
              this->offsetLabel_.set (::std::move (r));
              continue;
            }
          }

          // closeULabel
          //
          if (n.name () == "closeULabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CloseULabelType > r (
              CloseULabelTraits::create (i, f, this));

            if (!closeULabel_.present ())
            {
              this->closeULabel_.set (::std::move (r));
              continue;
            }
          }

          // closeVLabel
          //
          if (n.name () == "closeVLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CloseVLabelType > r (
              CloseVLabelTraits::create (i, f, this));

            if (!closeVLabel_.present ())
            {
              this->closeVLabel_.set (::std::move (r));
              continue;
            }
          }

          // makeSolidLabel
          //
          if (n.name () == "makeSolidLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< MakeSolidLabelType > r (
              MakeSolidLabelTraits::create (i, f, this));

            if (!makeSolidLabel_.present ())
            {
              this->makeSolidLabel_.set (::std::move (r));
              continue;
            }
          }

          // solidId
          //
          if (n.name () == "solidId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SolidIdType > r (
              SolidIdTraits::create (i, f, this));

            if (!solidId_.present ())
            {
              this->solidId_.set (::std::move (r));
              continue;
            }
          }

          // shellId
          //
          if (n.name () == "shellId" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ShellIdType > r (
              ShellIdTraits::create (i, f, this));

            if (!shellId_.present ())
            {
              this->shellId_.set (::std::move (r));
              continue;
            }
          }

          // uvEdgeIds
          //
          if (n.name () == "uvEdgeIds" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< UvEdgeIdsType > r (
              UvEdgeIdsTraits::create (i, f, this));

            this->uvEdgeIds_.push_back (::std::move (r));
            continue;
          }

          // edgeToCap
          //
          if (n.name () == "edgeToCap" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< EdgeToCapType > r (
              EdgeToCapTraits::create (i, f, this));

            this->edgeToCap_.push_back (::std::move (r));
            continue;
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!seerShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "seerShape",
            "");
        }

        if (!pick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "pick",
            "");
        }

        if (!offset_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "offset",
            "");
        }

        if (!closeU_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "closeU",
            "");
        }

        if (!closeV_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "closeV",
            "");
        }

        if (!makeSolid_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "makeSolid",
            "");
        }

        if (!offsetLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "offsetLabel",
            "");
        }

        if (!closeULabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "closeULabel",
            "");
        }

        if (!closeVLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "closeVLabel",
            "");
        }

        if (!makeSolidLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "makeSolidLabel",
            "");
        }

        if (!solidId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "solidId",
            "");
        }

        if (!shellId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "shellId",
            "");
        }
      }

      Untrim* Untrim::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Untrim (*this, f, c);
      }

      Untrim& Untrim::
      operator= (const Untrim& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->seerShape_ = x.seerShape_;
          this->pick_ = x.pick_;
          this->offset_ = x.offset_;
          this->closeU_ = x.closeU_;
          this->closeV_ = x.closeV_;
          this->makeSolid_ = x.makeSolid_;
          this->offsetLabel_ = x.offsetLabel_;
          this->closeULabel_ = x.closeULabel_;
          this->closeVLabel_ = x.closeVLabel_;
          this->makeSolidLabel_ = x.makeSolidLabel_;
          this->solidId_ = x.solidId_;
          this->shellId_ = x.shellId_;
          this->uvEdgeIds_ = x.uvEdgeIds_;
          this->edgeToCap_ = x.edgeToCap_;
        }

        return *this;
      }

      Untrim::
      ~Untrim ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace utr
    {
      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (const ::std::string& u,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::utr::Untrim > (
          ::prj::srl::utr::untrim (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (const ::std::string& u,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::utr::Untrim > (
          ::prj::srl::utr::untrim (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::utr::Untrim > (
          ::prj::srl::utr::untrim (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::utr::untrim (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::utr::untrim (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::utr::untrim (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::utr::untrim (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::utr::untrim (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::utr::untrim (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::xercesc::InputSource& i,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::utr::Untrim > (
          ::prj::srl::utr::untrim (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::xercesc::InputSource& i,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::utr::Untrim > (
          ::prj::srl::utr::untrim (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::utr::Untrim > (
          ::prj::srl::utr::untrim (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (const ::xercesc::DOMDocument& doc,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::utr::Untrim > (
            ::prj::srl::utr::untrim (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "untrim" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/utr")
        {
          ::std::unique_ptr< ::prj::srl::utr::Untrim > r (
            ::xsd::cxx::tree::traits< ::prj::srl::utr::Untrim, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "untrim",
          "http://www.cadseer.com/prj/srl/utr");
      }

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "untrim" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/utr")
        {
          ::std::unique_ptr< ::prj::srl::utr::Untrim > r (
            ::xsd::cxx::tree::traits< ::prj::srl::utr::Untrim, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "untrim",
          "http://www.cadseer.com/prj/srl/utr");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace utr
    {
      void
      operator<< (::xercesc::DOMElement& e, const EdgeToCap& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // keyId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "keyId",
              e));

          s << i.keyId ();
        }

        // faceId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "faceId",
              e));

          s << i.faceId ();
        }

        // wireId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "wireId",
              e));

          s << i.wireId ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const Untrim& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // seerShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "seerShape",
              e));

          s << i.seerShape ();
        }

        // pick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "pick",
              e));

          s << i.pick ();
        }

        // offset
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "offset",
              e));

          s << i.offset ();
        }

        // closeU
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "closeU",
              e));

          s << i.closeU ();
        }

        // closeV
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "closeV",
              e));

          s << i.closeV ();
        }

        // makeSolid
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "makeSolid",
              e));

          s << i.makeSolid ();
        }

        // offsetLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "offsetLabel",
              e));

          s << i.offsetLabel ();
        }

        // closeULabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "closeULabel",
              e));

          s << i.closeULabel ();
        }

        // closeVLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "closeVLabel",
              e));

          s << i.closeVLabel ();
        }

        // makeSolidLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "makeSolidLabel",
              e));

          s << i.makeSolidLabel ();
        }

        // solidId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "solidId",
              e));

          s << i.solidId ();
        }

        // shellId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "shellId",
              e));

          s << i.shellId ();
        }

        // uvEdgeIds
        //
        for (Untrim::UvEdgeIdsConstIterator
             b (i.uvEdgeIds ().begin ()), n (i.uvEdgeIds ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "uvEdgeIds",
              e));

          s << *b;
        }

        // edgeToCap
        //
        for (Untrim::EdgeToCapConstIterator
             b (i.edgeToCap ().begin ()), n (i.edgeToCap ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "edgeToCap",
              e));

          s << *b;
        }
      }

      void
      untrim (::std::ostream& o,
              const ::prj::srl::utr::Untrim& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::utr::untrim (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      untrim (::std::ostream& o,
              const ::prj::srl::utr::Untrim& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::utr::untrim (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      untrim (::std::ostream& o,
              const ::prj::srl::utr::Untrim& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::utr::untrim (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      untrim (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::utr::Untrim& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::utr::untrim (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      untrim (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::utr::Untrim& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::utr::untrim (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      untrim (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::utr::Untrim& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::utr::untrim (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      untrim (::xercesc::DOMDocument& d,
              const ::prj::srl::utr::Untrim& s,
              ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "untrim" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/utr")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "untrim",
            "http://www.cadseer.com/prj/srl/utr");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      untrim (const ::prj::srl::utr::Untrim& s,
              const ::xml_schema::NamespaceInfomap& m,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "untrim",
            "http://www.cadseer.com/prj/srl/utr",
            m, f));

        ::prj::srl::utr::untrim (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

