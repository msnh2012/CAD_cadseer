// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_DTAS_PRJSRLDTASDATUMAXIS_H
#define PRJ_SRL_DTAS_PRJSRLDTASDATUMAXIS_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace dtas
    {
      class DatumAxis;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace dtas
    {
      class DatumAxis: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // axisType
        //
        typedef ::prj::srl::spt::Parameter AxisTypeType;
        typedef ::xsd::cxx::tree::traits< AxisTypeType, char > AxisTypeTraits;

        const AxisTypeType&
        axisType () const;

        AxisTypeType&
        axisType ();

        void
        axisType (const AxisTypeType& x);

        void
        axisType (::std::unique_ptr< AxisTypeType > p);

        // origin
        //
        typedef ::prj::srl::spt::Parameter OriginType;
        typedef ::xsd::cxx::tree::traits< OriginType, char > OriginTraits;

        const OriginType&
        origin () const;

        OriginType&
        origin ();

        void
        origin (const OriginType& x);

        void
        origin (::std::unique_ptr< OriginType > p);

        // direction
        //
        typedef ::prj::srl::spt::Parameter DirectionType;
        typedef ::xsd::cxx::tree::traits< DirectionType, char > DirectionTraits;

        const DirectionType&
        direction () const;

        DirectionType&
        direction ();

        void
        direction (const DirectionType& x);

        void
        direction (::std::unique_ptr< DirectionType > p);

        // csys
        //
        typedef ::prj::srl::spt::Parameter CsysType;
        typedef ::xsd::cxx::tree::traits< CsysType, char > CsysTraits;

        const CsysType&
        csys () const;

        CsysType&
        csys ();

        void
        csys (const CsysType& x);

        void
        csys (::std::unique_ptr< CsysType > p);

        // autoSize
        //
        typedef ::prj::srl::spt::Parameter AutoSizeType;
        typedef ::xsd::cxx::tree::traits< AutoSizeType, char > AutoSizeTraits;

        const AutoSizeType&
        autoSize () const;

        AutoSizeType&
        autoSize ();

        void
        autoSize (const AutoSizeType& x);

        void
        autoSize (::std::unique_ptr< AutoSizeType > p);

        // size
        //
        typedef ::prj::srl::spt::Parameter SizeType;
        typedef ::xsd::cxx::tree::traits< SizeType, char > SizeTraits;

        const SizeType&
        size () const;

        SizeType&
        size ();

        void
        size (const SizeType& x);

        void
        size (::std::unique_ptr< SizeType > p);

        // linkedAxis
        //
        typedef ::prj::srl::spt::Parameter LinkedAxisType;
        typedef ::xsd::cxx::tree::optional< LinkedAxisType > LinkedAxisOptional;
        typedef ::xsd::cxx::tree::traits< LinkedAxisType, char > LinkedAxisTraits;

        const LinkedAxisOptional&
        linkedAxis () const;

        LinkedAxisOptional&
        linkedAxis ();

        void
        linkedAxis (const LinkedAxisType& x);

        void
        linkedAxis (const LinkedAxisOptional& x);

        void
        linkedAxis (::std::unique_ptr< LinkedAxisType > p);

        // picks
        //
        typedef ::prj::srl::spt::Parameter PicksType;
        typedef ::xsd::cxx::tree::optional< PicksType > PicksOptional;
        typedef ::xsd::cxx::tree::traits< PicksType, char > PicksTraits;

        const PicksOptional&
        picks () const;

        PicksOptional&
        picks ();

        void
        picks (const PicksType& x);

        void
        picks (const PicksOptional& x);

        void
        picks (::std::unique_ptr< PicksType > p);

        // csysDragger
        //
        typedef ::prj::srl::spt::CSysDragger CsysDraggerType;
        typedef ::xsd::cxx::tree::traits< CsysDraggerType, char > CsysDraggerTraits;

        const CsysDraggerType&
        csysDragger () const;

        CsysDraggerType&
        csysDragger ();

        void
        csysDragger (const CsysDraggerType& x);

        void
        csysDragger (::std::unique_ptr< CsysDraggerType > p);

        // originLabel
        //
        typedef ::prj::srl::spt::PLabel OriginLabelType;
        typedef ::xsd::cxx::tree::traits< OriginLabelType, char > OriginLabelTraits;

        const OriginLabelType&
        originLabel () const;

        OriginLabelType&
        originLabel ();

        void
        originLabel (const OriginLabelType& x);

        void
        originLabel (::std::unique_ptr< OriginLabelType > p);

        // directionLabel
        //
        typedef ::prj::srl::spt::PLabel DirectionLabelType;
        typedef ::xsd::cxx::tree::traits< DirectionLabelType, char > DirectionLabelTraits;

        const DirectionLabelType&
        directionLabel () const;

        DirectionLabelType&
        directionLabel ();

        void
        directionLabel (const DirectionLabelType& x);

        void
        directionLabel (::std::unique_ptr< DirectionLabelType > p);

        // autoSizeLabel
        //
        typedef ::prj::srl::spt::PLabel AutoSizeLabelType;
        typedef ::xsd::cxx::tree::traits< AutoSizeLabelType, char > AutoSizeLabelTraits;

        const AutoSizeLabelType&
        autoSizeLabel () const;

        AutoSizeLabelType&
        autoSizeLabel ();

        void
        autoSizeLabel (const AutoSizeLabelType& x);

        void
        autoSizeLabel (::std::unique_ptr< AutoSizeLabelType > p);

        // sizeLabel
        //
        typedef ::prj::srl::spt::PLabel SizeLabelType;
        typedef ::xsd::cxx::tree::traits< SizeLabelType, char > SizeLabelTraits;

        const SizeLabelType&
        sizeLabel () const;

        SizeLabelType&
        sizeLabel ();

        void
        sizeLabel (const SizeLabelType& x);

        void
        sizeLabel (::std::unique_ptr< SizeLabelType > p);

        // cachedSize
        //
        typedef ::xml_schema::Double CachedSizeType;
        typedef ::xsd::cxx::tree::traits< CachedSizeType, char, ::xsd::cxx::tree::schema_type::double_ > CachedSizeTraits;

        const CachedSizeType&
        cachedSize () const;

        CachedSizeType&
        cachedSize ();

        void
        cachedSize (const CachedSizeType& x);

        // Constructors.
        //
        DatumAxis (const BaseType&,
                   const AxisTypeType&,
                   const OriginType&,
                   const DirectionType&,
                   const CsysType&,
                   const AutoSizeType&,
                   const SizeType&,
                   const CsysDraggerType&,
                   const OriginLabelType&,
                   const DirectionLabelType&,
                   const AutoSizeLabelType&,
                   const SizeLabelType&,
                   const CachedSizeType&);

        DatumAxis (::std::unique_ptr< BaseType >,
                   ::std::unique_ptr< AxisTypeType >,
                   ::std::unique_ptr< OriginType >,
                   ::std::unique_ptr< DirectionType >,
                   ::std::unique_ptr< CsysType >,
                   ::std::unique_ptr< AutoSizeType >,
                   ::std::unique_ptr< SizeType >,
                   ::std::unique_ptr< CsysDraggerType >,
                   ::std::unique_ptr< OriginLabelType >,
                   ::std::unique_ptr< DirectionLabelType >,
                   ::std::unique_ptr< AutoSizeLabelType >,
                   ::std::unique_ptr< SizeLabelType >,
                   const CachedSizeType&);

        DatumAxis (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        DatumAxis (const DatumAxis& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual DatumAxis*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        DatumAxis&
        operator= (const DatumAxis& x);

        virtual 
        ~DatumAxis ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< AxisTypeType > axisType_;
        ::xsd::cxx::tree::one< OriginType > origin_;
        ::xsd::cxx::tree::one< DirectionType > direction_;
        ::xsd::cxx::tree::one< CsysType > csys_;
        ::xsd::cxx::tree::one< AutoSizeType > autoSize_;
        ::xsd::cxx::tree::one< SizeType > size_;
        LinkedAxisOptional linkedAxis_;
        PicksOptional picks_;
        ::xsd::cxx::tree::one< CsysDraggerType > csysDragger_;
        ::xsd::cxx::tree::one< OriginLabelType > originLabel_;
        ::xsd::cxx::tree::one< DirectionLabelType > directionLabel_;
        ::xsd::cxx::tree::one< AutoSizeLabelType > autoSizeLabel_;
        ::xsd::cxx::tree::one< SizeLabelType > sizeLabel_;
        ::xsd::cxx::tree::one< CachedSizeType > cachedSize_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace dtas
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (const ::std::string& uri,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (const ::std::string& uri,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::xercesc::InputSource& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::xercesc::InputSource& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (const ::xercesc::DOMDocument& d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace dtas
    {
      void
      operator<< (::xercesc::DOMElement&, const DatumAxis&);

      // Serialize to std::ostream.
      //

      void
      datumAxis (::std::ostream& os,
                 const ::prj::srl::dtas::DatumAxis& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      datumAxis (::std::ostream& os,
                 const ::prj::srl::dtas::DatumAxis& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      datumAxis (::std::ostream& os,
                 const ::prj::srl::dtas::DatumAxis& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      datumAxis (::xercesc::XMLFormatTarget& ft,
                 const ::prj::srl::dtas::DatumAxis& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      datumAxis (::xercesc::XMLFormatTarget& ft,
                 const ::prj::srl::dtas::DatumAxis& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      datumAxis (::xercesc::XMLFormatTarget& ft,
                 const ::prj::srl::dtas::DatumAxis& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      datumAxis (::xercesc::DOMDocument& d,
                 const ::prj::srl::dtas::DatumAxis& x,
                 ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      datumAxis (const ::prj::srl::dtas::DatumAxis& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_DTAS_PRJSRLDTASDATUMAXIS_H
