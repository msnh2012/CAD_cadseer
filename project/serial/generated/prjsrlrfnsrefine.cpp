// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrlrfnsrefine.h"

namespace prj
{
  namespace srl
  {
    namespace rfns
    {
      // Refine
      // 

      const Refine::BaseType& Refine::
      base () const
      {
        return this->base_.get ();
      }

      Refine::BaseType& Refine::
      base ()
      {
        return this->base_.get ();
      }

      void Refine::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void Refine::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const Refine::SShapeType& Refine::
      sShape () const
      {
        return this->sShape_.get ();
      }

      Refine::SShapeType& Refine::
      sShape ()
      {
        return this->sShape_.get ();
      }

      void Refine::
      sShape (const SShapeType& x)
      {
        this->sShape_.set (x);
      }

      void Refine::
      sShape (::std::unique_ptr< SShapeType > x)
      {
        this->sShape_.set (std::move (x));
      }

      const Refine::ShapeMapSequence& Refine::
      shapeMap () const
      {
        return this->shapeMap_;
      }

      Refine::ShapeMapSequence& Refine::
      shapeMap ()
      {
        return this->shapeMap_;
      }

      void Refine::
      shapeMap (const ShapeMapSequence& s)
      {
        this->shapeMap_ = s;
      }

      const Refine::UnifyFacesType& Refine::
      unifyFaces () const
      {
        return this->unifyFaces_.get ();
      }

      Refine::UnifyFacesType& Refine::
      unifyFaces ()
      {
        return this->unifyFaces_.get ();
      }

      void Refine::
      unifyFaces (const UnifyFacesType& x)
      {
        this->unifyFaces_.set (x);
      }

      void Refine::
      unifyFaces (::std::unique_ptr< UnifyFacesType > x)
      {
        this->unifyFaces_.set (std::move (x));
      }

      const Refine::UnifyEdgesType& Refine::
      unifyEdges () const
      {
        return this->unifyEdges_.get ();
      }

      Refine::UnifyEdgesType& Refine::
      unifyEdges ()
      {
        return this->unifyEdges_.get ();
      }

      void Refine::
      unifyEdges (const UnifyEdgesType& x)
      {
        this->unifyEdges_.set (x);
      }

      void Refine::
      unifyEdges (::std::unique_ptr< UnifyEdgesType > x)
      {
        this->unifyEdges_.set (std::move (x));
      }

      const Refine::ConcatBSplinesType& Refine::
      concatBSplines () const
      {
        return this->concatBSplines_.get ();
      }

      Refine::ConcatBSplinesType& Refine::
      concatBSplines ()
      {
        return this->concatBSplines_.get ();
      }

      void Refine::
      concatBSplines (const ConcatBSplinesType& x)
      {
        this->concatBSplines_.set (x);
      }

      void Refine::
      concatBSplines (::std::unique_ptr< ConcatBSplinesType > x)
      {
        this->concatBSplines_.set (std::move (x));
      }

      const Refine::TightenFacesType& Refine::
      tightenFaces () const
      {
        return this->tightenFaces_.get ();
      }

      Refine::TightenFacesType& Refine::
      tightenFaces ()
      {
        return this->tightenFaces_.get ();
      }

      void Refine::
      tightenFaces (const TightenFacesType& x)
      {
        this->tightenFaces_.set (x);
      }

      void Refine::
      tightenFaces (::std::unique_ptr< TightenFacesType > x)
      {
        this->tightenFaces_.set (std::move (x));
      }

      const Refine::TightenEdgesType& Refine::
      tightenEdges () const
      {
        return this->tightenEdges_.get ();
      }

      Refine::TightenEdgesType& Refine::
      tightenEdges ()
      {
        return this->tightenEdges_.get ();
      }

      void Refine::
      tightenEdges (const TightenEdgesType& x)
      {
        this->tightenEdges_.set (x);
      }

      void Refine::
      tightenEdges (::std::unique_ptr< TightenEdgesType > x)
      {
        this->tightenEdges_.set (std::move (x));
      }

      const Refine::TightenVerticesType& Refine::
      tightenVertices () const
      {
        return this->tightenVertices_.get ();
      }

      Refine::TightenVerticesType& Refine::
      tightenVertices ()
      {
        return this->tightenVertices_.get ();
      }

      void Refine::
      tightenVertices (const TightenVerticesType& x)
      {
        this->tightenVertices_.set (x);
      }

      void Refine::
      tightenVertices (::std::unique_ptr< TightenVerticesType > x)
      {
        this->tightenVertices_.set (std::move (x));
      }

      const Refine::SameParameterType& Refine::
      sameParameter () const
      {
        return this->sameParameter_.get ();
      }

      Refine::SameParameterType& Refine::
      sameParameter ()
      {
        return this->sameParameter_.get ();
      }

      void Refine::
      sameParameter (const SameParameterType& x)
      {
        this->sameParameter_.set (x);
      }

      void Refine::
      sameParameter (::std::unique_ptr< SameParameterType > x)
      {
        this->sameParameter_.set (std::move (x));
      }

      const Refine::UnifyFacesLabelType& Refine::
      unifyFacesLabel () const
      {
        return this->unifyFacesLabel_.get ();
      }

      Refine::UnifyFacesLabelType& Refine::
      unifyFacesLabel ()
      {
        return this->unifyFacesLabel_.get ();
      }

      void Refine::
      unifyFacesLabel (const UnifyFacesLabelType& x)
      {
        this->unifyFacesLabel_.set (x);
      }

      void Refine::
      unifyFacesLabel (::std::unique_ptr< UnifyFacesLabelType > x)
      {
        this->unifyFacesLabel_.set (std::move (x));
      }

      const Refine::UnifyEdgesLabelType& Refine::
      unifyEdgesLabel () const
      {
        return this->unifyEdgesLabel_.get ();
      }

      Refine::UnifyEdgesLabelType& Refine::
      unifyEdgesLabel ()
      {
        return this->unifyEdgesLabel_.get ();
      }

      void Refine::
      unifyEdgesLabel (const UnifyEdgesLabelType& x)
      {
        this->unifyEdgesLabel_.set (x);
      }

      void Refine::
      unifyEdgesLabel (::std::unique_ptr< UnifyEdgesLabelType > x)
      {
        this->unifyEdgesLabel_.set (std::move (x));
      }

      const Refine::ConcatBSplinesLabelType& Refine::
      concatBSplinesLabel () const
      {
        return this->concatBSplinesLabel_.get ();
      }

      Refine::ConcatBSplinesLabelType& Refine::
      concatBSplinesLabel ()
      {
        return this->concatBSplinesLabel_.get ();
      }

      void Refine::
      concatBSplinesLabel (const ConcatBSplinesLabelType& x)
      {
        this->concatBSplinesLabel_.set (x);
      }

      void Refine::
      concatBSplinesLabel (::std::unique_ptr< ConcatBSplinesLabelType > x)
      {
        this->concatBSplinesLabel_.set (std::move (x));
      }

      const Refine::TightenFacesLabelType& Refine::
      tightenFacesLabel () const
      {
        return this->tightenFacesLabel_.get ();
      }

      Refine::TightenFacesLabelType& Refine::
      tightenFacesLabel ()
      {
        return this->tightenFacesLabel_.get ();
      }

      void Refine::
      tightenFacesLabel (const TightenFacesLabelType& x)
      {
        this->tightenFacesLabel_.set (x);
      }

      void Refine::
      tightenFacesLabel (::std::unique_ptr< TightenFacesLabelType > x)
      {
        this->tightenFacesLabel_.set (std::move (x));
      }

      const Refine::TightenEdgesLabelType& Refine::
      tightenEdgesLabel () const
      {
        return this->tightenEdgesLabel_.get ();
      }

      Refine::TightenEdgesLabelType& Refine::
      tightenEdgesLabel ()
      {
        return this->tightenEdgesLabel_.get ();
      }

      void Refine::
      tightenEdgesLabel (const TightenEdgesLabelType& x)
      {
        this->tightenEdgesLabel_.set (x);
      }

      void Refine::
      tightenEdgesLabel (::std::unique_ptr< TightenEdgesLabelType > x)
      {
        this->tightenEdgesLabel_.set (std::move (x));
      }

      const Refine::TightenVerticesLabelType& Refine::
      tightenVerticesLabel () const
      {
        return this->tightenVerticesLabel_.get ();
      }

      Refine::TightenVerticesLabelType& Refine::
      tightenVerticesLabel ()
      {
        return this->tightenVerticesLabel_.get ();
      }

      void Refine::
      tightenVerticesLabel (const TightenVerticesLabelType& x)
      {
        this->tightenVerticesLabel_.set (x);
      }

      void Refine::
      tightenVerticesLabel (::std::unique_ptr< TightenVerticesLabelType > x)
      {
        this->tightenVerticesLabel_.set (std::move (x));
      }

      const Refine::SameParameterLabelType& Refine::
      sameParameterLabel () const
      {
        return this->sameParameterLabel_.get ();
      }

      Refine::SameParameterLabelType& Refine::
      sameParameterLabel ()
      {
        return this->sameParameterLabel_.get ();
      }

      void Refine::
      sameParameterLabel (const SameParameterLabelType& x)
      {
        this->sameParameterLabel_.set (x);
      }

      void Refine::
      sameParameterLabel (::std::unique_ptr< SameParameterLabelType > x)
      {
        this->sameParameterLabel_.set (std::move (x));
      }

      const Refine::GridLocationType& Refine::
      gridLocation () const
      {
        return this->gridLocation_.get ();
      }

      Refine::GridLocationType& Refine::
      gridLocation ()
      {
        return this->gridLocation_.get ();
      }

      void Refine::
      gridLocation (const GridLocationType& x)
      {
        this->gridLocation_.set (x);
      }

      void Refine::
      gridLocation (::std::unique_ptr< GridLocationType > x)
      {
        this->gridLocation_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace rfns
    {
      // Refine
      //

      Refine::
      Refine (const BaseType& base,
              const SShapeType& sShape,
              const UnifyFacesType& unifyFaces,
              const UnifyEdgesType& unifyEdges,
              const ConcatBSplinesType& concatBSplines,
              const TightenFacesType& tightenFaces,
              const TightenEdgesType& tightenEdges,
              const TightenVerticesType& tightenVertices,
              const SameParameterType& sameParameter,
              const UnifyFacesLabelType& unifyFacesLabel,
              const UnifyEdgesLabelType& unifyEdgesLabel,
              const ConcatBSplinesLabelType& concatBSplinesLabel,
              const TightenFacesLabelType& tightenFacesLabel,
              const TightenEdgesLabelType& tightenEdgesLabel,
              const TightenVerticesLabelType& tightenVerticesLabel,
              const SameParameterLabelType& sameParameterLabel,
              const GridLocationType& gridLocation)
      : ::xml_schema::Type (),
        base_ (base, this),
        sShape_ (sShape, this),
        shapeMap_ (this),
        unifyFaces_ (unifyFaces, this),
        unifyEdges_ (unifyEdges, this),
        concatBSplines_ (concatBSplines, this),
        tightenFaces_ (tightenFaces, this),
        tightenEdges_ (tightenEdges, this),
        tightenVertices_ (tightenVertices, this),
        sameParameter_ (sameParameter, this),
        unifyFacesLabel_ (unifyFacesLabel, this),
        unifyEdgesLabel_ (unifyEdgesLabel, this),
        concatBSplinesLabel_ (concatBSplinesLabel, this),
        tightenFacesLabel_ (tightenFacesLabel, this),
        tightenEdgesLabel_ (tightenEdgesLabel, this),
        tightenVerticesLabel_ (tightenVerticesLabel, this),
        sameParameterLabel_ (sameParameterLabel, this),
        gridLocation_ (gridLocation, this)
      {
      }

      Refine::
      Refine (::std::unique_ptr< BaseType > base,
              ::std::unique_ptr< SShapeType > sShape,
              ::std::unique_ptr< UnifyFacesType > unifyFaces,
              ::std::unique_ptr< UnifyEdgesType > unifyEdges,
              ::std::unique_ptr< ConcatBSplinesType > concatBSplines,
              ::std::unique_ptr< TightenFacesType > tightenFaces,
              ::std::unique_ptr< TightenEdgesType > tightenEdges,
              ::std::unique_ptr< TightenVerticesType > tightenVertices,
              ::std::unique_ptr< SameParameterType > sameParameter,
              ::std::unique_ptr< UnifyFacesLabelType > unifyFacesLabel,
              ::std::unique_ptr< UnifyEdgesLabelType > unifyEdgesLabel,
              ::std::unique_ptr< ConcatBSplinesLabelType > concatBSplinesLabel,
              ::std::unique_ptr< TightenFacesLabelType > tightenFacesLabel,
              ::std::unique_ptr< TightenEdgesLabelType > tightenEdgesLabel,
              ::std::unique_ptr< TightenVerticesLabelType > tightenVerticesLabel,
              ::std::unique_ptr< SameParameterLabelType > sameParameterLabel,
              ::std::unique_ptr< GridLocationType > gridLocation)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        sShape_ (std::move (sShape), this),
        shapeMap_ (this),
        unifyFaces_ (std::move (unifyFaces), this),
        unifyEdges_ (std::move (unifyEdges), this),
        concatBSplines_ (std::move (concatBSplines), this),
        tightenFaces_ (std::move (tightenFaces), this),
        tightenEdges_ (std::move (tightenEdges), this),
        tightenVertices_ (std::move (tightenVertices), this),
        sameParameter_ (std::move (sameParameter), this),
        unifyFacesLabel_ (std::move (unifyFacesLabel), this),
        unifyEdgesLabel_ (std::move (unifyEdgesLabel), this),
        concatBSplinesLabel_ (std::move (concatBSplinesLabel), this),
        tightenFacesLabel_ (std::move (tightenFacesLabel), this),
        tightenEdgesLabel_ (std::move (tightenEdgesLabel), this),
        tightenVerticesLabel_ (std::move (tightenVerticesLabel), this),
        sameParameterLabel_ (std::move (sameParameterLabel), this),
        gridLocation_ (std::move (gridLocation), this)
      {
      }

      Refine::
      Refine (const Refine& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        sShape_ (x.sShape_, f, this),
        shapeMap_ (x.shapeMap_, f, this),
        unifyFaces_ (x.unifyFaces_, f, this),
        unifyEdges_ (x.unifyEdges_, f, this),
        concatBSplines_ (x.concatBSplines_, f, this),
        tightenFaces_ (x.tightenFaces_, f, this),
        tightenEdges_ (x.tightenEdges_, f, this),
        tightenVertices_ (x.tightenVertices_, f, this),
        sameParameter_ (x.sameParameter_, f, this),
        unifyFacesLabel_ (x.unifyFacesLabel_, f, this),
        unifyEdgesLabel_ (x.unifyEdgesLabel_, f, this),
        concatBSplinesLabel_ (x.concatBSplinesLabel_, f, this),
        tightenFacesLabel_ (x.tightenFacesLabel_, f, this),
        tightenEdgesLabel_ (x.tightenEdgesLabel_, f, this),
        tightenVerticesLabel_ (x.tightenVerticesLabel_, f, this),
        sameParameterLabel_ (x.sameParameterLabel_, f, this),
        gridLocation_ (x.gridLocation_, f, this)
      {
      }

      Refine::
      Refine (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        sShape_ (this),
        shapeMap_ (this),
        unifyFaces_ (this),
        unifyEdges_ (this),
        concatBSplines_ (this),
        tightenFaces_ (this),
        tightenEdges_ (this),
        tightenVertices_ (this),
        sameParameter_ (this),
        unifyFacesLabel_ (this),
        unifyEdgesLabel_ (this),
        concatBSplinesLabel_ (this),
        tightenFacesLabel_ (this),
        tightenEdgesLabel_ (this),
        tightenVerticesLabel_ (this),
        sameParameterLabel_ (this),
        gridLocation_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void Refine::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // sShape
          //
          if (n.name () == "sShape" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SShapeType > r (
              SShapeTraits::create (i, f, this));

            if (!sShape_.present ())
            {
              this->sShape_.set (::std::move (r));
              continue;
            }
          }

          // shapeMap
          //
          if (n.name () == "shapeMap" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ShapeMapType > r (
              ShapeMapTraits::create (i, f, this));

            this->shapeMap_.push_back (::std::move (r));
            continue;
          }

          // unifyFaces
          //
          if (n.name () == "unifyFaces" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< UnifyFacesType > r (
              UnifyFacesTraits::create (i, f, this));

            if (!unifyFaces_.present ())
            {
              this->unifyFaces_.set (::std::move (r));
              continue;
            }
          }

          // unifyEdges
          //
          if (n.name () == "unifyEdges" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< UnifyEdgesType > r (
              UnifyEdgesTraits::create (i, f, this));

            if (!unifyEdges_.present ())
            {
              this->unifyEdges_.set (::std::move (r));
              continue;
            }
          }

          // concatBSplines
          //
          if (n.name () == "concatBSplines" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ConcatBSplinesType > r (
              ConcatBSplinesTraits::create (i, f, this));

            if (!concatBSplines_.present ())
            {
              this->concatBSplines_.set (::std::move (r));
              continue;
            }
          }

          // tightenFaces
          //
          if (n.name () == "tightenFaces" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TightenFacesType > r (
              TightenFacesTraits::create (i, f, this));

            if (!tightenFaces_.present ())
            {
              this->tightenFaces_.set (::std::move (r));
              continue;
            }
          }

          // tightenEdges
          //
          if (n.name () == "tightenEdges" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TightenEdgesType > r (
              TightenEdgesTraits::create (i, f, this));

            if (!tightenEdges_.present ())
            {
              this->tightenEdges_.set (::std::move (r));
              continue;
            }
          }

          // tightenVertices
          //
          if (n.name () == "tightenVertices" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TightenVerticesType > r (
              TightenVerticesTraits::create (i, f, this));

            if (!tightenVertices_.present ())
            {
              this->tightenVertices_.set (::std::move (r));
              continue;
            }
          }

          // sameParameter
          //
          if (n.name () == "sameParameter" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SameParameterType > r (
              SameParameterTraits::create (i, f, this));

            if (!sameParameter_.present ())
            {
              this->sameParameter_.set (::std::move (r));
              continue;
            }
          }

          // unifyFacesLabel
          //
          if (n.name () == "unifyFacesLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< UnifyFacesLabelType > r (
              UnifyFacesLabelTraits::create (i, f, this));

            if (!unifyFacesLabel_.present ())
            {
              this->unifyFacesLabel_.set (::std::move (r));
              continue;
            }
          }

          // unifyEdgesLabel
          //
          if (n.name () == "unifyEdgesLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< UnifyEdgesLabelType > r (
              UnifyEdgesLabelTraits::create (i, f, this));

            if (!unifyEdgesLabel_.present ())
            {
              this->unifyEdgesLabel_.set (::std::move (r));
              continue;
            }
          }

          // concatBSplinesLabel
          //
          if (n.name () == "concatBSplinesLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< ConcatBSplinesLabelType > r (
              ConcatBSplinesLabelTraits::create (i, f, this));

            if (!concatBSplinesLabel_.present ())
            {
              this->concatBSplinesLabel_.set (::std::move (r));
              continue;
            }
          }

          // tightenFacesLabel
          //
          if (n.name () == "tightenFacesLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TightenFacesLabelType > r (
              TightenFacesLabelTraits::create (i, f, this));

            if (!tightenFacesLabel_.present ())
            {
              this->tightenFacesLabel_.set (::std::move (r));
              continue;
            }
          }

          // tightenEdgesLabel
          //
          if (n.name () == "tightenEdgesLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TightenEdgesLabelType > r (
              TightenEdgesLabelTraits::create (i, f, this));

            if (!tightenEdgesLabel_.present ())
            {
              this->tightenEdgesLabel_.set (::std::move (r));
              continue;
            }
          }

          // tightenVerticesLabel
          //
          if (n.name () == "tightenVerticesLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< TightenVerticesLabelType > r (
              TightenVerticesLabelTraits::create (i, f, this));

            if (!tightenVerticesLabel_.present ())
            {
              this->tightenVerticesLabel_.set (::std::move (r));
              continue;
            }
          }

          // sameParameterLabel
          //
          if (n.name () == "sameParameterLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SameParameterLabelType > r (
              SameParameterLabelTraits::create (i, f, this));

            if (!sameParameterLabel_.present ())
            {
              this->sameParameterLabel_.set (::std::move (r));
              continue;
            }
          }

          // gridLocation
          //
          if (n.name () == "gridLocation" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< GridLocationType > r (
              GridLocationTraits::create (i, f, this));

            if (!gridLocation_.present ())
            {
              this->gridLocation_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!sShape_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sShape",
            "");
        }

        if (!unifyFaces_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "unifyFaces",
            "");
        }

        if (!unifyEdges_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "unifyEdges",
            "");
        }

        if (!concatBSplines_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "concatBSplines",
            "");
        }

        if (!tightenFaces_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tightenFaces",
            "");
        }

        if (!tightenEdges_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tightenEdges",
            "");
        }

        if (!tightenVertices_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tightenVertices",
            "");
        }

        if (!sameParameter_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sameParameter",
            "");
        }

        if (!unifyFacesLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "unifyFacesLabel",
            "");
        }

        if (!unifyEdgesLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "unifyEdgesLabel",
            "");
        }

        if (!concatBSplinesLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "concatBSplinesLabel",
            "");
        }

        if (!tightenFacesLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tightenFacesLabel",
            "");
        }

        if (!tightenEdgesLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tightenEdgesLabel",
            "");
        }

        if (!tightenVerticesLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "tightenVerticesLabel",
            "");
        }

        if (!sameParameterLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sameParameterLabel",
            "");
        }

        if (!gridLocation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "gridLocation",
            "");
        }
      }

      Refine* Refine::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class Refine (*this, f, c);
      }

      Refine& Refine::
      operator= (const Refine& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->sShape_ = x.sShape_;
          this->shapeMap_ = x.shapeMap_;
          this->unifyFaces_ = x.unifyFaces_;
          this->unifyEdges_ = x.unifyEdges_;
          this->concatBSplines_ = x.concatBSplines_;
          this->tightenFaces_ = x.tightenFaces_;
          this->tightenEdges_ = x.tightenEdges_;
          this->tightenVertices_ = x.tightenVertices_;
          this->sameParameter_ = x.sameParameter_;
          this->unifyFacesLabel_ = x.unifyFacesLabel_;
          this->unifyEdgesLabel_ = x.unifyEdgesLabel_;
          this->concatBSplinesLabel_ = x.concatBSplinesLabel_;
          this->tightenFacesLabel_ = x.tightenFacesLabel_;
          this->tightenEdgesLabel_ = x.tightenEdgesLabel_;
          this->tightenVerticesLabel_ = x.tightenVerticesLabel_;
          this->sameParameterLabel_ = x.sameParameterLabel_;
          this->gridLocation_ = x.gridLocation_;
        }

        return *this;
      }

      Refine::
      ~Refine ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace rfns
    {
      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (const ::std::string& u,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::rfns::Refine > (
          ::prj::srl::rfns::refine (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (const ::std::string& u,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::rfns::Refine > (
          ::prj::srl::rfns::refine (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::rfns::Refine > (
          ::prj::srl::rfns::refine (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::std::istream& is,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::rfns::refine (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::std::istream& is,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::rfns::refine (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::rfns::refine (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::rfns::refine (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::rfns::refine (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::rfns::refine (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::xercesc::InputSource& i,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::rfns::Refine > (
          ::prj::srl::rfns::refine (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::xercesc::InputSource& i,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::rfns::Refine > (
          ::prj::srl::rfns::refine (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::rfns::Refine > (
          ::prj::srl::rfns::refine (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (const ::xercesc::DOMDocument& doc,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::rfns::Refine > (
            ::prj::srl::rfns::refine (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "refine" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/rfns")
        {
          ::std::unique_ptr< ::prj::srl::rfns::Refine > r (
            ::xsd::cxx::tree::traits< ::prj::srl::rfns::Refine, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "refine",
          "http://www.cadseer.com/prj/srl/rfns");
      }

      ::std::unique_ptr< ::prj::srl::rfns::Refine >
      refine (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "refine" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/rfns")
        {
          ::std::unique_ptr< ::prj::srl::rfns::Refine > r (
            ::xsd::cxx::tree::traits< ::prj::srl::rfns::Refine, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "refine",
          "http://www.cadseer.com/prj/srl/rfns");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace rfns
    {
      void
      operator<< (::xercesc::DOMElement& e, const Refine& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // sShape
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sShape",
              e));

          s << i.sShape ();
        }

        // shapeMap
        //
        for (Refine::ShapeMapConstIterator
             b (i.shapeMap ().begin ()), n (i.shapeMap ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "shapeMap",
              e));

          s << *b;
        }

        // unifyFaces
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "unifyFaces",
              e));

          s << i.unifyFaces ();
        }

        // unifyEdges
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "unifyEdges",
              e));

          s << i.unifyEdges ();
        }

        // concatBSplines
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "concatBSplines",
              e));

          s << i.concatBSplines ();
        }

        // tightenFaces
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tightenFaces",
              e));

          s << i.tightenFaces ();
        }

        // tightenEdges
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tightenEdges",
              e));

          s << i.tightenEdges ();
        }

        // tightenVertices
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tightenVertices",
              e));

          s << i.tightenVertices ();
        }

        // sameParameter
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sameParameter",
              e));

          s << i.sameParameter ();
        }

        // unifyFacesLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "unifyFacesLabel",
              e));

          s << i.unifyFacesLabel ();
        }

        // unifyEdgesLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "unifyEdgesLabel",
              e));

          s << i.unifyEdgesLabel ();
        }

        // concatBSplinesLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "concatBSplinesLabel",
              e));

          s << i.concatBSplinesLabel ();
        }

        // tightenFacesLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tightenFacesLabel",
              e));

          s << i.tightenFacesLabel ();
        }

        // tightenEdgesLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tightenEdgesLabel",
              e));

          s << i.tightenEdgesLabel ();
        }

        // tightenVerticesLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tightenVerticesLabel",
              e));

          s << i.tightenVerticesLabel ();
        }

        // sameParameterLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sameParameterLabel",
              e));

          s << i.sameParameterLabel ();
        }

        // gridLocation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "gridLocation",
              e));

          s << i.gridLocation ();
        }
      }

      void
      refine (::std::ostream& o,
              const ::prj::srl::rfns::Refine& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rfns::refine (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      refine (::std::ostream& o,
              const ::prj::srl::rfns::Refine& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rfns::refine (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      refine (::std::ostream& o,
              const ::prj::srl::rfns::Refine& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rfns::refine (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      refine (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::rfns::Refine& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rfns::refine (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      refine (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::rfns::Refine& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rfns::refine (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      refine (::xercesc::XMLFormatTarget& t,
              const ::prj::srl::rfns::Refine& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::rfns::refine (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      refine (::xercesc::DOMDocument& d,
              const ::prj::srl::rfns::Refine& s,
              ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "refine" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/rfns")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "refine",
            "http://www.cadseer.com/prj/srl/rfns");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      refine (const ::prj::srl::rfns::Refine& s,
              const ::xml_schema::NamespaceInfomap& m,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "refine",
            "http://www.cadseer.com/prj/srl/rfns",
            m, f));

        ::prj::srl::rfns::refine (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

