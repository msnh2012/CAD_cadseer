// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prjsrldtasdatumaxis.h"

namespace prj
{
  namespace srl
  {
    namespace dtas
    {
      // DatumAxis
      // 

      const DatumAxis::BaseType& DatumAxis::
      base () const
      {
        return this->base_.get ();
      }

      DatumAxis::BaseType& DatumAxis::
      base ()
      {
        return this->base_.get ();
      }

      void DatumAxis::
      base (const BaseType& x)
      {
        this->base_.set (x);
      }

      void DatumAxis::
      base (::std::unique_ptr< BaseType > x)
      {
        this->base_.set (std::move (x));
      }

      const DatumAxis::AxisTypeType& DatumAxis::
      axisType () const
      {
        return this->axisType_.get ();
      }

      DatumAxis::AxisTypeType& DatumAxis::
      axisType ()
      {
        return this->axisType_.get ();
      }

      void DatumAxis::
      axisType (const AxisTypeType& x)
      {
        this->axisType_.set (x);
      }

      const DatumAxis::PicksSequence& DatumAxis::
      picks () const
      {
        return this->picks_;
      }

      DatumAxis::PicksSequence& DatumAxis::
      picks ()
      {
        return this->picks_;
      }

      void DatumAxis::
      picks (const PicksSequence& s)
      {
        this->picks_ = s;
      }

      const DatumAxis::OriginType& DatumAxis::
      origin () const
      {
        return this->origin_.get ();
      }

      DatumAxis::OriginType& DatumAxis::
      origin ()
      {
        return this->origin_.get ();
      }

      void DatumAxis::
      origin (const OriginType& x)
      {
        this->origin_.set (x);
      }

      void DatumAxis::
      origin (::std::unique_ptr< OriginType > x)
      {
        this->origin_.set (std::move (x));
      }

      const DatumAxis::DirectionType& DatumAxis::
      direction () const
      {
        return this->direction_.get ();
      }

      DatumAxis::DirectionType& DatumAxis::
      direction ()
      {
        return this->direction_.get ();
      }

      void DatumAxis::
      direction (const DirectionType& x)
      {
        this->direction_.set (x);
      }

      void DatumAxis::
      direction (::std::unique_ptr< DirectionType > x)
      {
        this->direction_.set (std::move (x));
      }

      const DatumAxis::CsysType& DatumAxis::
      csys () const
      {
        return this->csys_.get ();
      }

      DatumAxis::CsysType& DatumAxis::
      csys ()
      {
        return this->csys_.get ();
      }

      void DatumAxis::
      csys (const CsysType& x)
      {
        this->csys_.set (x);
      }

      void DatumAxis::
      csys (::std::unique_ptr< CsysType > x)
      {
        this->csys_.set (std::move (x));
      }

      const DatumAxis::AutoSizeType& DatumAxis::
      autoSize () const
      {
        return this->autoSize_.get ();
      }

      DatumAxis::AutoSizeType& DatumAxis::
      autoSize ()
      {
        return this->autoSize_.get ();
      }

      void DatumAxis::
      autoSize (const AutoSizeType& x)
      {
        this->autoSize_.set (x);
      }

      void DatumAxis::
      autoSize (::std::unique_ptr< AutoSizeType > x)
      {
        this->autoSize_.set (std::move (x));
      }

      const DatumAxis::SizeType& DatumAxis::
      size () const
      {
        return this->size_.get ();
      }

      DatumAxis::SizeType& DatumAxis::
      size ()
      {
        return this->size_.get ();
      }

      void DatumAxis::
      size (const SizeType& x)
      {
        this->size_.set (x);
      }

      void DatumAxis::
      size (::std::unique_ptr< SizeType > x)
      {
        this->size_.set (std::move (x));
      }

      const DatumAxis::CsysDraggerType& DatumAxis::
      csysDragger () const
      {
        return this->csysDragger_.get ();
      }

      DatumAxis::CsysDraggerType& DatumAxis::
      csysDragger ()
      {
        return this->csysDragger_.get ();
      }

      void DatumAxis::
      csysDragger (const CsysDraggerType& x)
      {
        this->csysDragger_.set (x);
      }

      void DatumAxis::
      csysDragger (::std::unique_ptr< CsysDraggerType > x)
      {
        this->csysDragger_.set (std::move (x));
      }

      const DatumAxis::AutoSizeLabelType& DatumAxis::
      autoSizeLabel () const
      {
        return this->autoSizeLabel_.get ();
      }

      DatumAxis::AutoSizeLabelType& DatumAxis::
      autoSizeLabel ()
      {
        return this->autoSizeLabel_.get ();
      }

      void DatumAxis::
      autoSizeLabel (const AutoSizeLabelType& x)
      {
        this->autoSizeLabel_.set (x);
      }

      void DatumAxis::
      autoSizeLabel (::std::unique_ptr< AutoSizeLabelType > x)
      {
        this->autoSizeLabel_.set (std::move (x));
      }

      const DatumAxis::SizeLabelType& DatumAxis::
      sizeLabel () const
      {
        return this->sizeLabel_.get ();
      }

      DatumAxis::SizeLabelType& DatumAxis::
      sizeLabel ()
      {
        return this->sizeLabel_.get ();
      }

      void DatumAxis::
      sizeLabel (const SizeLabelType& x)
      {
        this->sizeLabel_.set (x);
      }

      void DatumAxis::
      sizeLabel (::std::unique_ptr< SizeLabelType > x)
      {
        this->sizeLabel_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace dtas
    {
      // DatumAxis
      //

      DatumAxis::
      DatumAxis (const BaseType& base,
                 const AxisTypeType& axisType,
                 const OriginType& origin,
                 const DirectionType& direction,
                 const CsysType& csys,
                 const AutoSizeType& autoSize,
                 const SizeType& size,
                 const CsysDraggerType& csysDragger,
                 const AutoSizeLabelType& autoSizeLabel,
                 const SizeLabelType& sizeLabel)
      : ::xml_schema::Type (),
        base_ (base, this),
        axisType_ (axisType, this),
        picks_ (this),
        origin_ (origin, this),
        direction_ (direction, this),
        csys_ (csys, this),
        autoSize_ (autoSize, this),
        size_ (size, this),
        csysDragger_ (csysDragger, this),
        autoSizeLabel_ (autoSizeLabel, this),
        sizeLabel_ (sizeLabel, this)
      {
      }

      DatumAxis::
      DatumAxis (::std::unique_ptr< BaseType > base,
                 const AxisTypeType& axisType,
                 ::std::unique_ptr< OriginType > origin,
                 ::std::unique_ptr< DirectionType > direction,
                 ::std::unique_ptr< CsysType > csys,
                 ::std::unique_ptr< AutoSizeType > autoSize,
                 ::std::unique_ptr< SizeType > size,
                 ::std::unique_ptr< CsysDraggerType > csysDragger,
                 ::std::unique_ptr< AutoSizeLabelType > autoSizeLabel,
                 ::std::unique_ptr< SizeLabelType > sizeLabel)
      : ::xml_schema::Type (),
        base_ (std::move (base), this),
        axisType_ (axisType, this),
        picks_ (this),
        origin_ (std::move (origin), this),
        direction_ (std::move (direction), this),
        csys_ (std::move (csys), this),
        autoSize_ (std::move (autoSize), this),
        size_ (std::move (size), this),
        csysDragger_ (std::move (csysDragger), this),
        autoSizeLabel_ (std::move (autoSizeLabel), this),
        sizeLabel_ (std::move (sizeLabel), this)
      {
      }

      DatumAxis::
      DatumAxis (const DatumAxis& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        base_ (x.base_, f, this),
        axisType_ (x.axisType_, f, this),
        picks_ (x.picks_, f, this),
        origin_ (x.origin_, f, this),
        direction_ (x.direction_, f, this),
        csys_ (x.csys_, f, this),
        autoSize_ (x.autoSize_, f, this),
        size_ (x.size_, f, this),
        csysDragger_ (x.csysDragger_, f, this),
        autoSizeLabel_ (x.autoSizeLabel_, f, this),
        sizeLabel_ (x.sizeLabel_, f, this)
      {
      }

      DatumAxis::
      DatumAxis (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        base_ (this),
        axisType_ (this),
        picks_ (this),
        origin_ (this),
        direction_ (this),
        csys_ (this),
        autoSize_ (this),
        size_ (this),
        csysDragger_ (this),
        autoSizeLabel_ (this),
        sizeLabel_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
          this->parse (p, f);
        }
      }

      void DatumAxis::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // base
          //
          if (n.name () == "base" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< BaseType > r (
              BaseTraits::create (i, f, this));

            if (!base_.present ())
            {
              this->base_.set (::std::move (r));
              continue;
            }
          }

          // axisType
          //
          if (n.name () == "axisType" && n.namespace_ ().empty ())
          {
            if (!axisType_.present ())
            {
              this->axisType_.set (AxisTypeTraits::create (i, f, this));
              continue;
            }
          }

          // picks
          //
          if (n.name () == "picks" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< PicksType > r (
              PicksTraits::create (i, f, this));

            this->picks_.push_back (::std::move (r));
            continue;
          }

          // origin
          //
          if (n.name () == "origin" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< OriginType > r (
              OriginTraits::create (i, f, this));

            if (!origin_.present ())
            {
              this->origin_.set (::std::move (r));
              continue;
            }
          }

          // direction
          //
          if (n.name () == "direction" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< DirectionType > r (
              DirectionTraits::create (i, f, this));

            if (!direction_.present ())
            {
              this->direction_.set (::std::move (r));
              continue;
            }
          }

          // csys
          //
          if (n.name () == "csys" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysType > r (
              CsysTraits::create (i, f, this));

            if (!csys_.present ())
            {
              this->csys_.set (::std::move (r));
              continue;
            }
          }

          // autoSize
          //
          if (n.name () == "autoSize" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AutoSizeType > r (
              AutoSizeTraits::create (i, f, this));

            if (!autoSize_.present ())
            {
              this->autoSize_.set (::std::move (r));
              continue;
            }
          }

          // size
          //
          if (n.name () == "size" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SizeType > r (
              SizeTraits::create (i, f, this));

            if (!size_.present ())
            {
              this->size_.set (::std::move (r));
              continue;
            }
          }

          // csysDragger
          //
          if (n.name () == "csysDragger" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< CsysDraggerType > r (
              CsysDraggerTraits::create (i, f, this));

            if (!csysDragger_.present ())
            {
              this->csysDragger_.set (::std::move (r));
              continue;
            }
          }

          // autoSizeLabel
          //
          if (n.name () == "autoSizeLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< AutoSizeLabelType > r (
              AutoSizeLabelTraits::create (i, f, this));

            if (!autoSizeLabel_.present ())
            {
              this->autoSizeLabel_.set (::std::move (r));
              continue;
            }
          }

          // sizeLabel
          //
          if (n.name () == "sizeLabel" && n.namespace_ ().empty ())
          {
            ::std::unique_ptr< SizeLabelType > r (
              SizeLabelTraits::create (i, f, this));

            if (!sizeLabel_.present ())
            {
              this->sizeLabel_.set (::std::move (r));
              continue;
            }
          }

          break;
        }

        if (!base_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "base",
            "");
        }

        if (!axisType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "axisType",
            "");
        }

        if (!origin_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "origin",
            "");
        }

        if (!direction_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "direction",
            "");
        }

        if (!csys_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csys",
            "");
        }

        if (!autoSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "autoSize",
            "");
        }

        if (!size_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "size",
            "");
        }

        if (!csysDragger_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "csysDragger",
            "");
        }

        if (!autoSizeLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "autoSizeLabel",
            "");
        }

        if (!sizeLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "sizeLabel",
            "");
        }
      }

      DatumAxis* DatumAxis::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class DatumAxis (*this, f, c);
      }

      DatumAxis& DatumAxis::
      operator= (const DatumAxis& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->base_ = x.base_;
          this->axisType_ = x.axisType_;
          this->picks_ = x.picks_;
          this->origin_ = x.origin_;
          this->direction_ = x.direction_;
          this->csys_ = x.csys_;
          this->autoSize_ = x.autoSize_;
          this->size_ = x.size_;
          this->csysDragger_ = x.csysDragger_;
          this->autoSizeLabel_ = x.autoSizeLabel_;
          this->sizeLabel_ = x.sizeLabel_;
        }

        return *this;
      }

      DatumAxis::
      ~DatumAxis ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    namespace dtas
    {
      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (const ::std::string& u,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > (
          ::prj::srl::dtas::datumAxis (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (const ::std::string& u,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > (
          ::prj::srl::dtas::datumAxis (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > (
          ::prj::srl::dtas::datumAxis (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::dtas::datumAxis (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::dtas::datumAxis (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::prj::srl::dtas::datumAxis (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::dtas::datumAxis (isrc, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::dtas::datumAxis (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::prj::srl::dtas::datumAxis (isrc, h, f, p);
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::xercesc::InputSource& i,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > (
          ::prj::srl::dtas::datumAxis (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::xercesc::InputSource& i,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > (
          ::prj::srl::dtas::datumAxis (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > (
          ::prj::srl::dtas::datumAxis (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > (
            ::prj::srl::dtas::datumAxis (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "datumAxis" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/dtas")
        {
          ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > r (
            ::xsd::cxx::tree::traits< ::prj::srl::dtas::DatumAxis, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "datumAxis",
          "http://www.cadseer.com/prj/srl/dtas");
      }

      ::std::unique_ptr< ::prj::srl::dtas::DatumAxis >
      datumAxis (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "datumAxis" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/dtas")
        {
          ::std::unique_ptr< ::prj::srl::dtas::DatumAxis > r (
            ::xsd::cxx::tree::traits< ::prj::srl::dtas::DatumAxis, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "datumAxis",
          "http://www.cadseer.com/prj/srl/dtas");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    namespace dtas
    {
      void
      operator<< (::xercesc::DOMElement& e, const DatumAxis& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // base
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "base",
              e));

          s << i.base ();
        }

        // axisType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "axisType",
              e));

          s << i.axisType ();
        }

        // picks
        //
        for (DatumAxis::PicksConstIterator
             b (i.picks ().begin ()), n (i.picks ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "picks",
              e));

          s << *b;
        }

        // origin
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "origin",
              e));

          s << i.origin ();
        }

        // direction
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "direction",
              e));

          s << i.direction ();
        }

        // csys
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csys",
              e));

          s << i.csys ();
        }

        // autoSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "autoSize",
              e));

          s << i.autoSize ();
        }

        // size
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "size",
              e));

          s << i.size ();
        }

        // csysDragger
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "csysDragger",
              e));

          s << i.csysDragger ();
        }

        // autoSizeLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "autoSizeLabel",
              e));

          s << i.autoSizeLabel ();
        }

        // sizeLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "sizeLabel",
              e));

          s << i.sizeLabel ();
        }
      }

      void
      datumAxis (::std::ostream& o,
                 const ::prj::srl::dtas::DatumAxis& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtas::datumAxis (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      datumAxis (::std::ostream& o,
                 const ::prj::srl::dtas::DatumAxis& s,
                 ::xml_schema::ErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtas::datumAxis (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      datumAxis (::std::ostream& o,
                 const ::prj::srl::dtas::DatumAxis& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtas::datumAxis (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      datumAxis (::xercesc::XMLFormatTarget& t,
                 const ::prj::srl::dtas::DatumAxis& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtas::datumAxis (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      datumAxis (::xercesc::XMLFormatTarget& t,
                 const ::prj::srl::dtas::DatumAxis& s,
                 ::xml_schema::ErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtas::datumAxis (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      datumAxis (::xercesc::XMLFormatTarget& t,
                 const ::prj::srl::dtas::DatumAxis& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::prj::srl::dtas::datumAxis (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      datumAxis (::xercesc::DOMDocument& d,
                 const ::prj::srl::dtas::DatumAxis& s,
                 ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "datumAxis" &&
            n.namespace_ () == "http://www.cadseer.com/prj/srl/dtas")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "datumAxis",
            "http://www.cadseer.com/prj/srl/dtas");
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      datumAxis (const ::prj::srl::dtas::DatumAxis& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "datumAxis",
            "http://www.cadseer.com/prj/srl/dtas",
            m, f));

        ::prj::srl::dtas::datumAxis (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

