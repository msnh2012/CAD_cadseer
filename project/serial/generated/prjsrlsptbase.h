// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_SPT_PRJSRLSPTBASE_H
#define PRJ_SRL_SPT_PRJSRLSPTBASE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class Base;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptcolor.h"

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      class Base: public ::xml_schema::Type
      {
        public:
        // name
        //
        typedef ::xml_schema::String NameType;
        typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

        const NameType&
        name () const;

        NameType&
        name ();

        void
        name (const NameType& x);

        void
        name (::std::unique_ptr< NameType > p);

        static const NameType&
        name_default_value ();

        // id
        //
        typedef ::xml_schema::String IdType;
        typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

        const IdType&
        id () const;

        IdType&
        id ();

        void
        id (const IdType& x);

        void
        id (::std::unique_ptr< IdType > p);

        static const IdType&
        id_default_value ();

        // color
        //
        typedef ::prj::srl::spt::Color ColorType;
        typedef ::xsd::cxx::tree::traits< ColorType, char > ColorTraits;

        const ColorType&
        color () const;

        ColorType&
        color ();

        void
        color (const ColorType& x);

        void
        color (::std::unique_ptr< ColorType > p);

        // state
        //
        typedef ::xml_schema::String StateType;
        typedef ::xsd::cxx::tree::traits< StateType, char > StateTraits;

        const StateType&
        state () const;

        StateType&
        state ();

        void
        state (const StateType& x);

        void
        state (::std::unique_ptr< StateType > p);

        // Constructors.
        //
        Base (const NameType&,
              const IdType&,
              const ColorType&,
              const StateType&);

        Base (const NameType&,
              const IdType&,
              ::std::unique_ptr< ColorType >,
              const StateType&);

        Base (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        Base (const Base& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        virtual Base*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Base&
        operator= (const Base& x);

        virtual 
        ~Base ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< NameType > name_;
        static const NameType name_default_value_;
        ::xsd::cxx::tree::one< IdType > id_;
        static const IdType id_default_value_;
        ::xsd::cxx::tree::one< ColorType > color_;
        ::xsd::cxx::tree::one< StateType > state_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace spt
    {
      void
      operator<< (::xercesc::DOMElement&, const Base&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_SPT_PRJSRLSPTBASE_H
