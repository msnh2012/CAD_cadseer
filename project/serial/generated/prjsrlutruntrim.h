// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_UTR_PRJSRLUTRUNTRIM_H
#define PRJ_SRL_UTR_PRJSRLUTRUNTRIM_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace utr
    {
      class EdgeToCap;
      class Untrim;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlsptseershape.h"

#include "prjsrlsptpick.h"

#include "prjsrlsptbase.h"

namespace prj
{
  namespace srl
  {
    namespace utr
    {
      class EdgeToCap: public ::xml_schema::Type
      {
        public:
        // keyId
        //
        typedef ::xml_schema::String KeyIdType;
        typedef ::xsd::cxx::tree::traits< KeyIdType, char > KeyIdTraits;

        const KeyIdType&
        keyId () const;

        KeyIdType&
        keyId ();

        void
        keyId (const KeyIdType& x);

        void
        keyId (::std::unique_ptr< KeyIdType > p);

        static const KeyIdType&
        keyId_default_value ();

        // faceId
        //
        typedef ::xml_schema::String FaceIdType;
        typedef ::xsd::cxx::tree::traits< FaceIdType, char > FaceIdTraits;

        const FaceIdType&
        faceId () const;

        FaceIdType&
        faceId ();

        void
        faceId (const FaceIdType& x);

        void
        faceId (::std::unique_ptr< FaceIdType > p);

        static const FaceIdType&
        faceId_default_value ();

        // wireId
        //
        typedef ::xml_schema::String WireIdType;
        typedef ::xsd::cxx::tree::traits< WireIdType, char > WireIdTraits;

        const WireIdType&
        wireId () const;

        WireIdType&
        wireId ();

        void
        wireId (const WireIdType& x);

        void
        wireId (::std::unique_ptr< WireIdType > p);

        static const WireIdType&
        wireId_default_value ();

        // Constructors.
        //
        EdgeToCap (const KeyIdType&,
                   const FaceIdType&,
                   const WireIdType&);

        EdgeToCap (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        EdgeToCap (const EdgeToCap& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual EdgeToCap*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        EdgeToCap&
        operator= (const EdgeToCap& x);

        virtual 
        ~EdgeToCap ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< KeyIdType > keyId_;
        static const KeyIdType keyId_default_value_;
        ::xsd::cxx::tree::one< FaceIdType > faceId_;
        static const FaceIdType faceId_default_value_;
        ::xsd::cxx::tree::one< WireIdType > wireId_;
        static const WireIdType wireId_default_value_;
      };

      class Untrim: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // seerShape
        //
        typedef ::prj::srl::spt::SeerShape SeerShapeType;
        typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

        const SeerShapeType&
        seerShape () const;

        SeerShapeType&
        seerShape ();

        void
        seerShape (const SeerShapeType& x);

        void
        seerShape (::std::unique_ptr< SeerShapeType > p);

        // pick
        //
        typedef ::prj::srl::spt::Pick PickType;
        typedef ::xsd::cxx::tree::traits< PickType, char > PickTraits;

        const PickType&
        pick () const;

        PickType&
        pick ();

        void
        pick (const PickType& x);

        void
        pick (::std::unique_ptr< PickType > p);

        // offset
        //
        typedef ::prj::srl::spt::Parameter OffsetType;
        typedef ::xsd::cxx::tree::traits< OffsetType, char > OffsetTraits;

        const OffsetType&
        offset () const;

        OffsetType&
        offset ();

        void
        offset (const OffsetType& x);

        void
        offset (::std::unique_ptr< OffsetType > p);

        // closeU
        //
        typedef ::prj::srl::spt::Parameter CloseUType;
        typedef ::xsd::cxx::tree::traits< CloseUType, char > CloseUTraits;

        const CloseUType&
        closeU () const;

        CloseUType&
        closeU ();

        void
        closeU (const CloseUType& x);

        void
        closeU (::std::unique_ptr< CloseUType > p);

        // closeV
        //
        typedef ::prj::srl::spt::Parameter CloseVType;
        typedef ::xsd::cxx::tree::traits< CloseVType, char > CloseVTraits;

        const CloseVType&
        closeV () const;

        CloseVType&
        closeV ();

        void
        closeV (const CloseVType& x);

        void
        closeV (::std::unique_ptr< CloseVType > p);

        // makeSolid
        //
        typedef ::prj::srl::spt::Parameter MakeSolidType;
        typedef ::xsd::cxx::tree::traits< MakeSolidType, char > MakeSolidTraits;

        const MakeSolidType&
        makeSolid () const;

        MakeSolidType&
        makeSolid ();

        void
        makeSolid (const MakeSolidType& x);

        void
        makeSolid (::std::unique_ptr< MakeSolidType > p);

        // offsetLabel
        //
        typedef ::prj::srl::spt::PLabel OffsetLabelType;
        typedef ::xsd::cxx::tree::traits< OffsetLabelType, char > OffsetLabelTraits;

        const OffsetLabelType&
        offsetLabel () const;

        OffsetLabelType&
        offsetLabel ();

        void
        offsetLabel (const OffsetLabelType& x);

        void
        offsetLabel (::std::unique_ptr< OffsetLabelType > p);

        // closeULabel
        //
        typedef ::prj::srl::spt::PLabel CloseULabelType;
        typedef ::xsd::cxx::tree::traits< CloseULabelType, char > CloseULabelTraits;

        const CloseULabelType&
        closeULabel () const;

        CloseULabelType&
        closeULabel ();

        void
        closeULabel (const CloseULabelType& x);

        void
        closeULabel (::std::unique_ptr< CloseULabelType > p);

        // closeVLabel
        //
        typedef ::prj::srl::spt::PLabel CloseVLabelType;
        typedef ::xsd::cxx::tree::traits< CloseVLabelType, char > CloseVLabelTraits;

        const CloseVLabelType&
        closeVLabel () const;

        CloseVLabelType&
        closeVLabel ();

        void
        closeVLabel (const CloseVLabelType& x);

        void
        closeVLabel (::std::unique_ptr< CloseVLabelType > p);

        // makeSolidLabel
        //
        typedef ::prj::srl::spt::PLabel MakeSolidLabelType;
        typedef ::xsd::cxx::tree::traits< MakeSolidLabelType, char > MakeSolidLabelTraits;

        const MakeSolidLabelType&
        makeSolidLabel () const;

        MakeSolidLabelType&
        makeSolidLabel ();

        void
        makeSolidLabel (const MakeSolidLabelType& x);

        void
        makeSolidLabel (::std::unique_ptr< MakeSolidLabelType > p);

        // solidId
        //
        typedef ::xml_schema::String SolidIdType;
        typedef ::xsd::cxx::tree::traits< SolidIdType, char > SolidIdTraits;

        const SolidIdType&
        solidId () const;

        SolidIdType&
        solidId ();

        void
        solidId (const SolidIdType& x);

        void
        solidId (::std::unique_ptr< SolidIdType > p);

        // shellId
        //
        typedef ::xml_schema::String ShellIdType;
        typedef ::xsd::cxx::tree::traits< ShellIdType, char > ShellIdTraits;

        const ShellIdType&
        shellId () const;

        ShellIdType&
        shellId ();

        void
        shellId (const ShellIdType& x);

        void
        shellId (::std::unique_ptr< ShellIdType > p);

        // uvEdgeIds
        //
        typedef ::xml_schema::String UvEdgeIdsType;
        typedef ::xsd::cxx::tree::sequence< UvEdgeIdsType > UvEdgeIdsSequence;
        typedef UvEdgeIdsSequence::iterator UvEdgeIdsIterator;
        typedef UvEdgeIdsSequence::const_iterator UvEdgeIdsConstIterator;
        typedef ::xsd::cxx::tree::traits< UvEdgeIdsType, char > UvEdgeIdsTraits;

        const UvEdgeIdsSequence&
        uvEdgeIds () const;

        UvEdgeIdsSequence&
        uvEdgeIds ();

        void
        uvEdgeIds (const UvEdgeIdsSequence& s);

        // edgeToCap
        //
        typedef ::prj::srl::utr::EdgeToCap EdgeToCapType;
        typedef ::xsd::cxx::tree::sequence< EdgeToCapType > EdgeToCapSequence;
        typedef EdgeToCapSequence::iterator EdgeToCapIterator;
        typedef EdgeToCapSequence::const_iterator EdgeToCapConstIterator;
        typedef ::xsd::cxx::tree::traits< EdgeToCapType, char > EdgeToCapTraits;

        const EdgeToCapSequence&
        edgeToCap () const;

        EdgeToCapSequence&
        edgeToCap ();

        void
        edgeToCap (const EdgeToCapSequence& s);

        // Constructors.
        //
        Untrim (const BaseType&,
                const SeerShapeType&,
                const PickType&,
                const OffsetType&,
                const CloseUType&,
                const CloseVType&,
                const MakeSolidType&,
                const OffsetLabelType&,
                const CloseULabelType&,
                const CloseVLabelType&,
                const MakeSolidLabelType&,
                const SolidIdType&,
                const ShellIdType&);

        Untrim (::std::unique_ptr< BaseType >,
                ::std::unique_ptr< SeerShapeType >,
                ::std::unique_ptr< PickType >,
                ::std::unique_ptr< OffsetType >,
                ::std::unique_ptr< CloseUType >,
                ::std::unique_ptr< CloseVType >,
                ::std::unique_ptr< MakeSolidType >,
                ::std::unique_ptr< OffsetLabelType >,
                ::std::unique_ptr< CloseULabelType >,
                ::std::unique_ptr< CloseVLabelType >,
                ::std::unique_ptr< MakeSolidLabelType >,
                const SolidIdType&,
                const ShellIdType&);

        Untrim (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        Untrim (const Untrim& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual Untrim*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Untrim&
        operator= (const Untrim& x);

        virtual 
        ~Untrim ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< SeerShapeType > seerShape_;
        ::xsd::cxx::tree::one< PickType > pick_;
        ::xsd::cxx::tree::one< OffsetType > offset_;
        ::xsd::cxx::tree::one< CloseUType > closeU_;
        ::xsd::cxx::tree::one< CloseVType > closeV_;
        ::xsd::cxx::tree::one< MakeSolidType > makeSolid_;
        ::xsd::cxx::tree::one< OffsetLabelType > offsetLabel_;
        ::xsd::cxx::tree::one< CloseULabelType > closeULabel_;
        ::xsd::cxx::tree::one< CloseVLabelType > closeVLabel_;
        ::xsd::cxx::tree::one< MakeSolidLabelType > makeSolidLabel_;
        ::xsd::cxx::tree::one< SolidIdType > solidId_;
        ::xsd::cxx::tree::one< ShellIdType > shellId_;
        UvEdgeIdsSequence uvEdgeIds_;
        EdgeToCapSequence edgeToCap_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace utr
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::utr::Untrim >
      untrim (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace utr
    {
      void
      operator<< (::xercesc::DOMElement&, const EdgeToCap&);

      void
      operator<< (::xercesc::DOMElement&, const Untrim&);

      // Serialize to std::ostream.
      //

      void
      untrim (::std::ostream& os,
              const ::prj::srl::utr::Untrim& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      untrim (::std::ostream& os,
              const ::prj::srl::utr::Untrim& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      untrim (::std::ostream& os,
              const ::prj::srl::utr::Untrim& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      untrim (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::utr::Untrim& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      untrim (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::utr::Untrim& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      untrim (::xercesc::XMLFormatTarget& ft,
              const ::prj::srl::utr::Untrim& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      untrim (::xercesc::DOMDocument& d,
              const ::prj::srl::utr::Untrim& x,
              ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      untrim (const ::prj::srl::utr::Untrim& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_UTR_PRJSRLUTRUNTRIM_H
