// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PRJ_SRL_SFMS_PRJSRLSFMSSURFACEMESH_H
#define PRJ_SRL_SFMS_PRJSRLSFMSSURFACEMESH_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    namespace sfms
    {
      class SurfaceMesh;
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "prjsrlsptbase.h"

#include "prjsrlsptparameter.h"

#include "prjsrlsptoverlay.h"

#include "prjsrlmshsmesh.h"

namespace prj
{
  namespace srl
  {
    namespace sfms
    {
      class SurfaceMesh: public ::xml_schema::Type
      {
        public:
        // base
        //
        typedef ::prj::srl::spt::Base BaseType;
        typedef ::xsd::cxx::tree::traits< BaseType, char > BaseTraits;

        const BaseType&
        base () const;

        BaseType&
        base ();

        void
        base (const BaseType& x);

        void
        base (::std::unique_ptr< BaseType > p);

        // meshType
        //
        typedef ::prj::srl::spt::Parameter MeshTypeType;
        typedef ::xsd::cxx::tree::traits< MeshTypeType, char > MeshTypeTraits;

        const MeshTypeType&
        meshType () const;

        MeshTypeType&
        meshType ();

        void
        meshType (const MeshTypeType& x);

        void
        meshType (::std::unique_ptr< MeshTypeType > p);

        // csys
        //
        typedef ::prj::srl::spt::Parameter CsysType;
        typedef ::xsd::cxx::tree::traits< CsysType, char > CsysTraits;

        const CsysType&
        csys () const;

        CsysType&
        csys ();

        void
        csys (const CsysType& x);

        void
        csys (::std::unique_ptr< CsysType > p);

        // source
        //
        typedef ::prj::srl::spt::Parameter SourceType;
        typedef ::xsd::cxx::tree::traits< SourceType, char > SourceTraits;

        const SourceType&
        source () const;

        SourceType&
        source ();

        void
        source (const SourceType& x);

        void
        source (::std::unique_ptr< SourceType > p);

        // csysDragger
        //
        typedef ::prj::srl::spt::CSysDragger CsysDraggerType;
        typedef ::xsd::cxx::tree::traits< CsysDraggerType, char > CsysDraggerTraits;

        const CsysDraggerType&
        csysDragger () const;

        CsysDraggerType&
        csysDragger ();

        void
        csysDragger (const CsysDraggerType& x);

        void
        csysDragger (::std::unique_ptr< CsysDraggerType > p);

        // surface
        //
        typedef ::prj::srl::mshs::Surface SurfaceType;
        typedef ::xsd::cxx::tree::traits< SurfaceType, char > SurfaceTraits;

        const SurfaceType&
        surface () const;

        SurfaceType&
        surface ();

        void
        surface (const SurfaceType& x);

        void
        surface (::std::unique_ptr< SurfaceType > p);

        // parametersOCCT
        //
        typedef ::prj::srl::mshs::ParametersOCCT ParametersOCCTType;
        typedef ::xsd::cxx::tree::optional< ParametersOCCTType > ParametersOCCTOptional;
        typedef ::xsd::cxx::tree::traits< ParametersOCCTType, char > ParametersOCCTTraits;

        const ParametersOCCTOptional&
        parametersOCCT () const;

        ParametersOCCTOptional&
        parametersOCCT ();

        void
        parametersOCCT (const ParametersOCCTType& x);

        void
        parametersOCCT (const ParametersOCCTOptional& x);

        void
        parametersOCCT (::std::unique_ptr< ParametersOCCTType > p);

        // parametersNetgen
        //
        typedef ::prj::srl::mshs::ParametersNetgen ParametersNetgenType;
        typedef ::xsd::cxx::tree::optional< ParametersNetgenType > ParametersNetgenOptional;
        typedef ::xsd::cxx::tree::traits< ParametersNetgenType, char > ParametersNetgenTraits;

        const ParametersNetgenOptional&
        parametersNetgen () const;

        ParametersNetgenOptional&
        parametersNetgen ();

        void
        parametersNetgen (const ParametersNetgenType& x);

        void
        parametersNetgen (const ParametersNetgenOptional& x);

        void
        parametersNetgen (::std::unique_ptr< ParametersNetgenType > p);

        // parametersGMSH
        //
        typedef ::prj::srl::mshs::ParametersGMSH ParametersGMSHType;
        typedef ::xsd::cxx::tree::optional< ParametersGMSHType > ParametersGMSHOptional;
        typedef ::xsd::cxx::tree::traits< ParametersGMSHType, char > ParametersGMSHTraits;

        const ParametersGMSHOptional&
        parametersGMSH () const;

        ParametersGMSHOptional&
        parametersGMSH ();

        void
        parametersGMSH (const ParametersGMSHType& x);

        void
        parametersGMSH (const ParametersGMSHOptional& x);

        void
        parametersGMSH (::std::unique_ptr< ParametersGMSHType > p);

        // Constructors.
        //
        SurfaceMesh (const BaseType&,
                     const MeshTypeType&,
                     const CsysType&,
                     const SourceType&,
                     const CsysDraggerType&,
                     const SurfaceType&);

        SurfaceMesh (::std::unique_ptr< BaseType >,
                     ::std::unique_ptr< MeshTypeType >,
                     ::std::unique_ptr< CsysType >,
                     ::std::unique_ptr< SourceType >,
                     ::std::unique_ptr< CsysDraggerType >,
                     ::std::unique_ptr< SurfaceType >);

        SurfaceMesh (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        SurfaceMesh (const SurfaceMesh& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        virtual SurfaceMesh*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        SurfaceMesh&
        operator= (const SurfaceMesh& x);

        virtual 
        ~SurfaceMesh ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< BaseType > base_;
        ::xsd::cxx::tree::one< MeshTypeType > meshType_;
        ::xsd::cxx::tree::one< CsysType > csys_;
        ::xsd::cxx::tree::one< SourceType > source_;
        ::xsd::cxx::tree::one< CsysDraggerType > csysDragger_;
        ::xsd::cxx::tree::one< SurfaceType > surface_;
        ParametersOCCTOptional parametersOCCT_;
        ParametersNetgenOptional parametersNetgen_;
        ParametersGMSHOptional parametersGMSH_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    namespace sfms
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::prj::srl::sfms::SurfaceMesh >
      surfaceMesh (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    namespace sfms
    {
      void
      operator<< (::xercesc::DOMElement&, const SurfaceMesh&);

      // Serialize to std::ostream.
      //

      void
      surfaceMesh (::std::ostream& os,
                   const ::prj::srl::sfms::SurfaceMesh& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      void
      surfaceMesh (::std::ostream& os,
                   const ::prj::srl::sfms::SurfaceMesh& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      void
      surfaceMesh (::std::ostream& os,
                   const ::prj::srl::sfms::SurfaceMesh& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      surfaceMesh (::xercesc::XMLFormatTarget& ft,
                   const ::prj::srl::sfms::SurfaceMesh& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      void
      surfaceMesh (::xercesc::XMLFormatTarget& ft,
                   const ::prj::srl::sfms::SurfaceMesh& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      void
      surfaceMesh (::xercesc::XMLFormatTarget& ft,
                   const ::prj::srl::sfms::SurfaceMesh& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      surfaceMesh (::xercesc::DOMDocument& d,
                   const ::prj::srl::sfms::SurfaceMesh& x,
                   ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      surfaceMesh (const ::prj::srl::sfms::SurfaceMesh& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_SFMS_PRJSRLSFMSSURFACEMESH_H
